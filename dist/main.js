(()=>{var t={6124:(t,e,n)=>{"use strict";if(n(1934),n(5654),n(7694),n.g._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");function r(t,e,n){t[e]||Object.defineProperty(t,e,{writable:!0,configurable:!0,value:n})}n.g._babelPolyfill=!0,r(String.prototype,"padLeft","".padStart),r(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach((function(t){[][t]&&r(Array,t,Function.call.bind([][t]))}))},5654:function(t,e,n){!function(e){"use strict";var n,r=Object.prototype,i=r.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",u=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag",s=e.regeneratorRuntime;if(s)t.exports=s;else{(s=e.regeneratorRuntime=t.exports).wrap=w;var f="suspendedStart",l="suspendedYield",d="executing",h="completed",v={},p={};p[o]=function(){return this};var g=Object.getPrototypeOf,m=g&&g(g(E([])));m&&m!==r&&i.call(m,o)&&(p=m);var y=S.prototype=A.prototype=Object.create(p);x.prototype=y.constructor=S,S.constructor=x,S[c]=x.displayName="GeneratorFunction",s.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===x||"GeneratorFunction"===(e.displayName||e.name))},s.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,S):(t.__proto__=S,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(y),t},s.awrap=function(t){return{__await:t}},M(C.prototype),C.prototype[u]=function(){return this},s.AsyncIterator=C,s.async=function(t,e,n,r){var i=new C(w(t,e,n,r));return s.isGeneratorFunction(e)?i:i.next().then((function(t){return t.done?t.value:i.next()}))},M(y),y[c]="Generator",y[o]=function(){return this},y.toString=function(){return"[object Generator]"},s.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},s.values=E,P.prototype={constructor:P,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(I),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,i){return u.type="throw",u.arg=t,e.next=r,i&&(e.method="next",e.arg=n),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],u=o.completion;if("root"===o.tryLoc)return r("end");if(o.tryLoc<=this.prev){var c=i.call(o,"catchLoc"),s=i.call(o,"finallyLoc");if(c&&s){if(this.prev<o.catchLoc)return r(o.catchLoc,!0);if(this.prev<o.finallyLoc)return r(o.finallyLoc)}else if(c){if(this.prev<o.catchLoc)return r(o.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return r(o.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var a=r;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,v):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),I(n),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;I(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:E(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),v}}}function w(t,e,n,r){var i=e&&e.prototype instanceof A?e:A,a=Object.create(i.prototype),o=new P(r||[]);return a._invoke=function(t,e,n){var r=f;return function(i,a){if(r===d)throw new Error("Generator is already running");if(r===h){if("throw"===i)throw a;return k()}for(n.method=i,n.arg=a;;){var o=n.delegate;if(o){var u=_(o,n);if(u){if(u===v)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=d;var c=b(t,e,n);if("normal"===c.type){if(r=n.done?h:l,c.arg===v)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r=h,n.method="throw",n.arg=c.arg)}}}(t,n,o),a}function b(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function A(){}function x(){}function S(){}function M(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function C(t){function n(e,r,a,o){var u=b(t[e],t,r);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==typeof s&&i.call(s,"__await")?Promise.resolve(s.__await).then((function(t){n("next",t,a,o)}),(function(t){n("throw",t,a,o)})):Promise.resolve(s).then((function(t){c.value=t,a(c)}),o)}o(u.arg)}var r;"object"==typeof e.process&&e.process.domain&&(n=e.process.domain.bind(n)),this._invoke=function(t,e){function i(){return new Promise((function(r,i){n(t,e,r,i)}))}return r=r?r.then(i,i):i()}}function _(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,_(t,e),"throw"===e.method))return v;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var i=b(r,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,v;var a=i.arg;return a?a.done?(e[t.resultName]=a.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,v):a:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,v)}function T(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function I(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function P(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(T,this),this.reset(!0)}function E(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,a=function e(){for(;++r<t.length;)if(i.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=n,e.done=!0,e};return a.next=a}}return{next:k}}function k(){return{value:n,done:!0}}}("object"==typeof n.g?n.g:"object"==typeof window?window:"object"==typeof self?self:this)},7694:(t,e,n)=>{n(1761),t.exports=n(5645).RegExp.escape},4963:t=>{t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},3365:(t,e,n)=>{var r=n(2032);t.exports=function(t,e){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(e);return+t}},7722:(t,e,n)=>{var r=n(6314)("unscopables"),i=Array.prototype;null==i[r]&&n(7728)(i,r,{}),t.exports=function(t){i[r][t]=!0}},6793:(t,e,n)=>{"use strict";var r=n(4496)(!0);t.exports=function(t,e,n){return e+(n?r(t,e).length:1)}},3328:t=>{t.exports=function(t,e,n,r){if(!(t instanceof e)||void 0!==r&&r in t)throw TypeError(n+": incorrect invocation!");return t}},7007:(t,e,n)=>{var r=n(5286);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},5216:(t,e,n)=>{"use strict";var r=n(508),i=n(2337),a=n(875);t.exports=[].copyWithin||function(t,e){var n=r(this),o=a(n.length),u=i(t,o),c=i(e,o),s=arguments.length>2?arguments[2]:void 0,f=Math.min((void 0===s?o:i(s,o))-c,o-u),l=1;for(c<u&&u<c+f&&(l=-1,c+=f-1,u+=f-1);f-- >0;)c in n?n[u]=n[c]:delete n[u],u+=l,c+=l;return n}},6852:(t,e,n)=>{"use strict";var r=n(508),i=n(2337),a=n(875);t.exports=function(t){for(var e=r(this),n=a(e.length),o=arguments.length,u=i(o>1?arguments[1]:void 0,n),c=o>2?arguments[2]:void 0,s=void 0===c?n:i(c,n);s>u;)e[u++]=t;return e}},9490:(t,e,n)=>{var r=n(3531);t.exports=function(t,e){var n=[];return r(t,!1,n.push,n,e),n}},9315:(t,e,n)=>{var r=n(2110),i=n(875),a=n(2337);t.exports=function(t){return function(e,n,o){var u,c=r(e),s=i(c.length),f=a(o,s);if(t&&n!=n){for(;s>f;)if((u=c[f++])!=u)return!0}else for(;s>f;f++)if((t||f in c)&&c[f]===n)return t||f||0;return!t&&-1}}},50:(t,e,n)=>{var r=n(741),i=n(9797),a=n(508),o=n(875),u=n(6886);t.exports=function(t,e){var n=1==t,c=2==t,s=3==t,f=4==t,l=6==t,d=5==t||l,h=e||u;return function(e,u,v){for(var p,g,m=a(e),y=i(m),w=r(u,v,3),b=o(y.length),A=0,x=n?h(e,b):c?h(e,0):void 0;b>A;A++)if((d||A in y)&&(g=w(p=y[A],A,m),t))if(n)x[A]=g;else if(g)switch(t){case 3:return!0;case 5:return p;case 6:return A;case 2:x.push(p)}else if(f)return!1;return l?-1:s||f?f:x}}},7628:(t,e,n)=>{var r=n(4963),i=n(508),a=n(9797),o=n(875);t.exports=function(t,e,n,u,c){r(e);var s=i(t),f=a(s),l=o(s.length),d=c?l-1:0,h=c?-1:1;if(n<2)for(;;){if(d in f){u=f[d],d+=h;break}if(d+=h,c?d<0:l<=d)throw TypeError("Reduce of empty array with no initial value")}for(;c?d>=0:l>d;d+=h)d in f&&(u=e(u,f[d],d,s));return u}},2736:(t,e,n)=>{var r=n(5286),i=n(4302),a=n(6314)("species");t.exports=function(t){var e;return i(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!i(e.prototype)||(e=void 0),r(e)&&null===(e=e[a])&&(e=void 0)),void 0===e?Array:e}},6886:(t,e,n)=>{var r=n(2736);t.exports=function(t,e){return new(r(t))(e)}},4398:(t,e,n)=>{"use strict";var r=n(4963),i=n(5286),a=n(7242),o=[].slice,u={},c=function(t,e,n){if(!(e in u)){for(var r=[],i=0;i<e;i++)r[i]="a["+i+"]";u[e]=Function("F,a","return new F("+r.join(",")+")")}return u[e](t,n)};t.exports=Function.bind||function(t){var e=r(this),n=o.call(arguments,1),u=function(){var r=n.concat(o.call(arguments));return this instanceof u?c(e,r.length,r):a(e,r,t)};return i(e.prototype)&&(u.prototype=e.prototype),u}},1488:(t,e,n)=>{var r=n(2032),i=n(6314)("toStringTag"),a="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,o;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?n:a?r(e):"Object"==(o=r(e))&&"function"==typeof e.callee?"Arguments":o}},2032:t=>{var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},9824:(t,e,n)=>{"use strict";var r=n(9275).f,i=n(2503),a=n(4408),o=n(741),u=n(3328),c=n(3531),s=n(2923),f=n(5436),l=n(2974),d=n(7057),h=n(4728).fastKey,v=n(1616),p=d?"_s":"size",g=function(t,e){var n,r=h(e);if("F"!==r)return t._i[r];for(n=t._f;n;n=n.n)if(n.k==e)return n};t.exports={getConstructor:function(t,e,n,s){var f=t((function(t,r){u(t,f,e,"_i"),t._t=e,t._i=i(null),t._f=void 0,t._l=void 0,t[p]=0,null!=r&&c(r,n,t[s],t)}));return a(f.prototype,{clear:function(){for(var t=v(this,e),n=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];t._f=t._l=void 0,t[p]=0},delete:function(t){var n=v(this,e),r=g(n,t);if(r){var i=r.n,a=r.p;delete n._i[r.i],r.r=!0,a&&(a.n=i),i&&(i.p=a),n._f==r&&(n._f=i),n._l==r&&(n._l=a),n[p]--}return!!r},forEach:function(t){v(this,e);for(var n,r=o(t,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(t){return!!g(v(this,e),t)}}),d&&r(f.prototype,"size",{get:function(){return v(this,e)[p]}}),f},def:function(t,e,n){var r,i,a=g(t,e);return a?a.v=n:(t._l=a={i:i=h(e,!0),k:e,v:n,p:r=t._l,n:void 0,r:!1},t._f||(t._f=a),r&&(r.n=a),t[p]++,"F"!==i&&(t._i[i]=a)),t},getEntry:g,setStrong:function(t,e,n){s(t,e,(function(t,n){this._t=v(t,e),this._k=n,this._l=void 0}),(function(){for(var t=this,e=t._k,n=t._l;n&&n.r;)n=n.p;return t._t&&(t._l=n=n?n.n:t._t._f)?f(0,"keys"==e?n.k:"values"==e?n.v:[n.k,n.v]):(t._t=void 0,f(1))}),n?"entries":"values",!n,!0),l(e)}}},6132:(t,e,n)=>{var r=n(1488),i=n(9490);t.exports=function(t){return function(){if(r(this)!=t)throw TypeError(t+"#toJSON isn't generic");return i(this)}}},3657:(t,e,n)=>{"use strict";var r=n(4408),i=n(4728).getWeak,a=n(7007),o=n(5286),u=n(3328),c=n(3531),s=n(50),f=n(9181),l=n(1616),d=s(5),h=s(6),v=0,p=function(t){return t._l||(t._l=new g)},g=function(){this.a=[]},m=function(t,e){return d(t.a,(function(t){return t[0]===e}))};g.prototype={get:function(t){var e=m(this,t);if(e)return e[1]},has:function(t){return!!m(this,t)},set:function(t,e){var n=m(this,t);n?n[1]=e:this.a.push([t,e])},delete:function(t){var e=h(this.a,(function(e){return e[0]===t}));return~e&&this.a.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,n,a){var s=t((function(t,r){u(t,s,e,"_i"),t._t=e,t._i=v++,t._l=void 0,null!=r&&c(r,n,t[a],t)}));return r(s.prototype,{delete:function(t){if(!o(t))return!1;var n=i(t);return!0===n?p(l(this,e)).delete(t):n&&f(n,this._i)&&delete n[this._i]},has:function(t){if(!o(t))return!1;var n=i(t);return!0===n?p(l(this,e)).has(t):n&&f(n,this._i)}}),s},def:function(t,e,n){var r=i(a(e),!0);return!0===r?p(t).set(e,n):r[t._i]=n,t},ufstore:p}},5795:(t,e,n)=>{"use strict";var r=n(3816),i=n(2985),a=n(7234),o=n(4408),u=n(4728),c=n(3531),s=n(3328),f=n(5286),l=n(4253),d=n(7462),h=n(2943),v=n(266);t.exports=function(t,e,n,p,g,m){var y=r[t],w=y,b=g?"set":"add",A=w&&w.prototype,x={},S=function(t){var e=A[t];a(A,t,"delete"==t||"has"==t?function(t){return!(m&&!f(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return m&&!f(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,n){return e.call(this,0===t?0:t,n),this})};if("function"==typeof w&&(m||A.forEach&&!l((function(){(new w).entries().next()})))){var M=new w,C=M[b](m?{}:-0,1)!=M,_=l((function(){M.has(1)})),T=d((function(t){new w(t)})),I=!m&&l((function(){for(var t=new w,e=5;e--;)t[b](e,e);return!t.has(-0)}));T||((w=e((function(e,n){s(e,w,t);var r=v(new y,e,w);return null!=n&&c(n,g,r[b],r),r}))).prototype=A,A.constructor=w),(_||I)&&(S("delete"),S("has"),g&&S("get")),(I||C)&&S(b),m&&A.clear&&delete A.clear}else w=p.getConstructor(e,t,g,b),o(w.prototype,n),u.NEED=!0;return h(w,t),x[t]=w,i(i.G+i.W+i.F*(w!=y),x),m||p.setStrong(w,t,g),w}},5645:t=>{var e=t.exports={version:"2.6.12"};"number"==typeof __e&&(__e=e)},2811:(t,e,n)=>{"use strict";var r=n(9275),i=n(681);t.exports=function(t,e,n){e in t?r.f(t,e,i(0,n)):t[e]=n}},741:(t,e,n)=>{var r=n(4963);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},3537:(t,e,n)=>{"use strict";var r=n(4253),i=Date.prototype.getTime,a=Date.prototype.toISOString,o=function(t){return t>9?t:"0"+t};t.exports=r((function(){return"0385-07-25T07:06:39.999Z"!=a.call(new Date(-50000000000001))}))||!r((function(){a.call(new Date(NaN))}))?function(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),n=t.getUTCMilliseconds(),r=e<0?"-":e>9999?"+":"";return r+("00000"+Math.abs(e)).slice(r?-6:-4)+"-"+o(t.getUTCMonth()+1)+"-"+o(t.getUTCDate())+"T"+o(t.getUTCHours())+":"+o(t.getUTCMinutes())+":"+o(t.getUTCSeconds())+"."+(n>99?n:"0"+o(n))+"Z"}:a},870:(t,e,n)=>{"use strict";var r=n(7007),i=n(1689),a="number";t.exports=function(t){if("string"!==t&&t!==a&&"default"!==t)throw TypeError("Incorrect hint");return i(r(this),t!=a)}},1355:t=>{t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},7057:(t,e,n)=>{t.exports=!n(4253)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},2457:(t,e,n)=>{var r=n(5286),i=n(3816).document,a=r(i)&&r(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},4430:t=>{t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},5541:(t,e,n)=>{var r=n(7184),i=n(4548),a=n(4682);t.exports=function(t){var e=r(t),n=i.f;if(n)for(var o,u=n(t),c=a.f,s=0;u.length>s;)c.call(t,o=u[s++])&&e.push(o);return e}},2985:(t,e,n)=>{var r=n(3816),i=n(5645),a=n(7728),o=n(7234),u=n(741),c=function(t,e,n){var s,f,l,d,h=t&c.F,v=t&c.G,p=t&c.S,g=t&c.P,m=t&c.B,y=v?r:p?r[e]||(r[e]={}):(r[e]||{}).prototype,w=v?i:i[e]||(i[e]={}),b=w.prototype||(w.prototype={});for(s in v&&(n=e),n)l=((f=!h&&y&&void 0!==y[s])?y:n)[s],d=m&&f?u(l,r):g&&"function"==typeof l?u(Function.call,l):l,y&&o(y,s,l,t&c.U),w[s]!=l&&a(w,s,d),g&&b[s]!=l&&(b[s]=l)};r.core=i,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},8852:(t,e,n)=>{var r=n(6314)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,!"/./"[t](e)}catch(t){}}return!0}},4253:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},8082:(t,e,n)=>{"use strict";n(8269);var r=n(7234),i=n(7728),a=n(4253),o=n(1355),u=n(6314),c=n(1165),s=u("species"),f=!a((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),l=function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n="ab".split(t);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();t.exports=function(t,e,n){var d=u(t),h=!a((function(){var e={};return e[d]=function(){return 7},7!=""[t](e)})),v=h?!a((function(){var e=!1,n=/a/;return n.exec=function(){return e=!0,null},"split"===t&&(n.constructor={},n.constructor[s]=function(){return n}),n[d](""),!e})):void 0;if(!h||!v||"replace"===t&&!f||"split"===t&&!l){var p=/./[d],g=n(o,d,""[t],(function(t,e,n,r,i){return e.exec===c?h&&!i?{done:!0,value:p.call(e,n,r)}:{done:!0,value:t.call(n,e,r)}:{done:!1}})),m=g[0],y=g[1];r(String.prototype,t,m),i(RegExp.prototype,d,2==e?function(t,e){return y.call(t,this,e)}:function(t){return y.call(t,this)})}}},3218:(t,e,n)=>{"use strict";var r=n(7007);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},3325:(t,e,n)=>{"use strict";var r=n(4302),i=n(5286),a=n(875),o=n(741),u=n(6314)("isConcatSpreadable");t.exports=function t(e,n,c,s,f,l,d,h){for(var v,p,g=f,m=0,y=!!d&&o(d,h,3);m<s;){if(m in c){if(v=y?y(c[m],m,n):c[m],p=!1,i(v)&&(p=void 0!==(p=v[u])?!!p:r(v)),p&&l>0)g=t(e,n,v,a(v.length),g,l-1)-1;else{if(g>=9007199254740991)throw TypeError();e[g]=v}g++}m++}return g}},3531:(t,e,n)=>{var r=n(741),i=n(8851),a=n(6555),o=n(7007),u=n(875),c=n(9002),s={},f={},l=t.exports=function(t,e,n,l,d){var h,v,p,g,m=d?function(){return t}:c(t),y=r(n,l,e?2:1),w=0;if("function"!=typeof m)throw TypeError(t+" is not iterable!");if(a(m)){for(h=u(t.length);h>w;w++)if((g=e?y(o(v=t[w])[0],v[1]):y(t[w]))===s||g===f)return g}else for(p=m.call(t);!(v=p.next()).done;)if((g=i(p,y,v.value,e))===s||g===f)return g};l.BREAK=s,l.RETURN=f},18:(t,e,n)=>{t.exports=n(3825)("native-function-to-string",Function.toString)},3816:t=>{var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},9181:t=>{var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},7728:(t,e,n)=>{var r=n(9275),i=n(681);t.exports=n(7057)?function(t,e,n){return r.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},639:(t,e,n)=>{var r=n(3816).document;t.exports=r&&r.documentElement},1734:(t,e,n)=>{t.exports=!n(7057)&&!n(4253)((function(){return 7!=Object.defineProperty(n(2457)("div"),"a",{get:function(){return 7}}).a}))},266:(t,e,n)=>{var r=n(5286),i=n(7375).set;t.exports=function(t,e,n){var a,o=e.constructor;return o!==n&&"function"==typeof o&&(a=o.prototype)!==n.prototype&&r(a)&&i&&i(t,a),t}},7242:t=>{t.exports=function(t,e,n){var r=void 0===n;switch(e.length){case 0:return r?t():t.call(n);case 1:return r?t(e[0]):t.call(n,e[0]);case 2:return r?t(e[0],e[1]):t.call(n,e[0],e[1]);case 3:return r?t(e[0],e[1],e[2]):t.call(n,e[0],e[1],e[2]);case 4:return r?t(e[0],e[1],e[2],e[3]):t.call(n,e[0],e[1],e[2],e[3])}return t.apply(n,e)}},9797:(t,e,n)=>{var r=n(2032);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},6555:(t,e,n)=>{var r=n(2803),i=n(6314)("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||a[i]===t)}},4302:(t,e,n)=>{var r=n(2032);t.exports=Array.isArray||function(t){return"Array"==r(t)}},8367:(t,e,n)=>{var r=n(5286),i=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&i(t)===t}},5286:t=>{t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},5364:(t,e,n)=>{var r=n(5286),i=n(2032),a=n(6314)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[a])?!!e:"RegExp"==i(t))}},8851:(t,e,n)=>{var r=n(7007);t.exports=function(t,e,n,i){try{return i?e(r(n)[0],n[1]):e(n)}catch(e){var a=t.return;throw void 0!==a&&r(a.call(t)),e}}},9988:(t,e,n)=>{"use strict";var r=n(2503),i=n(681),a=n(2943),o={};n(7728)(o,n(6314)("iterator"),(function(){return this})),t.exports=function(t,e,n){t.prototype=r(o,{next:i(1,n)}),a(t,e+" Iterator")}},2923:(t,e,n)=>{"use strict";var r=n(4461),i=n(2985),a=n(7234),o=n(7728),u=n(2803),c=n(9988),s=n(2943),f=n(468),l=n(6314)("iterator"),d=!([].keys&&"next"in[].keys()),h="keys",v="values",p=function(){return this};t.exports=function(t,e,n,g,m,y,w){c(n,e,g);var b,A,x,S=function(t){if(!d&&t in T)return T[t];switch(t){case h:case v:return function(){return new n(this,t)}}return function(){return new n(this,t)}},M=e+" Iterator",C=m==v,_=!1,T=t.prototype,I=T[l]||T["@@iterator"]||m&&T[m],P=I||S(m),E=m?C?S("entries"):P:void 0,k="Array"==e&&T.entries||I;if(k&&(x=f(k.call(new t)))!==Object.prototype&&x.next&&(s(x,M,!0),r||"function"==typeof x[l]||o(x,l,p)),C&&I&&I.name!==v&&(_=!0,P=function(){return I.call(this)}),r&&!w||!d&&!_&&T[l]||o(T,l,P),u[e]=P,u[M]=p,m)if(b={values:C?P:S(v),keys:y?P:S(h),entries:E},w)for(A in b)A in T||a(T,A,b[A]);else i(i.P+i.F*(d||_),e,b);return b}},7462:(t,e,n)=>{var r=n(6314)("iterator"),i=!1;try{var a=[7][r]();a.return=function(){i=!0},Array.from(a,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var a=[7],o=a[r]();o.next=function(){return{done:n=!0}},a[r]=function(){return o},t(a)}catch(t){}return n}},5436:t=>{t.exports=function(t,e){return{value:e,done:!!t}}},2803:t=>{t.exports={}},4461:t=>{t.exports=!1},3086:t=>{var e=Math.expm1;t.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:e},4934:(t,e,n)=>{var r=n(1801),i=Math.pow,a=i(2,-52),o=i(2,-23),u=i(2,127)*(2-o),c=i(2,-126);t.exports=Math.fround||function(t){var e,n,i=Math.abs(t),s=r(t);return i<c?s*(i/c/o+1/a-1/a)*c*o:(n=(e=(1+o/a)*i)-(e-i))>u||n!=n?s*(1/0):s*n}},6206:t=>{t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},8757:t=>{t.exports=Math.scale||function(t,e,n,r,i){return 0===arguments.length||t!=t||e!=e||n!=n||r!=r||i!=i?NaN:t===1/0||t===-1/0?t:(t-e)*(i-r)/(n-e)+r}},1801:t=>{t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},4728:(t,e,n)=>{var r=n(3953)("meta"),i=n(5286),a=n(9181),o=n(9275).f,u=0,c=Object.isExtensible||function(){return!0},s=!n(4253)((function(){return c(Object.preventExtensions({}))})),f=function(t){o(t,r,{value:{i:"O"+ ++u,w:{}}})},l=t.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!a(t,r)){if(!c(t))return"F";if(!e)return"E";f(t)}return t[r].i},getWeak:function(t,e){if(!a(t,r)){if(!c(t))return!0;if(!e)return!1;f(t)}return t[r].w},onFreeze:function(t){return s&&l.NEED&&c(t)&&!a(t,r)&&f(t),t}}},133:(t,e,n)=>{var r=n(8416),i=n(2985),a=n(3825)("metadata"),o=a.store||(a.store=new(n(147))),u=function(t,e,n){var i=o.get(t);if(!i){if(!n)return;o.set(t,i=new r)}var a=i.get(e);if(!a){if(!n)return;i.set(e,a=new r)}return a};t.exports={store:o,map:u,has:function(t,e,n){var r=u(e,n,!1);return void 0!==r&&r.has(t)},get:function(t,e,n){var r=u(e,n,!1);return void 0===r?void 0:r.get(t)},set:function(t,e,n,r){u(n,r,!0).set(t,e)},keys:function(t,e){var n=u(t,e,!1),r=[];return n&&n.forEach((function(t,e){r.push(e)})),r},key:function(t){return void 0===t||"symbol"==typeof t?t:String(t)},exp:function(t){i(i.S,"Reflect",t)}}},4351:(t,e,n)=>{var r=n(3816),i=n(4193).set,a=r.MutationObserver||r.WebKitMutationObserver,o=r.process,u=r.Promise,c="process"==n(2032)(o);t.exports=function(){var t,e,n,s=function(){var r,i;for(c&&(r=o.domain)&&r.exit();t;){i=t.fn,t=t.next;try{i()}catch(r){throw t?n():e=void 0,r}}e=void 0,r&&r.enter()};if(c)n=function(){o.nextTick(s)};else if(!a||r.navigator&&r.navigator.standalone)if(u&&u.resolve){var f=u.resolve(void 0);n=function(){f.then(s)}}else n=function(){i.call(r,s)};else{var l=!0,d=document.createTextNode("");new a(s).observe(d,{characterData:!0}),n=function(){d.data=l=!l}}return function(r){var i={fn:r,next:void 0};e&&(e.next=i),t||(t=i,n()),e=i}}},3499:(t,e,n)=>{"use strict";var r=n(4963);function i(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r})),this.resolve=r(e),this.reject=r(n)}t.exports.f=function(t){return new i(t)}},5345:(t,e,n)=>{"use strict";var r=n(7057),i=n(7184),a=n(4548),o=n(4682),u=n(508),c=n(9797),s=Object.assign;t.exports=!s||n(4253)((function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach((function(t){e[t]=t})),7!=s({},t)[n]||Object.keys(s({},e)).join("")!=r}))?function(t,e){for(var n=u(t),s=arguments.length,f=1,l=a.f,d=o.f;s>f;)for(var h,v=c(arguments[f++]),p=l?i(v).concat(l(v)):i(v),g=p.length,m=0;g>m;)h=p[m++],r&&!d.call(v,h)||(n[h]=v[h]);return n}:s},2503:(t,e,n)=>{var r=n(7007),i=n(5588),a=n(4430),o=n(9335)("IE_PROTO"),u=function(){},c=function(){var t,e=n(2457)("iframe"),r=a.length;for(e.style.display="none",n(639).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;r--;)delete c.prototype[a[r]];return c()};t.exports=Object.create||function(t,e){var n;return null!==t?(u.prototype=r(t),n=new u,u.prototype=null,n[o]=t):n=c(),void 0===e?n:i(n,e)}},9275:(t,e,n)=>{var r=n(7007),i=n(1734),a=n(1689),o=Object.defineProperty;e.f=n(7057)?Object.defineProperty:function(t,e,n){if(r(t),e=a(e,!0),r(n),i)try{return o(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},5588:(t,e,n)=>{var r=n(9275),i=n(7007),a=n(7184);t.exports=n(7057)?Object.defineProperties:function(t,e){i(t);for(var n,o=a(e),u=o.length,c=0;u>c;)r.f(t,n=o[c++],e[n]);return t}},1670:(t,e,n)=>{"use strict";t.exports=n(4461)||!n(4253)((function(){var t=Math.random();__defineSetter__.call(null,t,(function(){})),delete n(3816)[t]}))},8693:(t,e,n)=>{var r=n(4682),i=n(681),a=n(2110),o=n(1689),u=n(9181),c=n(1734),s=Object.getOwnPropertyDescriptor;e.f=n(7057)?s:function(t,e){if(t=a(t),e=o(e,!0),c)try{return s(t,e)}catch(t){}if(u(t,e))return i(!r.f.call(t,e),t[e])}},9327:(t,e,n)=>{var r=n(2110),i=n(616).f,a={}.toString,o="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return o&&"[object Window]"==a.call(t)?function(t){try{return i(t)}catch(t){return o.slice()}}(t):i(r(t))}},616:(t,e,n)=>{var r=n(189),i=n(4430).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},4548:(t,e)=>{e.f=Object.getOwnPropertySymbols},468:(t,e,n)=>{var r=n(9181),i=n(508),a=n(9335)("IE_PROTO"),o=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,a)?t[a]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?o:null}},189:(t,e,n)=>{var r=n(9181),i=n(2110),a=n(9315)(!1),o=n(9335)("IE_PROTO");t.exports=function(t,e){var n,u=i(t),c=0,s=[];for(n in u)n!=o&&r(u,n)&&s.push(n);for(;e.length>c;)r(u,n=e[c++])&&(~a(s,n)||s.push(n));return s}},7184:(t,e,n)=>{var r=n(189),i=n(4430);t.exports=Object.keys||function(t){return r(t,i)}},4682:(t,e)=>{e.f={}.propertyIsEnumerable},3160:(t,e,n)=>{var r=n(2985),i=n(5645),a=n(4253);t.exports=function(t,e){var n=(i.Object||{})[t]||Object[t],o={};o[t]=e(n),r(r.S+r.F*a((function(){n(1)})),"Object",o)}},1131:(t,e,n)=>{var r=n(7057),i=n(7184),a=n(2110),o=n(4682).f;t.exports=function(t){return function(e){for(var n,u=a(e),c=i(u),s=c.length,f=0,l=[];s>f;)n=c[f++],r&&!o.call(u,n)||l.push(t?[n,u[n]]:u[n]);return l}}},7643:(t,e,n)=>{var r=n(616),i=n(4548),a=n(7007),o=n(3816).Reflect;t.exports=o&&o.ownKeys||function(t){var e=r.f(a(t)),n=i.f;return n?e.concat(n(t)):e}},7743:(t,e,n)=>{var r=n(3816).parseFloat,i=n(9599).trim;t.exports=1/r(n(4644)+"-0")!=-1/0?function(t){var e=i(String(t),3),n=r(e);return 0===n&&"-"==e.charAt(0)?-0:n}:r},5960:(t,e,n)=>{var r=n(3816).parseInt,i=n(9599).trim,a=n(4644),o=/^[-+]?0[xX]/;t.exports=8!==r(a+"08")||22!==r(a+"0x16")?function(t,e){var n=i(String(t),3);return r(n,e>>>0||(o.test(n)?16:10))}:r},188:t=>{t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},94:(t,e,n)=>{var r=n(7007),i=n(5286),a=n(3499);t.exports=function(t,e){if(r(t),i(e)&&e.constructor===t)return e;var n=a.f(t);return(0,n.resolve)(e),n.promise}},681:t=>{t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},4408:(t,e,n)=>{var r=n(7234);t.exports=function(t,e,n){for(var i in e)r(t,i,e[i],n);return t}},7234:(t,e,n)=>{var r=n(3816),i=n(7728),a=n(9181),o=n(3953)("src"),u=n(18),c="toString",s=(""+u).split(c);n(5645).inspectSource=function(t){return u.call(t)},(t.exports=function(t,e,n,u){var c="function"==typeof n;c&&(a(n,"name")||i(n,"name",e)),t[e]!==n&&(c&&(a(n,o)||i(n,o,t[e]?""+t[e]:s.join(String(e)))),t===r?t[e]=n:u?t[e]?t[e]=n:i(t,e,n):(delete t[e],i(t,e,n)))})(Function.prototype,c,(function(){return"function"==typeof this&&this[o]||u.call(this)}))},7787:(t,e,n)=>{"use strict";var r=n(1488),i=RegExp.prototype.exec;t.exports=function(t,e){var n=t.exec;if("function"==typeof n){var a=n.call(t,e);if("object"!=typeof a)throw new TypeError("RegExp exec method returned something other than an Object or null");return a}if("RegExp"!==r(t))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(t,e)}},1165:(t,e,n)=>{"use strict";var r,i,a=n(3218),o=RegExp.prototype.exec,u=String.prototype.replace,c=o,s=(r=/a/,i=/b*/g,o.call(r,"a"),o.call(i,"a"),0!==r.lastIndex||0!==i.lastIndex),f=void 0!==/()??/.exec("")[1];(s||f)&&(c=function(t){var e,n,r,i,c=this;return f&&(n=new RegExp("^"+c.source+"$(?!\\s)",a.call(c))),s&&(e=c.lastIndex),r=o.call(c,t),s&&r&&(c.lastIndex=c.global?r.index+r[0].length:e),f&&r&&r.length>1&&u.call(r[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)})),r}),t.exports=c},5496:t=>{t.exports=function(t,e){var n=e===Object(e)?function(t){return e[t]}:e;return function(e){return String(e).replace(t,n)}}},7195:t=>{t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},1024:(t,e,n)=>{"use strict";var r=n(2985),i=n(4963),a=n(741),o=n(3531);t.exports=function(t){r(r.S,t,{from:function(t){var e,n,r,u,c=arguments[1];return i(this),(e=void 0!==c)&&i(c),null==t?new this:(n=[],e?(r=0,u=a(c,arguments[2],2),o(t,!1,(function(t){n.push(u(t,r++))}))):o(t,!1,n.push,n),new this(n))}})}},4881:(t,e,n)=>{"use strict";var r=n(2985);t.exports=function(t){r(r.S,t,{of:function(){for(var t=arguments.length,e=new Array(t);t--;)e[t]=arguments[t];return new this(e)}})}},7375:(t,e,n)=>{var r=n(5286),i=n(7007),a=function(t,e){if(i(t),!r(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,r){try{(r=n(741)(Function.call,n(8693).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,n){return a(t,n),e?t.__proto__=n:r(t,n),t}}({},!1):void 0),check:a}},2974:(t,e,n)=>{"use strict";var r=n(3816),i=n(9275),a=n(7057),o=n(6314)("species");t.exports=function(t){var e=r[t];a&&e&&!e[o]&&i.f(e,o,{configurable:!0,get:function(){return this}})}},2943:(t,e,n)=>{var r=n(9275).f,i=n(9181),a=n(6314)("toStringTag");t.exports=function(t,e,n){t&&!i(t=n?t:t.prototype,a)&&r(t,a,{configurable:!0,value:e})}},9335:(t,e,n)=>{var r=n(3825)("keys"),i=n(3953);t.exports=function(t){return r[t]||(r[t]=i(t))}},3825:(t,e,n)=>{var r=n(5645),i=n(3816),a="__core-js_shared__",o=i[a]||(i[a]={});(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:n(4461)?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},8364:(t,e,n)=>{var r=n(7007),i=n(4963),a=n(6314)("species");t.exports=function(t,e){var n,o=r(t).constructor;return void 0===o||null==(n=r(o)[a])?e:i(n)}},7717:(t,e,n)=>{"use strict";var r=n(4253);t.exports=function(t,e){return!!t&&r((function(){e?t.call(null,(function(){}),1):t.call(null)}))}},4496:(t,e,n)=>{var r=n(1467),i=n(1355);t.exports=function(t){return function(e,n){var a,o,u=String(i(e)),c=r(n),s=u.length;return c<0||c>=s?t?"":void 0:(a=u.charCodeAt(c))<55296||a>56319||c+1===s||(o=u.charCodeAt(c+1))<56320||o>57343?t?u.charAt(c):a:t?u.slice(c,c+2):o-56320+(a-55296<<10)+65536}}},2094:(t,e,n)=>{var r=n(5364),i=n(1355);t.exports=function(t,e,n){if(r(e))throw TypeError("String#"+n+" doesn't accept regex!");return String(i(t))}},9395:(t,e,n)=>{var r=n(2985),i=n(4253),a=n(1355),o=/"/g,u=function(t,e,n,r){var i=String(a(t)),u="<"+e;return""!==n&&(u+=" "+n+'="'+String(r).replace(o,"&quot;")+'"'),u+">"+i+"</"+e+">"};t.exports=function(t,e){var n={};n[t]=e(u),r(r.P+r.F*i((function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3})),"String",n)}},5442:(t,e,n)=>{var r=n(875),i=n(8595),a=n(1355);t.exports=function(t,e,n,o){var u=String(a(t)),c=u.length,s=void 0===n?" ":String(n),f=r(e);if(f<=c||""==s)return u;var l=f-c,d=i.call(s,Math.ceil(l/s.length));return d.length>l&&(d=d.slice(0,l)),o?d+u:u+d}},8595:(t,e,n)=>{"use strict";var r=n(1467),i=n(1355);t.exports=function(t){var e=String(i(this)),n="",a=r(t);if(a<0||a==1/0)throw RangeError("Count can't be negative");for(;a>0;(a>>>=1)&&(e+=e))1&a&&(n+=e);return n}},9599:(t,e,n)=>{var r=n(2985),i=n(1355),a=n(4253),o=n(4644),u="["+o+"]",c=RegExp("^"+u+u+"*"),s=RegExp(u+u+"*$"),f=function(t,e,n){var i={},u=a((function(){return!!o[t]()||"​"!="​"[t]()})),c=i[t]=u?e(l):o[t];n&&(i[n]=c),r(r.P+r.F*u,"String",i)},l=f.trim=function(t,e){return t=String(i(t)),1&e&&(t=t.replace(c,"")),2&e&&(t=t.replace(s,"")),t};t.exports=f},4644:t=>{t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},4193:(t,e,n)=>{var r,i,a,o=n(741),u=n(7242),c=n(639),s=n(2457),f=n(3816),l=f.process,d=f.setImmediate,h=f.clearImmediate,v=f.MessageChannel,p=f.Dispatch,g=0,m={},y=function(){var t=+this;if(m.hasOwnProperty(t)){var e=m[t];delete m[t],e()}},w=function(t){y.call(t.data)};d&&h||(d=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return m[++g]=function(){u("function"==typeof t?t:Function(t),e)},r(g),g},h=function(t){delete m[t]},"process"==n(2032)(l)?r=function(t){l.nextTick(o(y,t,1))}:p&&p.now?r=function(t){p.now(o(y,t,1))}:v?(a=(i=new v).port2,i.port1.onmessage=w,r=o(a.postMessage,a,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(r=function(t){f.postMessage(t+"","*")},f.addEventListener("message",w,!1)):r="onreadystatechange"in s("script")?function(t){c.appendChild(s("script")).onreadystatechange=function(){c.removeChild(this),y.call(t)}}:function(t){setTimeout(o(y,t,1),0)}),t.exports={set:d,clear:h}},2337:(t,e,n)=>{var r=n(1467),i=Math.max,a=Math.min;t.exports=function(t,e){return(t=r(t))<0?i(t+e,0):a(t,e)}},4843:(t,e,n)=>{var r=n(1467),i=n(875);t.exports=function(t){if(void 0===t)return 0;var e=r(t),n=i(e);if(e!==n)throw RangeError("Wrong length!");return n}},1467:t=>{var e=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:e)(t)}},2110:(t,e,n)=>{var r=n(9797),i=n(1355);t.exports=function(t){return r(i(t))}},875:(t,e,n)=>{var r=n(1467),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},508:(t,e,n)=>{var r=n(1355);t.exports=function(t){return Object(r(t))}},1689:(t,e,n)=>{var r=n(5286);t.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},8440:(t,e,n)=>{"use strict";if(n(7057)){var r=n(4461),i=n(3816),a=n(4253),o=n(2985),u=n(9383),c=n(1125),s=n(741),f=n(3328),l=n(681),d=n(7728),h=n(4408),v=n(1467),p=n(875),g=n(4843),m=n(2337),y=n(1689),w=n(9181),b=n(1488),A=n(5286),x=n(508),S=n(6555),M=n(2503),C=n(468),_=n(616).f,T=n(9002),I=n(3953),P=n(6314),E=n(50),k=n(9315),O=n(8364),D=n(6997),B=n(2803),j=n(7462),N=n(2974),F=n(6852),U=n(5216),Y=n(9275),W=n(8693),L=Y.f,R=W.f,z=i.RangeError,q=i.TypeError,H=i.Uint8Array,G="ArrayBuffer",Z="SharedArrayBuffer",X="BYTES_PER_ELEMENT",V=Array.prototype,Q=c.ArrayBuffer,$=c.DataView,J=E(0),K=E(2),tt=E(3),et=E(4),nt=E(5),rt=E(6),it=k(!0),at=k(!1),ot=D.values,ut=D.keys,ct=D.entries,st=V.lastIndexOf,ft=V.reduce,lt=V.reduceRight,dt=V.join,ht=V.sort,vt=V.slice,pt=V.toString,gt=V.toLocaleString,mt=P("iterator"),yt=P("toStringTag"),wt=I("typed_constructor"),bt=I("def_constructor"),At=u.CONSTR,xt=u.TYPED,St=u.VIEW,Mt="Wrong length!",Ct=E(1,(function(t,e){return Et(O(t,t[bt]),e)})),_t=a((function(){return 1===new H(new Uint16Array([1]).buffer)[0]})),Tt=!!H&&!!H.prototype.set&&a((function(){new H(1).set({})})),It=function(t,e){var n=v(t);if(n<0||n%e)throw z("Wrong offset!");return n},Pt=function(t){if(A(t)&&xt in t)return t;throw q(t+" is not a typed array!")},Et=function(t,e){if(!A(t)||!(wt in t))throw q("It is not a typed array constructor!");return new t(e)},kt=function(t,e){return Ot(O(t,t[bt]),e)},Ot=function(t,e){for(var n=0,r=e.length,i=Et(t,r);r>n;)i[n]=e[n++];return i},Dt=function(t,e,n){L(t,e,{get:function(){return this._d[n]}})},Bt=function(t){var e,n,r,i,a,o,u=x(t),c=arguments.length,f=c>1?arguments[1]:void 0,l=void 0!==f,d=T(u);if(null!=d&&!S(d)){for(o=d.call(u),r=[],e=0;!(a=o.next()).done;e++)r.push(a.value);u=r}for(l&&c>2&&(f=s(f,arguments[2],2)),e=0,n=p(u.length),i=Et(this,n);n>e;e++)i[e]=l?f(u[e],e):u[e];return i},jt=function(){for(var t=0,e=arguments.length,n=Et(this,e);e>t;)n[t]=arguments[t++];return n},Nt=!!H&&a((function(){gt.call(new H(1))})),Ft=function(){return gt.apply(Nt?vt.call(Pt(this)):Pt(this),arguments)},Ut={copyWithin:function(t,e){return U.call(Pt(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return et(Pt(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return F.apply(Pt(this),arguments)},filter:function(t){return kt(this,K(Pt(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return nt(Pt(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return rt(Pt(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){J(Pt(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return at(Pt(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return it(Pt(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return dt.apply(Pt(this),arguments)},lastIndexOf:function(t){return st.apply(Pt(this),arguments)},map:function(t){return Ct(Pt(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return ft.apply(Pt(this),arguments)},reduceRight:function(t){return lt.apply(Pt(this),arguments)},reverse:function(){for(var t,e=this,n=Pt(e).length,r=Math.floor(n/2),i=0;i<r;)t=e[i],e[i++]=e[--n],e[n]=t;return e},some:function(t){return tt(Pt(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ht.call(Pt(this),t)},subarray:function(t,e){var n=Pt(this),r=n.length,i=m(t,r);return new(O(n,n[bt]))(n.buffer,n.byteOffset+i*n.BYTES_PER_ELEMENT,p((void 0===e?r:m(e,r))-i))}},Yt=function(t,e){return kt(this,vt.call(Pt(this),t,e))},Wt=function(t){Pt(this);var e=It(arguments[1],1),n=this.length,r=x(t),i=p(r.length),a=0;if(i+e>n)throw z(Mt);for(;a<i;)this[e+a]=r[a++]},Lt={entries:function(){return ct.call(Pt(this))},keys:function(){return ut.call(Pt(this))},values:function(){return ot.call(Pt(this))}},Rt=function(t,e){return A(t)&&t[xt]&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},zt=function(t,e){return Rt(t,e=y(e,!0))?l(2,t[e]):R(t,e)},qt=function(t,e,n){return!(Rt(t,e=y(e,!0))&&A(n)&&w(n,"value"))||w(n,"get")||w(n,"set")||n.configurable||w(n,"writable")&&!n.writable||w(n,"enumerable")&&!n.enumerable?L(t,e,n):(t[e]=n.value,t)};At||(W.f=zt,Y.f=qt),o(o.S+o.F*!At,"Object",{getOwnPropertyDescriptor:zt,defineProperty:qt}),a((function(){pt.call({})}))&&(pt=gt=function(){return dt.call(this)});var Ht=h({},Ut);h(Ht,Lt),d(Ht,mt,Lt.values),h(Ht,{slice:Yt,set:Wt,constructor:function(){},toString:pt,toLocaleString:Ft}),Dt(Ht,"buffer","b"),Dt(Ht,"byteOffset","o"),Dt(Ht,"byteLength","l"),Dt(Ht,"length","e"),L(Ht,yt,{get:function(){return this[xt]}}),t.exports=function(t,e,n,c){var s=t+((c=!!c)?"Clamped":"")+"Array",l="get"+t,h="set"+t,v=i[s],m=v||{},y=v&&C(v),w=!v||!u.ABV,x={},S=v&&v.prototype,T=function(t,n){L(t,n,{get:function(){return function(t,n){var r=t._d;return r.v[l](n*e+r.o,_t)}(this,n)},set:function(t){return function(t,n,r){var i=t._d;c&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),i.v[h](n*e+i.o,r,_t)}(this,n,t)},enumerable:!0})};w?(v=n((function(t,n,r,i){f(t,v,s,"_d");var a,o,u,c,l=0,h=0;if(A(n)){if(!(n instanceof Q||(c=b(n))==G||c==Z))return xt in n?Ot(v,n):Bt.call(v,n);a=n,h=It(r,e);var m=n.byteLength;if(void 0===i){if(m%e)throw z(Mt);if((o=m-h)<0)throw z(Mt)}else if((o=p(i)*e)+h>m)throw z(Mt);u=o/e}else u=g(n),a=new Q(o=u*e);for(d(t,"_d",{b:a,o:h,l:o,e:u,v:new $(a)});l<u;)T(t,l++)})),S=v.prototype=M(Ht),d(S,"constructor",v)):a((function(){v(1)}))&&a((function(){new v(-1)}))&&j((function(t){new v,new v(null),new v(1.5),new v(t)}),!0)||(v=n((function(t,n,r,i){var a;return f(t,v,s),A(n)?n instanceof Q||(a=b(n))==G||a==Z?void 0!==i?new m(n,It(r,e),i):void 0!==r?new m(n,It(r,e)):new m(n):xt in n?Ot(v,n):Bt.call(v,n):new m(g(n))})),J(y!==Function.prototype?_(m).concat(_(y)):_(m),(function(t){t in v||d(v,t,m[t])})),v.prototype=S,r||(S.constructor=v));var I=S[mt],P=!!I&&("values"==I.name||null==I.name),E=Lt.values;d(v,wt,!0),d(S,xt,s),d(S,St,!0),d(S,bt,v),(c?new v(1)[yt]==s:yt in S)||L(S,yt,{get:function(){return s}}),x[s]=v,o(o.G+o.W+o.F*(v!=m),x),o(o.S,s,{BYTES_PER_ELEMENT:e}),o(o.S+o.F*a((function(){m.of.call(v,1)})),s,{from:Bt,of:jt}),X in S||d(S,X,e),o(o.P,s,Ut),N(s),o(o.P+o.F*Tt,s,{set:Wt}),o(o.P+o.F*!P,s,Lt),r||S.toString==pt||(S.toString=pt),o(o.P+o.F*a((function(){new v(1).slice()})),s,{slice:Yt}),o(o.P+o.F*(a((function(){return[1,2].toLocaleString()!=new v([1,2]).toLocaleString()}))||!a((function(){S.toLocaleString.call([1,2])}))),s,{toLocaleString:Ft}),B[s]=P?I:E,r||P||d(S,mt,E)}}else t.exports=function(){}},1125:(t,e,n)=>{"use strict";var r=n(3816),i=n(7057),a=n(4461),o=n(9383),u=n(7728),c=n(4408),s=n(4253),f=n(3328),l=n(1467),d=n(875),h=n(4843),v=n(616).f,p=n(9275).f,g=n(6852),m=n(2943),y="ArrayBuffer",w="DataView",b="Wrong index!",A=r.ArrayBuffer,x=r.DataView,S=r.Math,M=r.RangeError,C=r.Infinity,_=A,T=S.abs,I=S.pow,P=S.floor,E=S.log,k=S.LN2,O="buffer",D="byteLength",B="byteOffset",j=i?"_b":O,N=i?"_l":D,F=i?"_o":B;function U(t,e,n){var r,i,a,o=new Array(n),u=8*n-e-1,c=(1<<u)-1,s=c>>1,f=23===e?I(2,-24)-I(2,-77):0,l=0,d=t<0||0===t&&1/t<0?1:0;for((t=T(t))!=t||t===C?(i=t!=t?1:0,r=c):(r=P(E(t)/k),t*(a=I(2,-r))<1&&(r--,a*=2),(t+=r+s>=1?f/a:f*I(2,1-s))*a>=2&&(r++,a/=2),r+s>=c?(i=0,r=c):r+s>=1?(i=(t*a-1)*I(2,e),r+=s):(i=t*I(2,s-1)*I(2,e),r=0));e>=8;o[l++]=255&i,i/=256,e-=8);for(r=r<<e|i,u+=e;u>0;o[l++]=255&r,r/=256,u-=8);return o[--l]|=128*d,o}function Y(t,e,n){var r,i=8*n-e-1,a=(1<<i)-1,o=a>>1,u=i-7,c=n-1,s=t[c--],f=127&s;for(s>>=7;u>0;f=256*f+t[c],c--,u-=8);for(r=f&(1<<-u)-1,f>>=-u,u+=e;u>0;r=256*r+t[c],c--,u-=8);if(0===f)f=1-o;else{if(f===a)return r?NaN:s?-C:C;r+=I(2,e),f-=o}return(s?-1:1)*r*I(2,f-e)}function W(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function L(t){return[255&t]}function R(t){return[255&t,t>>8&255]}function z(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function q(t){return U(t,52,8)}function H(t){return U(t,23,4)}function G(t,e,n){p(t.prototype,e,{get:function(){return this[n]}})}function Z(t,e,n,r){var i=h(+n);if(i+e>t[N])throw M(b);var a=t[j]._b,o=i+t[F],u=a.slice(o,o+e);return r?u:u.reverse()}function X(t,e,n,r,i,a){var o=h(+n);if(o+e>t[N])throw M(b);for(var u=t[j]._b,c=o+t[F],s=r(+i),f=0;f<e;f++)u[c+f]=s[a?f:e-f-1]}if(o.ABV){if(!s((function(){A(1)}))||!s((function(){new A(-1)}))||s((function(){return new A,new A(1.5),new A(NaN),A.name!=y}))){for(var V,Q=(A=function(t){return f(this,A),new _(h(t))}).prototype=_.prototype,$=v(_),J=0;$.length>J;)(V=$[J++])in A||u(A,V,_[V]);a||(Q.constructor=A)}var K=new x(new A(2)),tt=x.prototype.setInt8;K.setInt8(0,2147483648),K.setInt8(1,2147483649),!K.getInt8(0)&&K.getInt8(1)||c(x.prototype,{setInt8:function(t,e){tt.call(this,t,e<<24>>24)},setUint8:function(t,e){tt.call(this,t,e<<24>>24)}},!0)}else A=function(t){f(this,A,y);var e=h(t);this._b=g.call(new Array(e),0),this[N]=e},x=function(t,e,n){f(this,x,w),f(t,A,w);var r=t[N],i=l(e);if(i<0||i>r)throw M("Wrong offset!");if(i+(n=void 0===n?r-i:d(n))>r)throw M("Wrong length!");this[j]=t,this[F]=i,this[N]=n},i&&(G(A,D,"_l"),G(x,O,"_b"),G(x,D,"_l"),G(x,B,"_o")),c(x.prototype,{getInt8:function(t){return Z(this,1,t)[0]<<24>>24},getUint8:function(t){return Z(this,1,t)[0]},getInt16:function(t){var e=Z(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=Z(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return W(Z(this,4,t,arguments[1]))},getUint32:function(t){return W(Z(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return Y(Z(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return Y(Z(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){X(this,1,t,L,e)},setUint8:function(t,e){X(this,1,t,L,e)},setInt16:function(t,e){X(this,2,t,R,e,arguments[2])},setUint16:function(t,e){X(this,2,t,R,e,arguments[2])},setInt32:function(t,e){X(this,4,t,z,e,arguments[2])},setUint32:function(t,e){X(this,4,t,z,e,arguments[2])},setFloat32:function(t,e){X(this,4,t,H,e,arguments[2])},setFloat64:function(t,e){X(this,8,t,q,e,arguments[2])}});m(A,y),m(x,w),u(x.prototype,o.VIEW,!0),e.ArrayBuffer=A,e.DataView=x},9383:(t,e,n)=>{for(var r,i=n(3816),a=n(7728),o=n(3953),u=o("typed_array"),c=o("view"),s=!(!i.ArrayBuffer||!i.DataView),f=s,l=0,d="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(r=i[d[l++]])?(a(r.prototype,u,!0),a(r.prototype,c,!0)):f=!1;t.exports={ABV:s,CONSTR:f,TYPED:u,VIEW:c}},3953:t=>{var e=0,n=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+n).toString(36))}},575:(t,e,n)=>{var r=n(3816).navigator;t.exports=r&&r.userAgent||""},1616:(t,e,n)=>{var r=n(5286);t.exports=function(t,e){if(!r(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},6074:(t,e,n)=>{var r=n(3816),i=n(5645),a=n(4461),o=n(8787),u=n(9275).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=a?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||u(e,t,{value:o.f(t)})}},8787:(t,e,n)=>{e.f=n(6314)},6314:(t,e,n)=>{var r=n(3825)("wks"),i=n(3953),a=n(3816).Symbol,o="function"==typeof a;(t.exports=function(t){return r[t]||(r[t]=o&&a[t]||(o?a:i)("Symbol."+t))}).store=r},9002:(t,e,n)=>{var r=n(1488),i=n(6314)("iterator"),a=n(2803);t.exports=n(5645).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||a[r(t)]}},1761:(t,e,n)=>{var r=n(2985),i=n(5496)(/[\\^$*+?.()|[\]{}]/g,"\\$&");r(r.S,"RegExp",{escape:function(t){return i(t)}})},2e3:(t,e,n)=>{var r=n(2985);r(r.P,"Array",{copyWithin:n(5216)}),n(7722)("copyWithin")},5745:(t,e,n)=>{"use strict";var r=n(2985),i=n(50)(4);r(r.P+r.F*!n(7717)([].every,!0),"Array",{every:function(t){return i(this,t,arguments[1])}})},8977:(t,e,n)=>{var r=n(2985);r(r.P,"Array",{fill:n(6852)}),n(7722)("fill")},8837:(t,e,n)=>{"use strict";var r=n(2985),i=n(50)(2);r(r.P+r.F*!n(7717)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},4899:(t,e,n)=>{"use strict";var r=n(2985),i=n(50)(6),a="findIndex",o=!0;a in[]&&Array(1)[a]((function(){o=!1})),r(r.P+r.F*o,"Array",{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),n(7722)(a)},2310:(t,e,n)=>{"use strict";var r=n(2985),i=n(50)(5),a="find",o=!0;a in[]&&Array(1).find((function(){o=!1})),r(r.P+r.F*o,"Array",{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),n(7722)(a)},4336:(t,e,n)=>{"use strict";var r=n(2985),i=n(50)(0),a=n(7717)([].forEach,!0);r(r.P+r.F*!a,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},522:(t,e,n)=>{"use strict";var r=n(741),i=n(2985),a=n(508),o=n(8851),u=n(6555),c=n(875),s=n(2811),f=n(9002);i(i.S+i.F*!n(7462)((function(t){Array.from(t)})),"Array",{from:function(t){var e,n,i,l,d=a(t),h="function"==typeof this?this:Array,v=arguments.length,p=v>1?arguments[1]:void 0,g=void 0!==p,m=0,y=f(d);if(g&&(p=r(p,v>2?arguments[2]:void 0,2)),null==y||h==Array&&u(y))for(n=new h(e=c(d.length));e>m;m++)s(n,m,g?p(d[m],m):d[m]);else for(l=y.call(d),n=new h;!(i=l.next()).done;m++)s(n,m,g?o(l,p,[i.value,m],!0):i.value);return n.length=m,n}})},3369:(t,e,n)=>{"use strict";var r=n(2985),i=n(9315)(!1),a=[].indexOf,o=!!a&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(o||!n(7717)(a)),"Array",{indexOf:function(t){return o?a.apply(this,arguments)||0:i(this,t,arguments[1])}})},774:(t,e,n)=>{var r=n(2985);r(r.S,"Array",{isArray:n(4302)})},6997:(t,e,n)=>{"use strict";var r=n(7722),i=n(5436),a=n(2803),o=n(2110);t.exports=n(2923)(Array,"Array",(function(t,e){this._t=o(t),this._i=0,this._k=e}),(function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])}),"values"),a.Arguments=a.Array,r("keys"),r("values"),r("entries")},7842:(t,e,n)=>{"use strict";var r=n(2985),i=n(2110),a=[].join;r(r.P+r.F*(n(9797)!=Object||!n(7717)(a)),"Array",{join:function(t){return a.call(i(this),void 0===t?",":t)}})},9564:(t,e,n)=>{"use strict";var r=n(2985),i=n(2110),a=n(1467),o=n(875),u=[].lastIndexOf,c=!!u&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(c||!n(7717)(u)),"Array",{lastIndexOf:function(t){if(c)return u.apply(this,arguments)||0;var e=i(this),n=o(e.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,a(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in e&&e[r]===t)return r||0;return-1}})},1802:(t,e,n)=>{"use strict";var r=n(2985),i=n(50)(1);r(r.P+r.F*!n(7717)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},8295:(t,e,n)=>{"use strict";var r=n(2985),i=n(2811);r(r.S+r.F*n(4253)((function(){function t(){}return!(Array.of.call(t)instanceof t)})),"Array",{of:function(){for(var t=0,e=arguments.length,n=new("function"==typeof this?this:Array)(e);e>t;)i(n,t,arguments[t++]);return n.length=e,n}})},3750:(t,e,n)=>{"use strict";var r=n(2985),i=n(7628);r(r.P+r.F*!n(7717)([].reduceRight,!0),"Array",{reduceRight:function(t){return i(this,t,arguments.length,arguments[1],!0)}})},3057:(t,e,n)=>{"use strict";var r=n(2985),i=n(7628);r(r.P+r.F*!n(7717)([].reduce,!0),"Array",{reduce:function(t){return i(this,t,arguments.length,arguments[1],!1)}})},110:(t,e,n)=>{"use strict";var r=n(2985),i=n(639),a=n(2032),o=n(2337),u=n(875),c=[].slice;r(r.P+r.F*n(4253)((function(){i&&c.call(i)})),"Array",{slice:function(t,e){var n=u(this.length),r=a(this);if(e=void 0===e?n:e,"Array"==r)return c.call(this,t,e);for(var i=o(t,n),s=o(e,n),f=u(s-i),l=new Array(f),d=0;d<f;d++)l[d]="String"==r?this.charAt(i+d):this[i+d];return l}})},6773:(t,e,n)=>{"use strict";var r=n(2985),i=n(50)(3);r(r.P+r.F*!n(7717)([].some,!0),"Array",{some:function(t){return i(this,t,arguments[1])}})},75:(t,e,n)=>{"use strict";var r=n(2985),i=n(4963),a=n(508),o=n(4253),u=[].sort,c=[1,2,3];r(r.P+r.F*(o((function(){c.sort(void 0)}))||!o((function(){c.sort(null)}))||!n(7717)(u)),"Array",{sort:function(t){return void 0===t?u.call(a(this)):u.call(a(this),i(t))}})},1842:(t,e,n)=>{n(2974)("Array")},1822:(t,e,n)=>{var r=n(2985);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},1031:(t,e,n)=>{var r=n(2985),i=n(3537);r(r.P+r.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},9977:(t,e,n)=>{"use strict";var r=n(2985),i=n(508),a=n(1689);r(r.P+r.F*n(4253)((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})})),"Date",{toJSON:function(t){var e=i(this),n=a(e);return"number"!=typeof n||isFinite(n)?e.toISOString():null}})},1560:(t,e,n)=>{var r=n(6314)("toPrimitive"),i=Date.prototype;r in i||n(7728)(i,r,n(870))},6331:(t,e,n)=>{var r=Date.prototype,i="Invalid Date",a=r.toString,o=r.getTime;new Date(NaN)+""!=i&&n(7234)(r,"toString",(function(){var t=o.call(this);return t==t?a.call(this):i}))},9730:(t,e,n)=>{var r=n(2985);r(r.P,"Function",{bind:n(4398)})},8377:(t,e,n)=>{"use strict";var r=n(5286),i=n(468),a=n(6314)("hasInstance"),o=Function.prototype;a in o||n(9275).f(o,a,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},6059:(t,e,n)=>{var r=n(9275).f,i=Function.prototype,a=/^\s*function ([^ (]*)/,o="name";o in i||n(7057)&&r(i,o,{configurable:!0,get:function(){try{return(""+this).match(a)[1]}catch(t){return""}}})},8416:(t,e,n)=>{"use strict";var r=n(9824),i=n(1616),a="Map";t.exports=n(5795)(a,(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{get:function(t){var e=r.getEntry(i(this,a),t);return e&&e.v},set:function(t,e){return r.def(i(this,a),0===t?0:t,e)}},r,!0)},6503:(t,e,n)=>{var r=n(2985),i=n(6206),a=Math.sqrt,o=Math.acosh;r(r.S+r.F*!(o&&710==Math.floor(o(Number.MAX_VALUE))&&o(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:i(t-1+a(t-1)*a(t+1))}})},6786:(t,e,n)=>{var r=n(2985),i=Math.asinh;r(r.S+r.F*!(i&&1/i(0)>0),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},932:(t,e,n)=>{var r=n(2985),i=Math.atanh;r(r.S+r.F*!(i&&1/i(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},7526:(t,e,n)=>{var r=n(2985),i=n(1801);r(r.S,"Math",{cbrt:function(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},1591:(t,e,n)=>{var r=n(2985);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},9073:(t,e,n)=>{var r=n(2985),i=Math.exp;r(r.S,"Math",{cosh:function(t){return(i(t=+t)+i(-t))/2}})},347:(t,e,n)=>{var r=n(2985),i=n(3086);r(r.S+r.F*(i!=Math.expm1),"Math",{expm1:i})},579:(t,e,n)=>{var r=n(2985);r(r.S,"Math",{fround:n(4934)})},4669:(t,e,n)=>{var r=n(2985),i=Math.abs;r(r.S,"Math",{hypot:function(t,e){for(var n,r,a=0,o=0,u=arguments.length,c=0;o<u;)c<(n=i(arguments[o++]))?(a=a*(r=c/n)*r+1,c=n):a+=n>0?(r=n/c)*r:n;return c===1/0?1/0:c*Math.sqrt(a)}})},7710:(t,e,n)=>{var r=n(2985),i=Math.imul;r(r.S+r.F*n(4253)((function(){return-5!=i(4294967295,5)||2!=i.length})),"Math",{imul:function(t,e){var n=65535,r=+t,i=+e,a=n&r,o=n&i;return 0|a*o+((n&r>>>16)*o+a*(n&i>>>16)<<16>>>0)}})},5789:(t,e,n)=>{var r=n(2985);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},3514:(t,e,n)=>{var r=n(2985);r(r.S,"Math",{log1p:n(6206)})},9978:(t,e,n)=>{var r=n(2985);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},8472:(t,e,n)=>{var r=n(2985);r(r.S,"Math",{sign:n(1801)})},6946:(t,e,n)=>{var r=n(2985),i=n(3086),a=Math.exp;r(r.S+r.F*n(4253)((function(){return-2e-17!=!Math.sinh(-2e-17)})),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(a(t-1)-a(-t-1))*(Math.E/2)}})},5068:(t,e,n)=>{var r=n(2985),i=n(3086),a=Math.exp;r(r.S,"Math",{tanh:function(t){var e=i(t=+t),n=i(-t);return e==1/0?1:n==1/0?-1:(e-n)/(a(t)+a(-t))}})},413:(t,e,n)=>{var r=n(2985);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},1246:(t,e,n)=>{"use strict";var r=n(3816),i=n(9181),a=n(2032),o=n(266),u=n(1689),c=n(4253),s=n(616).f,f=n(8693).f,l=n(9275).f,d=n(9599).trim,h="Number",v=r.Number,p=v,g=v.prototype,m=a(n(2503)(g))==h,y="trim"in String.prototype,w=function(t){var e=u(t,!1);if("string"==typeof e&&e.length>2){var n,r,i,a=(e=y?e.trim():d(e,3)).charCodeAt(0);if(43===a||45===a){if(88===(n=e.charCodeAt(2))||120===n)return NaN}else if(48===a){switch(e.charCodeAt(1)){case 66:case 98:r=2,i=49;break;case 79:case 111:r=8,i=55;break;default:return+e}for(var o,c=e.slice(2),s=0,f=c.length;s<f;s++)if((o=c.charCodeAt(s))<48||o>i)return NaN;return parseInt(c,r)}}return+e};if(!v(" 0o1")||!v("0b1")||v("+0x1")){v=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof v&&(m?c((function(){g.valueOf.call(n)})):a(n)!=h)?o(new p(w(e)),n,v):w(e)};for(var b,A=n(7057)?s(p):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),x=0;A.length>x;x++)i(p,b=A[x])&&!i(v,b)&&l(v,b,f(p,b));v.prototype=g,g.constructor=v,n(7234)(r,h,v)}},5972:(t,e,n)=>{var r=n(2985);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},3403:(t,e,n)=>{var r=n(2985),i=n(3816).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&i(t)}})},2516:(t,e,n)=>{var r=n(2985);r(r.S,"Number",{isInteger:n(8367)})},9371:(t,e,n)=>{var r=n(2985);r(r.S,"Number",{isNaN:function(t){return t!=t}})},6479:(t,e,n)=>{var r=n(2985),i=n(8367),a=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return i(t)&&a(t)<=9007199254740991}})},1736:(t,e,n)=>{var r=n(2985);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},1889:(t,e,n)=>{var r=n(2985);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},5177:(t,e,n)=>{var r=n(2985),i=n(7743);r(r.S+r.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},6943:(t,e,n)=>{var r=n(2985),i=n(5960);r(r.S+r.F*(Number.parseInt!=i),"Number",{parseInt:i})},726:(t,e,n)=>{"use strict";var r=n(2985),i=n(1467),a=n(3365),o=n(8595),u=1..toFixed,c=Math.floor,s=[0,0,0,0,0,0],f="Number.toFixed: incorrect invocation!",l="0",d=function(t,e){for(var n=-1,r=e;++n<6;)r+=t*s[n],s[n]=r%1e7,r=c(r/1e7)},h=function(t){for(var e=6,n=0;--e>=0;)n+=s[e],s[e]=c(n/t),n=n%t*1e7},v=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==s[t]){var n=String(s[t]);e=""===e?n:e+o.call(l,7-n.length)+n}return e},p=function(t,e,n){return 0===e?n:e%2==1?p(t,e-1,n*t):p(t*t,e/2,n)};r(r.P+r.F*(!!u&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(4253)((function(){u.call({})}))),"Number",{toFixed:function(t){var e,n,r,u,c=a(this,f),s=i(t),g="",m=l;if(s<0||s>20)throw RangeError(f);if(c!=c)return"NaN";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(g="-",c=-c),c>1e-21)if(e=function(t){for(var e=0,n=t;n>=4096;)e+=12,n/=4096;for(;n>=2;)e+=1,n/=2;return e}(c*p(2,69,1))-69,n=e<0?c*p(2,-e,1):c/p(2,e,1),n*=4503599627370496,(e=52-e)>0){for(d(0,n),r=s;r>=7;)d(1e7,0),r-=7;for(d(p(10,r,1),0),r=e-1;r>=23;)h(1<<23),r-=23;h(1<<r),d(1,1),h(2),m=v()}else d(0,n),d(1<<-e,0),m=v()+o.call(l,s);return s>0?g+((u=m.length)<=s?"0."+o.call(l,s-u)+m:m.slice(0,u-s)+"."+m.slice(u-s)):g+m}})},1901:(t,e,n)=>{"use strict";var r=n(2985),i=n(4253),a=n(3365),o=1..toPrecision;r(r.P+r.F*(i((function(){return"1"!==o.call(1,void 0)}))||!i((function(){o.call({})}))),"Number",{toPrecision:function(t){var e=a(this,"Number#toPrecision: incorrect invocation!");return void 0===t?o.call(e):o.call(e,t)}})},5115:(t,e,n)=>{var r=n(2985);r(r.S+r.F,"Object",{assign:n(5345)})},8132:(t,e,n)=>{var r=n(2985);r(r.S,"Object",{create:n(2503)})},7470:(t,e,n)=>{var r=n(2985);r(r.S+r.F*!n(7057),"Object",{defineProperties:n(5588)})},8388:(t,e,n)=>{var r=n(2985);r(r.S+r.F*!n(7057),"Object",{defineProperty:n(9275).f})},9375:(t,e,n)=>{var r=n(5286),i=n(4728).onFreeze;n(3160)("freeze",(function(t){return function(e){return t&&r(e)?t(i(e)):e}}))},4882:(t,e,n)=>{var r=n(2110),i=n(8693).f;n(3160)("getOwnPropertyDescriptor",(function(){return function(t,e){return i(r(t),e)}}))},9622:(t,e,n)=>{n(3160)("getOwnPropertyNames",(function(){return n(9327).f}))},1520:(t,e,n)=>{var r=n(508),i=n(468);n(3160)("getPrototypeOf",(function(){return function(t){return i(r(t))}}))},9892:(t,e,n)=>{var r=n(5286);n(3160)("isExtensible",(function(t){return function(e){return!!r(e)&&(!t||t(e))}}))},4157:(t,e,n)=>{var r=n(5286);n(3160)("isFrozen",(function(t){return function(e){return!r(e)||!!t&&t(e)}}))},5095:(t,e,n)=>{var r=n(5286);n(3160)("isSealed",(function(t){return function(e){return!r(e)||!!t&&t(e)}}))},9176:(t,e,n)=>{var r=n(2985);r(r.S,"Object",{is:n(7195)})},7476:(t,e,n)=>{var r=n(508),i=n(7184);n(3160)("keys",(function(){return function(t){return i(r(t))}}))},4672:(t,e,n)=>{var r=n(5286),i=n(4728).onFreeze;n(3160)("preventExtensions",(function(t){return function(e){return t&&r(e)?t(i(e)):e}}))},3533:(t,e,n)=>{var r=n(5286),i=n(4728).onFreeze;n(3160)("seal",(function(t){return function(e){return t&&r(e)?t(i(e)):e}}))},8838:(t,e,n)=>{var r=n(2985);r(r.S,"Object",{setPrototypeOf:n(7375).set})},6253:(t,e,n)=>{"use strict";var r=n(1488),i={};i[n(6314)("toStringTag")]="z",i+""!="[object z]"&&n(7234)(Object.prototype,"toString",(function(){return"[object "+r(this)+"]"}),!0)},4299:(t,e,n)=>{var r=n(2985),i=n(7743);r(r.G+r.F*(parseFloat!=i),{parseFloat:i})},1084:(t,e,n)=>{var r=n(2985),i=n(5960);r(r.G+r.F*(parseInt!=i),{parseInt:i})},851:(t,e,n)=>{"use strict";var r,i,a,o,u=n(4461),c=n(3816),s=n(741),f=n(1488),l=n(2985),d=n(5286),h=n(4963),v=n(3328),p=n(3531),g=n(8364),m=n(4193).set,y=n(4351)(),w=n(3499),b=n(188),A=n(575),x=n(94),S="Promise",M=c.TypeError,C=c.process,_=C&&C.versions,T=_&&_.v8||"",I=c.Promise,P="process"==f(C),E=function(){},k=i=w.f,O=!!function(){try{var t=I.resolve(1),e=(t.constructor={})[n(6314)("species")]=function(t){t(E,E)};return(P||"function"==typeof PromiseRejectionEvent)&&t.then(E)instanceof e&&0!==T.indexOf("6.6")&&-1===A.indexOf("Chrome/66")}catch(t){}}(),D=function(t){var e;return!(!d(t)||"function"!=typeof(e=t.then))&&e},B=function(t,e){if(!t._n){t._n=!0;var n=t._c;y((function(){for(var r=t._v,i=1==t._s,a=0,o=function(e){var n,a,o,u=i?e.ok:e.fail,c=e.resolve,s=e.reject,f=e.domain;try{u?(i||(2==t._h&&F(t),t._h=1),!0===u?n=r:(f&&f.enter(),n=u(r),f&&(f.exit(),o=!0)),n===e.promise?s(M("Promise-chain cycle")):(a=D(n))?a.call(n,c,s):c(n)):s(r)}catch(t){f&&!o&&f.exit(),s(t)}};n.length>a;)o(n[a++]);t._c=[],t._n=!1,e&&!t._h&&j(t)}))}},j=function(t){m.call(c,(function(){var e,n,r,i=t._v,a=N(t);if(a&&(e=b((function(){P?C.emit("unhandledRejection",i,t):(n=c.onunhandledrejection)?n({promise:t,reason:i}):(r=c.console)&&r.error&&r.error("Unhandled promise rejection",i)})),t._h=P||N(t)?2:1),t._a=void 0,a&&e.e)throw e.v}))},N=function(t){return 1!==t._h&&0===(t._a||t._c).length},F=function(t){m.call(c,(function(){var e;P?C.emit("rejectionHandled",t):(e=c.onrejectionhandled)&&e({promise:t,reason:t._v})}))},U=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),B(e,!0))},Y=function(t){var e,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===t)throw M("Promise can't be resolved itself");(e=D(t))?y((function(){var r={_w:n,_d:!1};try{e.call(t,s(Y,r,1),s(U,r,1))}catch(t){U.call(r,t)}})):(n._v=t,n._s=1,B(n,!1))}catch(t){U.call({_w:n,_d:!1},t)}}};O||(I=function(t){v(this,I,S,"_h"),h(t),r.call(this);try{t(s(Y,this,1),s(U,this,1))}catch(t){U.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(4408)(I.prototype,{then:function(t,e){var n=k(g(this,I));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=P?C.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&B(this,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),a=function(){var t=new r;this.promise=t,this.resolve=s(Y,t,1),this.reject=s(U,t,1)},w.f=k=function(t){return t===I||t===o?new a(t):i(t)}),l(l.G+l.W+l.F*!O,{Promise:I}),n(2943)(I,S),n(2974)(S),o=n(5645).Promise,l(l.S+l.F*!O,S,{reject:function(t){var e=k(this);return(0,e.reject)(t),e.promise}}),l(l.S+l.F*(u||!O),S,{resolve:function(t){return x(u&&this===o?I:this,t)}}),l(l.S+l.F*!(O&&n(7462)((function(t){I.all(t).catch(E)}))),S,{all:function(t){var e=this,n=k(e),r=n.resolve,i=n.reject,a=b((function(){var n=[],a=0,o=1;p(t,!1,(function(t){var u=a++,c=!1;n.push(void 0),o++,e.resolve(t).then((function(t){c||(c=!0,n[u]=t,--o||r(n))}),i)})),--o||r(n)}));return a.e&&i(a.v),n.promise},race:function(t){var e=this,n=k(e),r=n.reject,i=b((function(){p(t,!1,(function(t){e.resolve(t).then(n.resolve,r)}))}));return i.e&&r(i.v),n.promise}})},1572:(t,e,n)=>{var r=n(2985),i=n(4963),a=n(7007),o=(n(3816).Reflect||{}).apply,u=Function.apply;r(r.S+r.F*!n(4253)((function(){o((function(){}))})),"Reflect",{apply:function(t,e,n){var r=i(t),c=a(n);return o?o(r,e,c):u.call(r,e,c)}})},2139:(t,e,n)=>{var r=n(2985),i=n(2503),a=n(4963),o=n(7007),u=n(5286),c=n(4253),s=n(4398),f=(n(3816).Reflect||{}).construct,l=c((function(){function t(){}return!(f((function(){}),[],t)instanceof t)})),d=!c((function(){f((function(){}))}));r(r.S+r.F*(l||d),"Reflect",{construct:function(t,e){a(t),o(e);var n=arguments.length<3?t:a(arguments[2]);if(d&&!l)return f(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(s.apply(t,r))}var c=n.prototype,h=i(u(c)?c:Object.prototype),v=Function.apply.call(t,h,e);return u(v)?v:h}})},685:(t,e,n)=>{var r=n(9275),i=n(2985),a=n(7007),o=n(1689);i(i.S+i.F*n(4253)((function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})})),"Reflect",{defineProperty:function(t,e,n){a(t),e=o(e,!0),a(n);try{return r.f(t,e,n),!0}catch(t){return!1}}})},5535:(t,e,n)=>{var r=n(2985),i=n(8693).f,a=n(7007);r(r.S,"Reflect",{deleteProperty:function(t,e){var n=i(a(t),e);return!(n&&!n.configurable)&&delete t[e]}})},7347:(t,e,n)=>{"use strict";var r=n(2985),i=n(7007),a=function(t){this._t=i(t),this._i=0;var e,n=this._k=[];for(e in t)n.push(e)};n(9988)(a,"Object",(function(){var t,e=this,n=e._k;do{if(e._i>=n.length)return{value:void 0,done:!0}}while(!((t=n[e._i++])in e._t));return{value:t,done:!1}})),r(r.S,"Reflect",{enumerate:function(t){return new a(t)}})},6633:(t,e,n)=>{var r=n(8693),i=n(2985),a=n(7007);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return r.f(a(t),e)}})},8989:(t,e,n)=>{var r=n(2985),i=n(468),a=n(7007);r(r.S,"Reflect",{getPrototypeOf:function(t){return i(a(t))}})},3049:(t,e,n)=>{var r=n(8693),i=n(468),a=n(9181),o=n(2985),u=n(5286),c=n(7007);o(o.S,"Reflect",{get:function t(e,n){var o,s,f=arguments.length<3?e:arguments[2];return c(e)===f?e[n]:(o=r.f(e,n))?a(o,"value")?o.value:void 0!==o.get?o.get.call(f):void 0:u(s=i(e))?t(s,n,f):void 0}})},8270:(t,e,n)=>{var r=n(2985);r(r.S,"Reflect",{has:function(t,e){return e in t}})},4510:(t,e,n)=>{var r=n(2985),i=n(7007),a=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return i(t),!a||a(t)}})},3984:(t,e,n)=>{var r=n(2985);r(r.S,"Reflect",{ownKeys:n(7643)})},5769:(t,e,n)=>{var r=n(2985),i=n(7007),a=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){i(t);try{return a&&a(t),!0}catch(t){return!1}}})},6014:(t,e,n)=>{var r=n(2985),i=n(7375);i&&r(r.S,"Reflect",{setPrototypeOf:function(t,e){i.check(t,e);try{return i.set(t,e),!0}catch(t){return!1}}})},55:(t,e,n)=>{var r=n(9275),i=n(8693),a=n(468),o=n(9181),u=n(2985),c=n(681),s=n(7007),f=n(5286);u(u.S,"Reflect",{set:function t(e,n,u){var l,d,h=arguments.length<4?e:arguments[3],v=i.f(s(e),n);if(!v){if(f(d=a(e)))return t(d,n,u,h);v=c(0)}if(o(v,"value")){if(!1===v.writable||!f(h))return!1;if(l=i.f(h,n)){if(l.get||l.set||!1===l.writable)return!1;l.value=u,r.f(h,n,l)}else r.f(h,n,c(0,u));return!0}return void 0!==v.set&&(v.set.call(h,u),!0)}})},3946:(t,e,n)=>{var r=n(3816),i=n(266),a=n(9275).f,o=n(616).f,u=n(5364),c=n(3218),s=r.RegExp,f=s,l=s.prototype,d=/a/g,h=/a/g,v=new s(d)!==d;if(n(7057)&&(!v||n(4253)((function(){return h[n(6314)("match")]=!1,s(d)!=d||s(h)==h||"/a/i"!=s(d,"i")})))){s=function(t,e){var n=this instanceof s,r=u(t),a=void 0===e;return!n&&r&&t.constructor===s&&a?t:i(v?new f(r&&!a?t.source:t,e):f((r=t instanceof s)?t.source:t,r&&a?c.call(t):e),n?this:l,s)};for(var p=function(t){t in s||a(s,t,{configurable:!0,get:function(){return f[t]},set:function(e){f[t]=e}})},g=o(f),m=0;g.length>m;)p(g[m++]);l.constructor=s,s.prototype=l,n(7234)(r,"RegExp",s)}n(2974)("RegExp")},8269:(t,e,n)=>{"use strict";var r=n(1165);n(2985)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},6774:(t,e,n)=>{n(7057)&&"g"!=/./g.flags&&n(9275).f(RegExp.prototype,"flags",{configurable:!0,get:n(3218)})},1466:(t,e,n)=>{"use strict";var r=n(7007),i=n(875),a=n(6793),o=n(7787);n(8082)("match",1,(function(t,e,n,u){return[function(n){var r=t(this),i=null==n?void 0:n[e];return void 0!==i?i.call(n,r):new RegExp(n)[e](String(r))},function(t){var e=u(n,t,this);if(e.done)return e.value;var c=r(t),s=String(this);if(!c.global)return o(c,s);var f=c.unicode;c.lastIndex=0;for(var l,d=[],h=0;null!==(l=o(c,s));){var v=String(l[0]);d[h]=v,""===v&&(c.lastIndex=a(s,i(c.lastIndex),f)),h++}return 0===h?null:d}]}))},9357:(t,e,n)=>{"use strict";var r=n(7007),i=n(508),a=n(875),o=n(1467),u=n(6793),c=n(7787),s=Math.max,f=Math.min,l=Math.floor,d=/\$([$&`']|\d\d?|<[^>]*>)/g,h=/\$([$&`']|\d\d?)/g;n(8082)("replace",2,(function(t,e,n,v){return[function(r,i){var a=t(this),o=null==r?void 0:r[e];return void 0!==o?o.call(r,a,i):n.call(String(a),r,i)},function(t,e){var i=v(n,t,this,e);if(i.done)return i.value;var l=r(t),d=String(this),h="function"==typeof e;h||(e=String(e));var g=l.global;if(g){var m=l.unicode;l.lastIndex=0}for(var y=[];;){var w=c(l,d);if(null===w)break;if(y.push(w),!g)break;""===String(w[0])&&(l.lastIndex=u(d,a(l.lastIndex),m))}for(var b,A="",x=0,S=0;S<y.length;S++){w=y[S];for(var M=String(w[0]),C=s(f(o(w.index),d.length),0),_=[],T=1;T<w.length;T++)_.push(void 0===(b=w[T])?b:String(b));var I=w.groups;if(h){var P=[M].concat(_,C,d);void 0!==I&&P.push(I);var E=String(e.apply(void 0,P))}else E=p(M,d,C,_,I,e);C>=x&&(A+=d.slice(x,C)+E,x=C+M.length)}return A+d.slice(x)}];function p(t,e,r,a,o,u){var c=r+t.length,s=a.length,f=h;return void 0!==o&&(o=i(o),f=d),n.call(u,f,(function(n,i){var u;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,r);case"'":return e.slice(c);case"<":u=o[i.slice(1,-1)];break;default:var f=+i;if(0===f)return n;if(f>s){var d=l(f/10);return 0===d?n:d<=s?void 0===a[d-1]?i.charAt(1):a[d-1]+i.charAt(1):n}u=a[f-1]}return void 0===u?"":u}))}}))},6142:(t,e,n)=>{"use strict";var r=n(7007),i=n(7195),a=n(7787);n(8082)("search",1,(function(t,e,n,o){return[function(n){var r=t(this),i=null==n?void 0:n[e];return void 0!==i?i.call(n,r):new RegExp(n)[e](String(r))},function(t){var e=o(n,t,this);if(e.done)return e.value;var u=r(t),c=String(this),s=u.lastIndex;i(s,0)||(u.lastIndex=0);var f=a(u,c);return i(u.lastIndex,s)||(u.lastIndex=s),null===f?-1:f.index}]}))},1876:(t,e,n)=>{"use strict";var r=n(5364),i=n(7007),a=n(8364),o=n(6793),u=n(875),c=n(7787),s=n(1165),f=n(4253),l=Math.min,d=[].push,h=4294967295,v=!f((function(){RegExp(h,"y")}));n(8082)("split",2,(function(t,e,n,f){var p;return p="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,e){var i=String(this);if(void 0===t&&0===e)return[];if(!r(t))return n.call(i,t,e);for(var a,o,u,c=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),l=0,v=void 0===e?h:e>>>0,p=new RegExp(t.source,f+"g");(a=s.call(p,i))&&!((o=p.lastIndex)>l&&(c.push(i.slice(l,a.index)),a.length>1&&a.index<i.length&&d.apply(c,a.slice(1)),u=a[0].length,l=o,c.length>=v));)p.lastIndex===a.index&&p.lastIndex++;return l===i.length?!u&&p.test("")||c.push(""):c.push(i.slice(l)),c.length>v?c.slice(0,v):c}:"0".split(void 0,0).length?function(t,e){return void 0===t&&0===e?[]:n.call(this,t,e)}:n,[function(n,r){var i=t(this),a=null==n?void 0:n[e];return void 0!==a?a.call(n,i,r):p.call(String(i),n,r)},function(t,e){var r=f(p,t,this,e,p!==n);if(r.done)return r.value;var s=i(t),d=String(this),g=a(s,RegExp),m=s.unicode,y=(s.ignoreCase?"i":"")+(s.multiline?"m":"")+(s.unicode?"u":"")+(v?"y":"g"),w=new g(v?s:"^(?:"+s.source+")",y),b=void 0===e?h:e>>>0;if(0===b)return[];if(0===d.length)return null===c(w,d)?[d]:[];for(var A=0,x=0,S=[];x<d.length;){w.lastIndex=v?x:0;var M,C=c(w,v?d:d.slice(x));if(null===C||(M=l(u(w.lastIndex+(v?0:x)),d.length))===A)x=o(d,x,m);else{if(S.push(d.slice(A,x)),S.length===b)return S;for(var _=1;_<=C.length-1;_++)if(S.push(C[_]),S.length===b)return S;x=A=M}}return S.push(d.slice(A)),S}]}))},6108:(t,e,n)=>{"use strict";n(6774);var r=n(7007),i=n(3218),a=n(7057),o="toString",u=/./.toString,c=function(t){n(7234)(RegExp.prototype,o,t,!0)};n(4253)((function(){return"/a/b"!=u.call({source:"a",flags:"b"})}))?c((function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!a&&t instanceof RegExp?i.call(t):void 0)})):u.name!=o&&c((function(){return u.call(this)}))},8184:(t,e,n)=>{"use strict";var r=n(9824),i=n(1616);t.exports=n(5795)("Set",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return r.def(i(this,"Set"),t=0===t?0:t,t)}},r)},856:(t,e,n)=>{"use strict";n(9395)("anchor",(function(t){return function(e){return t(this,"a","name",e)}}))},703:(t,e,n)=>{"use strict";n(9395)("big",(function(t){return function(){return t(this,"big","","")}}))},1539:(t,e,n)=>{"use strict";n(9395)("blink",(function(t){return function(){return t(this,"blink","","")}}))},5292:(t,e,n)=>{"use strict";n(9395)("bold",(function(t){return function(){return t(this,"b","","")}}))},9539:(t,e,n)=>{"use strict";var r=n(2985),i=n(4496)(!1);r(r.P,"String",{codePointAt:function(t){return i(this,t)}})},6620:(t,e,n)=>{"use strict";var r=n(2985),i=n(875),a=n(2094),o="endsWith",u="".endsWith;r(r.P+r.F*n(8852)(o),"String",{endsWith:function(t){var e=a(this,t,o),n=arguments.length>1?arguments[1]:void 0,r=i(e.length),c=void 0===n?r:Math.min(i(n),r),s=String(t);return u?u.call(e,s,c):e.slice(c-s.length,c)===s}})},6629:(t,e,n)=>{"use strict";n(9395)("fixed",(function(t){return function(){return t(this,"tt","","")}}))},3694:(t,e,n)=>{"use strict";n(9395)("fontcolor",(function(t){return function(e){return t(this,"font","color",e)}}))},7648:(t,e,n)=>{"use strict";n(9395)("fontsize",(function(t){return function(e){return t(this,"font","size",e)}}))},191:(t,e,n)=>{var r=n(2985),i=n(2337),a=String.fromCharCode,o=String.fromCodePoint;r(r.S+r.F*(!!o&&1!=o.length),"String",{fromCodePoint:function(t){for(var e,n=[],r=arguments.length,o=0;r>o;){if(e=+arguments[o++],i(e,1114111)!==e)throw RangeError(e+" is not a valid code point");n.push(e<65536?a(e):a(55296+((e-=65536)>>10),e%1024+56320))}return n.join("")}})},2850:(t,e,n)=>{"use strict";var r=n(2985),i=n(2094),a="includes";r(r.P+r.F*n(8852)(a),"String",{includes:function(t){return!!~i(this,t,a).indexOf(t,arguments.length>1?arguments[1]:void 0)}})},8930:(t,e,n)=>{"use strict";n(9395)("italics",(function(t){return function(){return t(this,"i","","")}}))},9115:(t,e,n)=>{"use strict";var r=n(4496)(!0);n(2923)(String,"String",(function(t){this._t=String(t),this._i=0}),(function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})}))},4531:(t,e,n)=>{"use strict";n(9395)("link",(function(t){return function(e){return t(this,"a","href",e)}}))},8306:(t,e,n)=>{var r=n(2985),i=n(2110),a=n(875);r(r.S,"String",{raw:function(t){for(var e=i(t.raw),n=a(e.length),r=arguments.length,o=[],u=0;n>u;)o.push(String(e[u++])),u<r&&o.push(String(arguments[u]));return o.join("")}})},823:(t,e,n)=>{var r=n(2985);r(r.P,"String",{repeat:n(8595)})},3605:(t,e,n)=>{"use strict";n(9395)("small",(function(t){return function(){return t(this,"small","","")}}))},7732:(t,e,n)=>{"use strict";var r=n(2985),i=n(875),a=n(2094),o="startsWith",u="".startsWith;r(r.P+r.F*n(8852)(o),"String",{startsWith:function(t){var e=a(this,t,o),n=i(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return u?u.call(e,r,n):e.slice(n,n+r.length)===r}})},6780:(t,e,n)=>{"use strict";n(9395)("strike",(function(t){return function(){return t(this,"strike","","")}}))},9937:(t,e,n)=>{"use strict";n(9395)("sub",(function(t){return function(){return t(this,"sub","","")}}))},511:(t,e,n)=>{"use strict";n(9395)("sup",(function(t){return function(){return t(this,"sup","","")}}))},4564:(t,e,n)=>{"use strict";n(9599)("trim",(function(t){return function(){return t(this,3)}}))},5767:(t,e,n)=>{"use strict";var r=n(3816),i=n(9181),a=n(7057),o=n(2985),u=n(7234),c=n(4728).KEY,s=n(4253),f=n(3825),l=n(2943),d=n(3953),h=n(6314),v=n(8787),p=n(6074),g=n(5541),m=n(4302),y=n(7007),w=n(5286),b=n(508),A=n(2110),x=n(1689),S=n(681),M=n(2503),C=n(9327),_=n(8693),T=n(4548),I=n(9275),P=n(7184),E=_.f,k=I.f,O=C.f,D=r.Symbol,B=r.JSON,j=B&&B.stringify,N=h("_hidden"),F=h("toPrimitive"),U={}.propertyIsEnumerable,Y=f("symbol-registry"),W=f("symbols"),L=f("op-symbols"),R=Object.prototype,z="function"==typeof D&&!!T.f,q=r.QObject,H=!q||!q.prototype||!q.prototype.findChild,G=a&&s((function(){return 7!=M(k({},"a",{get:function(){return k(this,"a",{value:7}).a}})).a}))?function(t,e,n){var r=E(R,e);r&&delete R[e],k(t,e,n),r&&t!==R&&k(R,e,r)}:k,Z=function(t){var e=W[t]=M(D.prototype);return e._k=t,e},X=z&&"symbol"==typeof D.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof D},V=function(t,e,n){return t===R&&V(L,e,n),y(t),e=x(e,!0),y(n),i(W,e)?(n.enumerable?(i(t,N)&&t[N][e]&&(t[N][e]=!1),n=M(n,{enumerable:S(0,!1)})):(i(t,N)||k(t,N,S(1,{})),t[N][e]=!0),G(t,e,n)):k(t,e,n)},Q=function(t,e){y(t);for(var n,r=g(e=A(e)),i=0,a=r.length;a>i;)V(t,n=r[i++],e[n]);return t},$=function(t){var e=U.call(this,t=x(t,!0));return!(this===R&&i(W,t)&&!i(L,t))&&(!(e||!i(this,t)||!i(W,t)||i(this,N)&&this[N][t])||e)},J=function(t,e){if(t=A(t),e=x(e,!0),t!==R||!i(W,e)||i(L,e)){var n=E(t,e);return!n||!i(W,e)||i(t,N)&&t[N][e]||(n.enumerable=!0),n}},K=function(t){for(var e,n=O(A(t)),r=[],a=0;n.length>a;)i(W,e=n[a++])||e==N||e==c||r.push(e);return r},tt=function(t){for(var e,n=t===R,r=O(n?L:A(t)),a=[],o=0;r.length>o;)!i(W,e=r[o++])||n&&!i(R,e)||a.push(W[e]);return a};z||(u((D=function(){if(this instanceof D)throw TypeError("Symbol is not a constructor!");var t=d(arguments.length>0?arguments[0]:void 0),e=function(n){this===R&&e.call(L,n),i(this,N)&&i(this[N],t)&&(this[N][t]=!1),G(this,t,S(1,n))};return a&&H&&G(R,t,{configurable:!0,set:e}),Z(t)}).prototype,"toString",(function(){return this._k})),_.f=J,I.f=V,n(616).f=C.f=K,n(4682).f=$,T.f=tt,a&&!n(4461)&&u(R,"propertyIsEnumerable",$,!0),v.f=function(t){return Z(h(t))}),o(o.G+o.W+o.F*!z,{Symbol:D});for(var et="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),nt=0;et.length>nt;)h(et[nt++]);for(var rt=P(h.store),it=0;rt.length>it;)p(rt[it++]);o(o.S+o.F*!z,"Symbol",{for:function(t){return i(Y,t+="")?Y[t]:Y[t]=D(t)},keyFor:function(t){if(!X(t))throw TypeError(t+" is not a symbol!");for(var e in Y)if(Y[e]===t)return e},useSetter:function(){H=!0},useSimple:function(){H=!1}}),o(o.S+o.F*!z,"Object",{create:function(t,e){return void 0===e?M(t):Q(M(t),e)},defineProperty:V,defineProperties:Q,getOwnPropertyDescriptor:J,getOwnPropertyNames:K,getOwnPropertySymbols:tt});var at=s((function(){T.f(1)}));o(o.S+o.F*at,"Object",{getOwnPropertySymbols:function(t){return T.f(b(t))}}),B&&o(o.S+o.F*(!z||s((function(){var t=D();return"[null]"!=j([t])||"{}"!=j({a:t})||"{}"!=j(Object(t))}))),"JSON",{stringify:function(t){for(var e,n,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(n=e=r[1],(w(e)||void 0!==t)&&!X(t))return m(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!X(e))return e}),r[1]=e,j.apply(B,r)}}),D.prototype[F]||n(7728)(D.prototype,F,D.prototype.valueOf),l(D,"Symbol"),l(Math,"Math",!0),l(r.JSON,"JSON",!0)},142:(t,e,n)=>{"use strict";var r=n(2985),i=n(9383),a=n(1125),o=n(7007),u=n(2337),c=n(875),s=n(5286),f=n(3816).ArrayBuffer,l=n(8364),d=a.ArrayBuffer,h=a.DataView,v=i.ABV&&f.isView,p=d.prototype.slice,g=i.VIEW,m="ArrayBuffer";r(r.G+r.W+r.F*(f!==d),{ArrayBuffer:d}),r(r.S+r.F*!i.CONSTR,m,{isView:function(t){return v&&v(t)||s(t)&&g in t}}),r(r.P+r.U+r.F*n(4253)((function(){return!new d(2).slice(1,void 0).byteLength})),m,{slice:function(t,e){if(void 0!==p&&void 0===e)return p.call(o(this),t);for(var n=o(this).byteLength,r=u(t,n),i=u(void 0===e?n:e,n),a=new(l(this,d))(c(i-r)),s=new h(this),f=new h(a),v=0;r<i;)f.setUint8(v++,s.getUint8(r++));return a}}),n(2974)(m)},1786:(t,e,n)=>{var r=n(2985);r(r.G+r.W+r.F*!n(9383).ABV,{DataView:n(1125).DataView})},162:(t,e,n)=>{n(8440)("Float32",4,(function(t){return function(e,n,r){return t(this,e,n,r)}}))},3834:(t,e,n)=>{n(8440)("Float64",8,(function(t){return function(e,n,r){return t(this,e,n,r)}}))},4821:(t,e,n)=>{n(8440)("Int16",2,(function(t){return function(e,n,r){return t(this,e,n,r)}}))},1303:(t,e,n)=>{n(8440)("Int32",4,(function(t){return function(e,n,r){return t(this,e,n,r)}}))},5368:(t,e,n)=>{n(8440)("Int8",1,(function(t){return function(e,n,r){return t(this,e,n,r)}}))},9103:(t,e,n)=>{n(8440)("Uint16",2,(function(t){return function(e,n,r){return t(this,e,n,r)}}))},3318:(t,e,n)=>{n(8440)("Uint32",4,(function(t){return function(e,n,r){return t(this,e,n,r)}}))},6964:(t,e,n)=>{n(8440)("Uint8",1,(function(t){return function(e,n,r){return t(this,e,n,r)}}))},2152:(t,e,n)=>{n(8440)("Uint8",1,(function(t){return function(e,n,r){return t(this,e,n,r)}}),!0)},147:(t,e,n)=>{"use strict";var r,i=n(3816),a=n(50)(0),o=n(7234),u=n(4728),c=n(5345),s=n(3657),f=n(5286),l=n(1616),d=n(1616),h=!i.ActiveXObject&&"ActiveXObject"in i,v="WeakMap",p=u.getWeak,g=Object.isExtensible,m=s.ufstore,y=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},w={get:function(t){if(f(t)){var e=p(t);return!0===e?m(l(this,v)).get(t):e?e[this._i]:void 0}},set:function(t,e){return s.def(l(this,v),t,e)}},b=t.exports=n(5795)(v,y,w,s,!0,!0);d&&h&&(c((r=s.getConstructor(y,v)).prototype,w),u.NEED=!0,a(["delete","has","get","set"],(function(t){var e=b.prototype,n=e[t];o(e,t,(function(e,i){if(f(e)&&!g(e)){this._f||(this._f=new r);var a=this._f[t](e,i);return"set"==t?this:a}return n.call(this,e,i)}))})))},9192:(t,e,n)=>{"use strict";var r=n(3657),i=n(1616),a="WeakSet";n(5795)(a,(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return r.def(i(this,a),t,!0)}},r,!1,!0)},1268:(t,e,n)=>{"use strict";var r=n(2985),i=n(3325),a=n(508),o=n(875),u=n(4963),c=n(6886);r(r.P,"Array",{flatMap:function(t){var e,n,r=a(this);return u(t),e=o(r.length),n=c(r,0),i(n,r,r,e,0,1,t,arguments[1]),n}}),n(7722)("flatMap")},4692:(t,e,n)=>{"use strict";var r=n(2985),i=n(3325),a=n(508),o=n(875),u=n(1467),c=n(6886);r(r.P,"Array",{flatten:function(){var t=arguments[0],e=a(this),n=o(e.length),r=c(e,0);return i(r,e,e,n,0,void 0===t?1:u(t)),r}}),n(7722)("flatten")},2773:(t,e,n)=>{"use strict";var r=n(2985),i=n(9315)(!0);r(r.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),n(7722)("includes")},8267:(t,e,n)=>{var r=n(2985),i=n(4351)(),a=n(3816).process,o="process"==n(2032)(a);r(r.G,{asap:function(t){var e=o&&a.domain;i(e?e.bind(t):t)}})},2559:(t,e,n)=>{var r=n(2985),i=n(2032);r(r.S,"Error",{isError:function(t){return"Error"===i(t)}})},5575:(t,e,n)=>{var r=n(2985);r(r.G,{global:n(3816)})},525:(t,e,n)=>{n(1024)("Map")},8211:(t,e,n)=>{n(4881)("Map")},7698:(t,e,n)=>{var r=n(2985);r(r.P+r.R,"Map",{toJSON:n(6132)("Map")})},8865:(t,e,n)=>{var r=n(2985);r(r.S,"Math",{clamp:function(t,e,n){return Math.min(n,Math.max(e,t))}})},368:(t,e,n)=>{var r=n(2985);r(r.S,"Math",{DEG_PER_RAD:Math.PI/180})},6427:(t,e,n)=>{var r=n(2985),i=180/Math.PI;r(r.S,"Math",{degrees:function(t){return t*i}})},286:(t,e,n)=>{var r=n(2985),i=n(8757),a=n(4934);r(r.S,"Math",{fscale:function(t,e,n,r,o){return a(i(t,e,n,r,o))}})},2816:(t,e,n)=>{var r=n(2985);r(r.S,"Math",{iaddh:function(t,e,n,r){var i=t>>>0,a=n>>>0;return(e>>>0)+(r>>>0)+((i&a|(i|a)&~(i+a>>>0))>>>31)|0}})},2082:(t,e,n)=>{var r=n(2985);r(r.S,"Math",{imulh:function(t,e){var n=65535,r=+t,i=+e,a=r&n,o=i&n,u=r>>16,c=i>>16,s=(u*o>>>0)+(a*o>>>16);return u*c+(s>>16)+((a*c>>>0)+(s&n)>>16)}})},5986:(t,e,n)=>{var r=n(2985);r(r.S,"Math",{isubh:function(t,e,n,r){var i=t>>>0,a=n>>>0;return(e>>>0)-(r>>>0)-((~i&a|~(i^a)&i-a>>>0)>>>31)|0}})},6308:(t,e,n)=>{var r=n(2985);r(r.S,"Math",{RAD_PER_DEG:180/Math.PI})},9221:(t,e,n)=>{var r=n(2985),i=Math.PI/180;r(r.S,"Math",{radians:function(t){return t*i}})},3570:(t,e,n)=>{var r=n(2985);r(r.S,"Math",{scale:n(8757)})},3776:(t,e,n)=>{var r=n(2985);r(r.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},6754:(t,e,n)=>{var r=n(2985);r(r.S,"Math",{umulh:function(t,e){var n=65535,r=+t,i=+e,a=r&n,o=i&n,u=r>>>16,c=i>>>16,s=(u*o>>>0)+(a*o>>>16);return u*c+(s>>>16)+((a*c>>>0)+(s&n)>>>16)}})},8646:(t,e,n)=>{"use strict";var r=n(2985),i=n(508),a=n(4963),o=n(9275);n(7057)&&r(r.P+n(1670),"Object",{__defineGetter__:function(t,e){o.f(i(this),t,{get:a(e),enumerable:!0,configurable:!0})}})},2658:(t,e,n)=>{"use strict";var r=n(2985),i=n(508),a=n(4963),o=n(9275);n(7057)&&r(r.P+n(1670),"Object",{__defineSetter__:function(t,e){o.f(i(this),t,{set:a(e),enumerable:!0,configurable:!0})}})},3276:(t,e,n)=>{var r=n(2985),i=n(1131)(!0);r(r.S,"Object",{entries:function(t){return i(t)}})},8351:(t,e,n)=>{var r=n(2985),i=n(7643),a=n(2110),o=n(8693),u=n(2811);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,n,r=a(t),c=o.f,s=i(r),f={},l=0;s.length>l;)void 0!==(n=c(r,e=s[l++]))&&u(f,e,n);return f}})},6917:(t,e,n)=>{"use strict";var r=n(2985),i=n(508),a=n(1689),o=n(468),u=n(8693).f;n(7057)&&r(r.P+n(1670),"Object",{__lookupGetter__:function(t){var e,n=i(this),r=a(t,!0);do{if(e=u(n,r))return e.get}while(n=o(n))}})},372:(t,e,n)=>{"use strict";var r=n(2985),i=n(508),a=n(1689),o=n(468),u=n(8693).f;n(7057)&&r(r.P+n(1670),"Object",{__lookupSetter__:function(t){var e,n=i(this),r=a(t,!0);do{if(e=u(n,r))return e.set}while(n=o(n))}})},6409:(t,e,n)=>{var r=n(2985),i=n(1131)(!1);r(r.S,"Object",{values:function(t){return i(t)}})},6534:(t,e,n)=>{"use strict";var r=n(2985),i=n(3816),a=n(5645),o=n(4351)(),u=n(6314)("observable"),c=n(4963),s=n(7007),f=n(3328),l=n(4408),d=n(7728),h=n(3531),v=h.RETURN,p=function(t){return null==t?void 0:c(t)},g=function(t){var e=t._c;e&&(t._c=void 0,e())},m=function(t){return void 0===t._o},y=function(t){m(t)||(t._o=void 0,g(t))},w=function(t,e){s(t),this._c=void 0,this._o=t,t=new b(this);try{var n=e(t),r=n;null!=n&&("function"==typeof n.unsubscribe?n=function(){r.unsubscribe()}:c(n),this._c=n)}catch(e){return void t.error(e)}m(this)&&g(this)};w.prototype=l({},{unsubscribe:function(){y(this)}});var b=function(t){this._s=t};b.prototype=l({},{next:function(t){var e=this._s;if(!m(e)){var n=e._o;try{var r=p(n.next);if(r)return r.call(n,t)}catch(t){try{y(e)}finally{throw t}}}},error:function(t){var e=this._s;if(m(e))throw t;var n=e._o;e._o=void 0;try{var r=p(n.error);if(!r)throw t;t=r.call(n,t)}catch(t){try{g(e)}finally{throw t}}return g(e),t},complete:function(t){var e=this._s;if(!m(e)){var n=e._o;e._o=void 0;try{var r=p(n.complete);t=r?r.call(n,t):void 0}catch(t){try{g(e)}finally{throw t}}return g(e),t}}});var A=function(t){f(this,A,"Observable","_f")._f=c(t)};l(A.prototype,{subscribe:function(t){return new w(t,this._f)},forEach:function(t){var e=this;return new(a.Promise||i.Promise)((function(n,r){c(t);var i=e.subscribe({next:function(e){try{return t(e)}catch(t){r(t),i.unsubscribe()}},error:r,complete:n})}))}}),l(A,{from:function(t){var e="function"==typeof this?this:A,n=p(s(t)[u]);if(n){var r=s(n.call(t));return r.constructor===e?r:new e((function(t){return r.subscribe(t)}))}return new e((function(e){var n=!1;return o((function(){if(!n){try{if(h(t,!1,(function(t){if(e.next(t),n)return v}))===v)return}catch(t){if(n)throw t;return void e.error(t)}e.complete()}})),function(){n=!0}}))},of:function(){for(var t=0,e=arguments.length,n=new Array(e);t<e;)n[t]=arguments[t++];return new("function"==typeof this?this:A)((function(t){var e=!1;return o((function(){if(!e){for(var r=0;r<n.length;++r)if(t.next(n[r]),e)return;t.complete()}})),function(){e=!0}}))}}),d(A.prototype,u,(function(){return this})),r(r.G,{Observable:A}),n(2974)("Observable")},9865:(t,e,n)=>{"use strict";var r=n(2985),i=n(5645),a=n(3816),o=n(8364),u=n(94);r(r.P+r.R,"Promise",{finally:function(t){var e=o(this,i.Promise||a.Promise),n="function"==typeof t;return this.then(n?function(n){return u(e,t()).then((function(){return n}))}:t,n?function(n){return u(e,t()).then((function(){throw n}))}:t)}})},1898:(t,e,n)=>{"use strict";var r=n(2985),i=n(3499),a=n(188);r(r.S,"Promise",{try:function(t){var e=i.f(this),n=a(t);return(n.e?e.reject:e.resolve)(n.v),e.promise}})},3364:(t,e,n)=>{var r=n(133),i=n(7007),a=r.key,o=r.set;r.exp({defineMetadata:function(t,e,n,r){o(t,e,i(n),a(r))}})},1432:(t,e,n)=>{var r=n(133),i=n(7007),a=r.key,o=r.map,u=r.store;r.exp({deleteMetadata:function(t,e){var n=arguments.length<3?void 0:a(arguments[2]),r=o(i(e),n,!1);if(void 0===r||!r.delete(t))return!1;if(r.size)return!0;var c=u.get(e);return c.delete(n),!!c.size||u.delete(e)}})},4416:(t,e,n)=>{var r=n(8184),i=n(9490),a=n(133),o=n(7007),u=n(468),c=a.keys,s=a.key,f=function(t,e){var n=c(t,e),a=u(t);if(null===a)return n;var o=f(a,e);return o.length?n.length?i(new r(n.concat(o))):o:n};a.exp({getMetadataKeys:function(t){return f(o(t),arguments.length<2?void 0:s(arguments[1]))}})},6562:(t,e,n)=>{var r=n(133),i=n(7007),a=n(468),o=r.has,u=r.get,c=r.key,s=function(t,e,n){if(o(t,e,n))return u(t,e,n);var r=a(e);return null!==r?s(t,r,n):void 0};r.exp({getMetadata:function(t,e){return s(t,i(e),arguments.length<3?void 0:c(arguments[2]))}})},2213:(t,e,n)=>{var r=n(133),i=n(7007),a=r.keys,o=r.key;r.exp({getOwnMetadataKeys:function(t){return a(i(t),arguments.length<2?void 0:o(arguments[1]))}})},8681:(t,e,n)=>{var r=n(133),i=n(7007),a=r.get,o=r.key;r.exp({getOwnMetadata:function(t,e){return a(t,i(e),arguments.length<3?void 0:o(arguments[2]))}})},3471:(t,e,n)=>{var r=n(133),i=n(7007),a=n(468),o=r.has,u=r.key,c=function(t,e,n){if(o(t,e,n))return!0;var r=a(e);return null!==r&&c(t,r,n)};r.exp({hasMetadata:function(t,e){return c(t,i(e),arguments.length<3?void 0:u(arguments[2]))}})},4329:(t,e,n)=>{var r=n(133),i=n(7007),a=r.has,o=r.key;r.exp({hasOwnMetadata:function(t,e){return a(t,i(e),arguments.length<3?void 0:o(arguments[2]))}})},5159:(t,e,n)=>{var r=n(133),i=n(7007),a=n(4963),o=r.key,u=r.set;r.exp({metadata:function(t,e){return function(n,r){u(t,e,(void 0!==r?i:a)(n),o(r))}}})},9467:(t,e,n)=>{n(1024)("Set")},4837:(t,e,n)=>{n(4881)("Set")},8739:(t,e,n)=>{var r=n(2985);r(r.P+r.R,"Set",{toJSON:n(6132)("Set")})},7220:(t,e,n)=>{"use strict";var r=n(2985),i=n(4496)(!0),a=n(4253)((function(){return"𠮷"!=="𠮷".at(0)}));r(r.P+r.F*a,"String",{at:function(t){return i(this,t)}})},4208:(t,e,n)=>{"use strict";var r=n(2985),i=n(1355),a=n(875),o=n(5364),u=n(3218),c=RegExp.prototype,s=function(t,e){this._r=t,this._s=e};n(9988)(s,"RegExp String",(function(){var t=this._r.exec(this._s);return{value:t,done:null===t}})),r(r.P,"String",{matchAll:function(t){if(i(this),!o(t))throw TypeError(t+" is not a regexp!");var e=String(this),n="flags"in c?String(t.flags):u.call(t),r=new RegExp(t.source,~n.indexOf("g")?n:"g"+n);return r.lastIndex=a(t.lastIndex),new s(r,e)}})},2770:(t,e,n)=>{"use strict";var r=n(2985),i=n(5442),a=n(575),o=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(a);r(r.P+r.F*o,"String",{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},1784:(t,e,n)=>{"use strict";var r=n(2985),i=n(5442),a=n(575),o=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(a);r(r.P+r.F*o,"String",{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},5869:(t,e,n)=>{"use strict";n(9599)("trimLeft",(function(t){return function(){return t(this,1)}}),"trimStart")},4325:(t,e,n)=>{"use strict";n(9599)("trimRight",(function(t){return function(){return t(this,2)}}),"trimEnd")},9665:(t,e,n)=>{n(6074)("asyncIterator")},9593:(t,e,n)=>{n(6074)("observable")},8967:(t,e,n)=>{var r=n(2985);r(r.S,"System",{global:n(3816)})},4188:(t,e,n)=>{n(1024)("WeakMap")},7594:(t,e,n)=>{n(4881)("WeakMap")},3495:(t,e,n)=>{n(1024)("WeakSet")},9550:(t,e,n)=>{n(4881)("WeakSet")},1181:(t,e,n)=>{for(var r=n(6997),i=n(7184),a=n(7234),o=n(3816),u=n(7728),c=n(2803),s=n(6314),f=s("iterator"),l=s("toStringTag"),d=c.Array,h={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},v=i(h),p=0;p<v.length;p++){var g,m=v[p],y=h[m],w=o[m],b=w&&w.prototype;if(b&&(b[f]||u(b,f,d),b[l]||u(b,l,m),c[m]=d,y))for(g in r)b[g]||a(b,g,r[g],!0)}},4633:(t,e,n)=>{var r=n(2985),i=n(4193);r(r.G+r.B,{setImmediate:i.set,clearImmediate:i.clear})},2564:(t,e,n)=>{var r=n(3816),i=n(2985),a=n(575),o=[].slice,u=/MSIE .\./.test(a),c=function(t){return function(e,n){var r=arguments.length>2,i=!!r&&o.call(arguments,2);return t(r?function(){("function"==typeof e?e:Function(e)).apply(this,i)}:e,n)}};i(i.G+i.B+i.F*u,{setTimeout:c(r.setTimeout),setInterval:c(r.setInterval)})},1934:(t,e,n)=>{n(5767),n(8132),n(8388),n(7470),n(4882),n(1520),n(7476),n(9622),n(9375),n(3533),n(4672),n(4157),n(5095),n(9892),n(5115),n(9176),n(8838),n(6253),n(9730),n(6059),n(8377),n(1084),n(4299),n(1246),n(726),n(1901),n(5972),n(3403),n(2516),n(9371),n(6479),n(1736),n(1889),n(5177),n(6943),n(6503),n(6786),n(932),n(7526),n(1591),n(9073),n(347),n(579),n(4669),n(7710),n(5789),n(3514),n(9978),n(8472),n(6946),n(5068),n(413),n(191),n(8306),n(4564),n(9115),n(9539),n(6620),n(2850),n(823),n(7732),n(856),n(703),n(1539),n(5292),n(6629),n(3694),n(7648),n(8930),n(4531),n(3605),n(6780),n(9937),n(511),n(1822),n(9977),n(1031),n(6331),n(1560),n(774),n(522),n(8295),n(7842),n(110),n(75),n(4336),n(1802),n(8837),n(6773),n(5745),n(3057),n(3750),n(3369),n(9564),n(2e3),n(8977),n(2310),n(4899),n(1842),n(6997),n(3946),n(8269),n(6108),n(6774),n(1466),n(9357),n(6142),n(1876),n(851),n(8416),n(8184),n(147),n(9192),n(142),n(1786),n(5368),n(6964),n(2152),n(4821),n(9103),n(1303),n(3318),n(162),n(3834),n(1572),n(2139),n(685),n(5535),n(7347),n(3049),n(6633),n(8989),n(8270),n(4510),n(3984),n(5769),n(55),n(6014),n(2773),n(1268),n(4692),n(7220),n(1784),n(2770),n(5869),n(4325),n(4208),n(9665),n(9593),n(8351),n(6409),n(3276),n(8646),n(2658),n(6917),n(372),n(7698),n(8739),n(8211),n(4837),n(7594),n(9550),n(525),n(9467),n(4188),n(3495),n(5575),n(8967),n(2559),n(8865),n(368),n(6427),n(286),n(2816),n(5986),n(2082),n(6308),n(9221),n(3570),n(6754),n(3776),n(9865),n(1898),n(3364),n(1432),n(6562),n(4416),n(8681),n(2213),n(3471),n(4329),n(5159),n(8267),n(6534),n(2564),n(4633),n(1181),t.exports=n(5645)},5426:(t,e,n)=>{"use strict";n.d(e,{Z:()=>u});var r=n(7537),i=n.n(r),a=n(3645),o=n.n(a)()(i());o.push([t.id,":root {\n    font-size: 12px;\n    font-family: 'Mukta', sans-serif;\n}\n\nbody {\n    margin: 0;\n    height: 100vh;\n    width: 100vw;\n    padding-left: 2%;\n    background-size: cover;\n}\n\nh1, h2, h3, h4, h5, h6, p {\n    margin: 0;\n}\n\nheader {\n    display: flex; \n    justify-content: space-between;\n    align-items: center; \n    font-size: 1.5rem;\n}\n\n#location {\n    grid-column: 1 / 2;\n    grid-row: 1 / 2;\n    position: relative;\n    top: 53px;\n    font-size: 3.5rem;\n}\n\n#date {\n    grid-column: 1 / 2;\n    grid-row: 2 / 3;\n    font-size: 2.5rem;\n}\n\n#time {\n    grid-column: 1 / 2;\n    grid-row: 3 / 4;\n    font-size: 2.5rem;\n    position: relative;\n    bottom: 78px;\n    font-size: 2.5rem;\n}\n\nform {\n    width: 350px;\n    grid-column: 1 / 2;\n    grid-row: 4 / 5;\n}\n\nform > img {\n    position: relative;\n    right: 37px;\n    top: 8px;\n    height: 28px;\n    cursor: pointer;\n    background: white;\n}\n\ninput {\n    padding: 12px 12px 12px 12px;\n    height: 45px;\n    width: 305px;\n    border-radius: 12px;\n    font-size: 1.5rem;\n}\nmain {\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    grid-template-rows: repeat(4, 1fr);\n}\n\n#main-container {\n    grid-column: 2 / 4;\n    grid-row: 1 / 3;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 6px;\n}\n\n#main-icon {\n    height: 115px;\n}\n\n\n#temperature {\n    font-size: 12rem;\n    margin: 0;\n    display: inline-block;\n}\n\n#sunrise-card {\n    grid-column: 4 / 5;\n    grid-row: 1 / 2;\n    font-size: 1.75rem;\n    position: relative;\n    top: 46px;\n}\n\n#sunset-card {\n    grid-column: 4 / 5;\n    grid-row: 2 / 3;\n    font-size: 1.75rem;\n    position: relative;\n    top: 46px;\n}\n\n#description {\n    grid-column: 2 / 4;\n    grid-row: 3 / 4;\n    text-align: center;\n    font-size: 2.5rem;\n}\n\n#wind {\n    grid-column: 2 / 4;\n    grid-row: 4 / 5;\n    text-align: center;\n    font-size: 2.5rem;\n    position: relative;\n    bottom: 62px;\n}\n\n#feels-like {\n    grid-column: 2 / 4;\n    grid-row: 5 / 6;\n    text-align: center;\n    font-size: 2.5rem;\n    position: relative;\n    bottom: 123px;\n}\n\n.bottom-info-card {\n    display: flex; \n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    width: 300px;\n    height: 100px;\n    margin: 10px;\n}\n\nsection {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n#mode-button-container {\n    display: flex;\n    gap: 256px;\n    padding-bottom: 16px;\n}\n\n\n.mode-button {\n    appearance: none;\n    -webkit-appearance: none;\n    cursor: pointer;\n    width: 150px;\n    height: 50px;\n    border: 2px solid grey;\n    border-radius: 6px;\n    font-size: 1.5rem;\n    background: rgba(255,255,255,0.4);\n    font-weight: bold;\n}\n\n.mode-button:hover {\n    background: rgba(255,255,255, 0.6)\n}\n\n.active {\n    background: rgba(255,255,255, 0.8)\n}\n\n.mode-button.active:hover {\n    background: rgba(255,255,255, 0.8)\n}\n\n.card-container {\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    gap: 12px;\n}\n\n.card-container > img {\n    height: 75px;\n    width: auto;\n}\n\n.section-info-card {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n    border: 3px solid grey;\n    transition: border 200ms ease-in-out;\n    border-radius: 8px;\n    min-width: 80px;\n    max-width: 8vw;\n    height: 150px;\n    font-size: 1.5rem;\n    background: rgba(255,255,255,0.25)\n}\n\n.top-row {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n}\n\n.top-row > img {\n    height: 50px;\n}\n\n#right-button, #left-button {\n    cursor: pointer;\n}\n\n.inactive {\n    visibility: hidden;\n    pointer-events: none;\n    cursor: default;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,eAAe;IACf,gCAAgC;AACpC;;AAEA;IACI,SAAS;IACT,aAAa;IACb,YAAY;IACZ,gBAAgB;IAChB,sBAAsB;AAC1B;;AAEA;IACI,SAAS;AACb;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;IACnB,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;IAClB,eAAe;IACf,kBAAkB;IAClB,SAAS;IACT,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;IAClB,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;IAClB,eAAe;IACf,iBAAiB;IACjB,kBAAkB;IAClB,YAAY;IACZ,iBAAiB;AACrB;;AAEA;IACI,YAAY;IACZ,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,QAAQ;IACR,YAAY;IACZ,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,4BAA4B;IAC5B,YAAY;IACZ,YAAY;IACZ,mBAAmB;IACnB,iBAAiB;AACrB;AACA;IACI,aAAa;IACb,qCAAqC;IACrC,kCAAkC;AACtC;;AAEA;IACI,kBAAkB;IAClB,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,QAAQ;AACZ;;AAEA;IACI,aAAa;AACjB;;;AAGA;IACI,gBAAgB;IAChB,SAAS;IACT,qBAAqB;AACzB;;AAEA;IACI,kBAAkB;IAClB,eAAe;IACf,kBAAkB;IAClB,kBAAkB;IAClB,SAAS;AACb;;AAEA;IACI,kBAAkB;IAClB,eAAe;IACf,kBAAkB;IAClB,kBAAkB;IAClB,SAAS;AACb;;AAEA;IACI,kBAAkB;IAClB,eAAe;IACf,kBAAkB;IAClB,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;IAClB,eAAe;IACf,kBAAkB;IAClB,iBAAiB;IACjB,kBAAkB;IAClB,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,eAAe;IACf,kBAAkB;IAClB,iBAAiB;IACjB,kBAAkB;IAClB,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,uBAAuB;IACvB,YAAY;IACZ,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,UAAU;IACV,oBAAoB;AACxB;;;AAGA;IACI,gBAAgB;IAChB,wBAAwB;IACxB,eAAe;IACf,YAAY;IACZ,YAAY;IACZ,sBAAsB;IACtB,kBAAkB;IAClB,iBAAiB;IACjB,iCAAiC;IACjC,iBAAiB;AACrB;;AAEA;IACI;AACJ;;AAEA;IACI;AACJ;;AAEA;IACI;AACJ;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,6BAA6B;IAC7B,SAAS;AACb;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,8BAA8B;IAC9B,mBAAmB;IACnB,sBAAsB;IACtB,oCAAoC;IACpC,kBAAkB;IAClB,eAAe;IACf,cAAc;IACd,aAAa;IACb,iBAAiB;IACjB;AACJ;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,uBAAuB;IACvB,kBAAkB;AACtB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,kBAAkB;IAClB,oBAAoB;IACpB,eAAe;AACnB",sourcesContent:[":root {\n    font-size: 12px;\n    font-family: 'Mukta', sans-serif;\n}\n\nbody {\n    margin: 0;\n    height: 100vh;\n    width: 100vw;\n    padding-left: 2%;\n    background-size: cover;\n}\n\nh1, h2, h3, h4, h5, h6, p {\n    margin: 0;\n}\n\nheader {\n    display: flex; \n    justify-content: space-between;\n    align-items: center; \n    font-size: 1.5rem;\n}\n\n#location {\n    grid-column: 1 / 2;\n    grid-row: 1 / 2;\n    position: relative;\n    top: 53px;\n    font-size: 3.5rem;\n}\n\n#date {\n    grid-column: 1 / 2;\n    grid-row: 2 / 3;\n    font-size: 2.5rem;\n}\n\n#time {\n    grid-column: 1 / 2;\n    grid-row: 3 / 4;\n    font-size: 2.5rem;\n    position: relative;\n    bottom: 78px;\n    font-size: 2.5rem;\n}\n\nform {\n    width: 350px;\n    grid-column: 1 / 2;\n    grid-row: 4 / 5;\n}\n\nform > img {\n    position: relative;\n    right: 37px;\n    top: 8px;\n    height: 28px;\n    cursor: pointer;\n    background: white;\n}\n\ninput {\n    padding: 12px 12px 12px 12px;\n    height: 45px;\n    width: 305px;\n    border-radius: 12px;\n    font-size: 1.5rem;\n}\nmain {\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    grid-template-rows: repeat(4, 1fr);\n}\n\n#main-container {\n    grid-column: 2 / 4;\n    grid-row: 1 / 3;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 6px;\n}\n\n#main-icon {\n    height: 115px;\n}\n\n\n#temperature {\n    font-size: 12rem;\n    margin: 0;\n    display: inline-block;\n}\n\n#sunrise-card {\n    grid-column: 4 / 5;\n    grid-row: 1 / 2;\n    font-size: 1.75rem;\n    position: relative;\n    top: 46px;\n}\n\n#sunset-card {\n    grid-column: 4 / 5;\n    grid-row: 2 / 3;\n    font-size: 1.75rem;\n    position: relative;\n    top: 46px;\n}\n\n#description {\n    grid-column: 2 / 4;\n    grid-row: 3 / 4;\n    text-align: center;\n    font-size: 2.5rem;\n}\n\n#wind {\n    grid-column: 2 / 4;\n    grid-row: 4 / 5;\n    text-align: center;\n    font-size: 2.5rem;\n    position: relative;\n    bottom: 62px;\n}\n\n#feels-like {\n    grid-column: 2 / 4;\n    grid-row: 5 / 6;\n    text-align: center;\n    font-size: 2.5rem;\n    position: relative;\n    bottom: 123px;\n}\n\n.bottom-info-card {\n    display: flex; \n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    width: 300px;\n    height: 100px;\n    margin: 10px;\n}\n\nsection {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n#mode-button-container {\n    display: flex;\n    gap: 256px;\n    padding-bottom: 16px;\n}\n\n\n.mode-button {\n    appearance: none;\n    -webkit-appearance: none;\n    cursor: pointer;\n    width: 150px;\n    height: 50px;\n    border: 2px solid grey;\n    border-radius: 6px;\n    font-size: 1.5rem;\n    background: rgba(255,255,255,0.4);\n    font-weight: bold;\n}\n\n.mode-button:hover {\n    background: rgba(255,255,255, 0.6)\n}\n\n.active {\n    background: rgba(255,255,255, 0.8)\n}\n\n.mode-button.active:hover {\n    background: rgba(255,255,255, 0.8)\n}\n\n.card-container {\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    gap: 12px;\n}\n\n.card-container > img {\n    height: 75px;\n    width: auto;\n}\n\n.section-info-card {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n    border: 3px solid grey;\n    transition: border 200ms ease-in-out;\n    border-radius: 8px;\n    min-width: 80px;\n    max-width: 8vw;\n    height: 150px;\n    font-size: 1.5rem;\n    background: rgba(255,255,255,0.25)\n}\n\n.top-row {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n}\n\n.top-row > img {\n    height: 50px;\n}\n\n#right-button, #left-button {\n    cursor: pointer;\n}\n\n.inactive {\n    visibility: hidden;\n    pointer-events: none;\n    cursor: default;\n}\n"],sourceRoot:""}]);const u=o},3645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,i,a){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(r)for(var u=0;u<this.length;u++){var c=this[u][0];null!=c&&(o[c]=!0)}for(var s=0;s<t.length;s++){var f=[].concat(t[s]);r&&o[f[0]]||(void 0!==a&&(void 0===f[5]||(f[1]="@layer".concat(f[5].length>0?" ".concat(f[5]):""," {").concat(f[1],"}")),f[5]=a),n&&(f[2]?(f[1]="@media ".concat(f[2]," {").concat(f[1],"}"),f[2]=n):f[2]=n),i&&(f[4]?(f[1]="@supports (".concat(f[4],") {").concat(f[1],"}"),f[4]=i):f[4]="".concat(i)),e.push(f))}},e}},7537:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(i," */"),o=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(o).concat([a]).join("\n")}return[e].join("\n")}},7394:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r},t.exports=e.default},8609:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){if(null==t)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in e=e||{})Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t},t.exports=e.default},6420:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,i.default)({},t)};var r,i=(r=n(8609))&&r.__esModule?r:{default:r};t.exports=e.default},7100:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=f(n(1603)),i=f(n(1354)),a=f(n(1370)),o=f(n(623)),u=f(n(6226)),c=f(n(7394)),s=f(n(2699));function f(t){return t&&t.__esModule?t:{default:t}}function l(t,e){var n=t>0?"-":"+",r=Math.abs(t),i=Math.floor(r/60),a=r%60;if(0===a)return n+String(i);var o=e||"";return n+String(i)+o+(0,c.default)(a,2)}function d(t,e){return t%60==0?(t>0?"-":"+")+(0,c.default)(Math.abs(t)/60,2):h(t,e)}function h(t,e){var n=e||"",r=t>0?"-":"+",i=Math.abs(t);return r+(0,c.default)(Math.floor(i/60),2)+n+(0,c.default)(i%60,2)}var v={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),i=r>0?r:1-r;return n.ordinalNumber(i,{unit:"year"})}return s.default.y(t,e)},Y:function(t,e,n,r){var i=(0,u.default)(t,r),a=i>0?i:1-i;if("YY"===e){var o=a%100;return(0,c.default)(o,2)}return"Yo"===e?n.ordinalNumber(a,{unit:"year"}):(0,c.default)(a,e.length)},R:function(t,e){var n=(0,a.default)(t);return(0,c.default)(n,e.length)},u:function(t,e){var n=t.getUTCFullYear();return(0,c.default)(n,e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return(0,c.default)(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return(0,c.default)(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return s.default.M(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return(0,c.default)(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){var i=(0,o.default)(t,r);return"wo"===e?n.ordinalNumber(i,{unit:"week"}):(0,c.default)(i,e.length)},I:function(t,e,n){var r=(0,i.default)(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):(0,c.default)(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):s.default.d(t,e)},D:function(t,e,n){var i=(0,r.default)(t);return"Do"===e?n.ordinalNumber(i,{unit:"dayOfYear"}):(0,c.default)(i,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var i=t.getUTCDay(),a=(i-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return(0,c.default)(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(i,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(i,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(i,{width:"short",context:"formatting"});default:return n.day(i,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var i=t.getUTCDay(),a=(i-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return(0,c.default)(a,e.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(i,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(i,{width:"narrow",context:"standalone"});case"cccccc":return n.day(i,{width:"short",context:"standalone"});default:return n.day(i,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),i=0===r?7:r;switch(e){case"i":return String(i);case"ii":return(0,c.default)(i,e.length);case"io":return n.ordinalNumber(i,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,i=t.getUTCHours();switch(r=12===i?"noon":0===i?"midnight":i/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,i=t.getUTCHours();switch(r=i>=17?"evening":i>=12?"afternoon":i>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return s.default.h(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):s.default.H(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):(0,c.default)(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):(0,c.default)(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):s.default.m(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):s.default.s(t,e)},S:function(t,e){return s.default.S(t,e)},X:function(t,e,n,r){var i=(r._originalDate||t).getTimezoneOffset();if(0===i)return"Z";switch(e){case"X":return d(i);case"XXXX":case"XX":return h(i);default:return h(i,":")}},x:function(t,e,n,r){var i=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return d(i);case"xxxx":case"xx":return h(i);default:return h(i,":")}},O:function(t,e,n,r){var i=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+l(i,":");default:return"GMT"+h(i,":")}},z:function(t,e,n,r){var i=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+l(i,":");default:return"GMT"+h(i,":")}},t:function(t,e,n,r){var i=r._originalDate||t,a=Math.floor(i.getTime()/1e3);return(0,c.default)(a,e.length)},T:function(t,e,n,r){var i=(r._originalDate||t).getTime();return(0,c.default)(i,e.length)}};e.default=v,t.exports=e.default},2699:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,i=(r=n(7394))&&r.__esModule?r:{default:r},a={y:function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return(0,i.default)("yy"===e?r%100:r,e.length)},M:function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):(0,i.default)(n+1,2)},d:function(t,e){return(0,i.default)(t.getUTCDate(),e.length)},a:function(t,e){var n=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:function(t,e){return(0,i.default)(t.getUTCHours()%12||12,e.length)},H:function(t,e){return(0,i.default)(t.getUTCHours(),e.length)},m:function(t,e){return(0,i.default)(t.getUTCMinutes(),e.length)},s:function(t,e){return(0,i.default)(t.getUTCSeconds(),e.length)},S:function(t,e){var n=e.length,r=t.getUTCMilliseconds(),a=Math.floor(r*Math.pow(10,n-3));return(0,i.default)(a,e.length)}};e.default=a,t.exports=e.default},5209:(t,e)=>{"use strict";function n(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}}function r(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i={p:r,P:function(t,e){var i,a=t.match(/(P+)(p+)?/)||[],o=a[1],u=a[2];if(!u)return n(t,e);switch(o){case"P":i=e.dateTime({width:"short"});break;case"PP":i=e.dateTime({width:"medium"});break;case"PPP":i=e.dateTime({width:"long"});break;default:i=e.dateTime({width:"full"})}return i.replace("{{date}}",n(o,e)).replace("{{time}}",r(u,e))}};e.default=i,t.exports=e.default},3561:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()},t.exports=e.default},1603:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){(0,i.default)(1,arguments);var e=(0,r.default)(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var a=e.getTime(),u=n-a;return Math.floor(u/o)+1};var r=a(n(1171)),i=a(n(8734));function a(t){return t&&t.__esModule?t:{default:t}}var o=864e5;t.exports=e.default},1354:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){(0,o.default)(1,arguments);var e=(0,r.default)(t),n=(0,i.default)(e).getTime()-(0,a.default)(e).getTime();return Math.round(n/c)+1};var r=u(n(1171)),i=u(n(79)),a=u(n(4275)),o=u(n(8734));function u(t){return t&&t.__esModule?t:{default:t}}var c=6048e5;t.exports=e.default},1370:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){(0,i.default)(1,arguments);var e=(0,r.default)(t),n=e.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(n+1,0,4),o.setUTCHours(0,0,0,0);var u=(0,a.default)(o),c=new Date(0);c.setUTCFullYear(n,0,4),c.setUTCHours(0,0,0,0);var s=(0,a.default)(c);return e.getTime()>=u.getTime()?n+1:e.getTime()>=s.getTime()?n:n-1};var r=o(n(1171)),i=o(n(8734)),a=o(n(79));function o(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default},623:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){(0,o.default)(1,arguments);var n=(0,r.default)(t),u=(0,i.default)(n,e).getTime()-(0,a.default)(n,e).getTime();return Math.round(u/c)+1};var r=u(n(1171)),i=u(n(9209)),a=u(n(4118)),o=u(n(8734));function u(t){return t&&t.__esModule?t:{default:t}}var c=6048e5;t.exports=e.default},6226:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){(0,i.default)(1,arguments);var n=(0,r.default)(t),u=n.getUTCFullYear(),c=e||{},s=c.locale,f=s&&s.options&&s.options.firstWeekContainsDate,l=null==f?1:(0,o.default)(f),d=null==c.firstWeekContainsDate?l:(0,o.default)(c.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=new Date(0);h.setUTCFullYear(u+1,0,d),h.setUTCHours(0,0,0,0);var v=(0,a.default)(h,e),p=new Date(0);p.setUTCFullYear(u,0,d),p.setUTCHours(0,0,0,0);var g=(0,a.default)(p,e);return n.getTime()>=v.getTime()?u+1:n.getTime()>=g.getTime()?u:u-1};var r=u(n(1171)),i=u(n(8734)),a=u(n(9209)),o=u(n(2084));function u(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default},6736:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.isProtectedDayOfYearToken=function(t){return-1!==n.indexOf(t)},e.isProtectedWeekYearToken=function(t){return-1!==r.indexOf(t)},e.throwProtectedError=function(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))};var n=["D","DD"],r=["YY","YYYY"]},8734:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")},t.exports=e.default},79:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){(0,i.default)(1,arguments);var e=1,n=(0,r.default)(t),a=n.getUTCDay(),o=(a<e?7:0)+a-e;return n.setUTCDate(n.getUTCDate()-o),n.setUTCHours(0,0,0,0),n};var r=a(n(1171)),i=a(n(8734));function a(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default},4275:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){(0,a.default)(1,arguments);var e=(0,r.default)(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var o=(0,i.default)(n);return o};var r=o(n(1370)),i=o(n(79)),a=o(n(8734));function o(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default},9209:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){(0,i.default)(1,arguments);var n=e||{},o=n.locale,u=o&&o.options&&o.options.weekStartsOn,c=null==u?0:(0,a.default)(u),s=null==n.weekStartsOn?c:(0,a.default)(n.weekStartsOn);if(!(s>=0&&s<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var f=(0,r.default)(t),l=f.getUTCDay(),d=(l<s?7:0)+l-s;return f.setUTCDate(f.getUTCDate()-d),f.setUTCHours(0,0,0,0),f};var r=o(n(1171)),i=o(n(8734)),a=o(n(2084));function o(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default},4118:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){(0,i.default)(1,arguments);var n=e||{},u=n.locale,c=u&&u.options&&u.options.firstWeekContainsDate,s=null==c?1:(0,o.default)(c),f=null==n.firstWeekContainsDate?s:(0,o.default)(n.firstWeekContainsDate),l=(0,r.default)(t,e),d=new Date(0);d.setUTCFullYear(l,0,f),d.setUTCHours(0,0,0,0);var h=(0,a.default)(d,e);return h};var r=u(n(6226)),i=u(n(8734)),a=u(n(9209)),o=u(n(2084));function u(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default},2084:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)},t.exports=e.default},5065:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){(0,a.default)(2,arguments);var n=(0,i.default)(t).getTime(),o=(0,r.default)(e);return new Date(n+o)};var r=o(n(2084)),i=o(n(1171)),a=o(n(8734));function o(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default},5616:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){(0,d.default)(2,arguments);var h=String(e),g=n||{},m=g.locale||i.default,b=m.options&&m.options.firstWeekContainsDate,A=null==b?1:(0,l.default)(b),x=null==g.firstWeekContainsDate?A:(0,l.default)(g.firstWeekContainsDate);if(!(x>=1&&x<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var S=m.options&&m.options.weekStartsOn,M=null==S?0:(0,l.default)(S),C=null==g.weekStartsOn?M:(0,l.default)(g.weekStartsOn);if(!(C>=0&&C<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!m.localize)throw new RangeError("locale must contain localize property");if(!m.formatLong)throw new RangeError("locale must contain formatLong property");var _=(0,o.default)(t);if(!(0,r.default)(_))throw new RangeError("Invalid time value");var T=(0,s.default)(_),I=(0,a.default)(_,T),P={firstWeekContainsDate:x,weekStartsOn:C,locale:m,_originalDate:_},E=h.match(p).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,c.default[e])(t,m.formatLong,P):t})).join("").match(v).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return w(n);var i=u.default[r];if(i)return!g.useAdditionalWeekYearTokens&&(0,f.isProtectedWeekYearToken)(n)&&(0,f.throwProtectedError)(n,e,t),!g.useAdditionalDayOfYearTokens&&(0,f.isProtectedDayOfYearToken)(n)&&(0,f.throwProtectedError)(n,e,t),i(I,n,m.localize,P);if(r.match(y))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("");return E};var r=h(n(9989)),i=h(n(2512)),a=h(n(3239)),o=h(n(1171)),u=h(n(7100)),c=h(n(5209)),s=h(n(3561)),f=n(6736),l=h(n(2084)),d=h(n(8734));function h(t){return t&&t.__esModule?t:{default:t}}var v=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,p=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,g=/^'([^]*?)'?$/,m=/''/g,y=/[a-zA-Z]/;function w(t){return t.match(g)[1].replace(m,"'")}t.exports=e.default},2382:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,i.default)(1,arguments),t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)};var r,i=(r=n(8734))&&r.__esModule?r:{default:r};t.exports=e.default},9989:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){if((0,a.default)(1,arguments),!(0,r.default)(t)&&"number"!=typeof t)return!1;var e=(0,i.default)(t);return!isNaN(Number(e))};var r=o(n(2382)),i=o(n(1171)),a=o(n(8734));function o(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default},289:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,r=t.formats[n]||t.formats[t.defaultWidth];return r}},t.exports=e.default},6245:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return function(e,n){var r,i=n||{};if("formatting"===(i.context?String(i.context):"standalone")&&t.formattingValues){var a=t.defaultFormattingWidth||t.defaultWidth,o=i.width?String(i.width):a;r=t.formattingValues[o]||t.formattingValues[a]}else{var u=t.defaultWidth,c=i.width?String(i.width):t.defaultWidth;r=t.values[c]||t.values[u]}return r[t.argumentCallback?t.argumentCallback(e):e]}},t.exports=e.default},3421:(t,e)=>{"use strict";function n(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function r(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return function(e){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=i.width,o=a&&t.matchPatterns[a]||t.matchPatterns[t.defaultMatchWidth],u=e.match(o);if(!u)return null;var c,s=u[0],f=a&&t.parsePatterns[a]||t.parsePatterns[t.defaultParseWidth],l=Array.isArray(f)?r(f,(function(t){return t.test(s)})):n(f,(function(t){return t.test(s)}));c=t.valueCallback?t.valueCallback(l):l,c=i.valueCallback?i.valueCallback(c):c;var d=e.slice(s.length);return{value:c,rest:d}}},t.exports=e.default},8926:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=e.match(t.matchPattern);if(!r)return null;var i=r[0],a=e.match(t.parsePattern);if(!a)return null;var o=t.valueCallback?t.valueCallback(a[0]):a[0];o=n.valueCallback?n.valueCallback(o):o;var u=e.slice(i.length);return{value:o,rest:u}}},t.exports=e.default},1924:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};e.default=function(t,e,r){var i,a=n[t];return i="string"==typeof a?a:1===e?a.one:a.other.replace("{{count}}",e.toString()),null!=r&&r.addSuffix?r.comparison&&r.comparison>0?"in "+i:i+" ago":i},t.exports=e.default},5062:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,i=(r=n(289))&&r.__esModule?r:{default:r},a={date:(0,i.default)({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:(0,i.default)({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:(0,i.default)({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};e.default=a,t.exports=e.default},5102:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};e.default=function(t,e,r,i){return n[t]},t.exports=e.default},7839:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,i=(r=n(6245))&&r.__esModule?r:{default:r},a={ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:(0,i.default)({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:(0,i.default)({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:(0,i.default)({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:(0,i.default)({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:(0,i.default)({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};e.default=a,t.exports=e.default},9796:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=i(n(3421));function i(t){return t&&t.__esModule?t:{default:t}}var a={ordinalNumber:(0,i(n(8926)).default)({matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}}),era:(0,r.default)({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:(0,r.default)({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:(0,r.default)({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:(0,r.default)({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:(0,r.default)({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};e.default=a,t.exports=e.default},2512:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=c(n(1924)),i=c(n(5062)),a=c(n(5102)),o=c(n(7839)),u=c(n(9796));function c(t){return t&&t.__esModule?t:{default:t}}var s={code:"en-US",formatDistance:r.default,formatLong:i.default,formatRelative:a.default,localize:o.default,match:u.default,options:{weekStartsOn:0,firstWeekContainsDate:1}};e.default=s,t.exports=e.default},3239:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){(0,a.default)(2,arguments);var n=(0,r.default)(e);return(0,i.default)(t,-n)};var r=o(n(2084)),i=o(n(5065)),a=o(n(8734));function o(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default},1171:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){(0,i.default)(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))};var r,i=(r=n(8734))&&r.__esModule?r:{default:r};t.exports=e.default},3379:t=>{"use strict";var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var a={},o=[],u=0;u<t.length;u++){var c=t[u],s=r.base?c[0]+r.base:c[0],f=a[s]||0,l="".concat(s," ").concat(f);a[s]=f+1;var d=n(l),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)e[d].references++,e[d].updater(h);else{var v=i(h,r);r.byIndex=u,e.splice(u,0,{identifier:l,updater:v,references:1})}o.push(l)}return o}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var a=r(t=t||[],i=i||{});return function(t){t=t||[];for(var o=0;o<a.length;o++){var u=n(a[o]);e[u].references--}for(var c=r(t,i),s=0;s<a.length;s++){var f=n(a[s]);0===e[f].references&&(e[f].updater(),e.splice(f,1))}a=c}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},9216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},3565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},7795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},4589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},5721:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n,r,i,a,o){var u=new Date(0);return u.setUTCFullYear(t,e,n),u.setUTCHours(r,i,a,o),u},t.exports=e.default},5855:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){var r=function(t,e,n){if(n&&!n.code)throw new Error("date-fns-tz error: Please set a language code on the locale object imported from date-fns, e.g. `locale.code = 'en-US'`");return new Intl.DateTimeFormat(n?[n.code,"en-US"]:void 0,{timeZone:e,timeZoneName:t})}(t,n.timeZone,n.locale);return r.formatToParts?function(t,e){var n=t.formatToParts(e);return n[n.length-1].value}(r,e):function(t,e){var n=t.format(e).replace(/\u200E/g,""),r=/ [\w-+ ]+$/.exec(n);return r?r[0].substr(1):""}(r,e)},t.exports=e.default},2734:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){var r,a,l;if(""===t)return 0;if(r=u.timezoneZ.exec(t))return 0;if(r=u.timezoneHH.exec(t))return s(l=parseInt(r[1],10))?-l*o:NaN;if(r=u.timezoneHHMM.exec(t)){l=parseInt(r[1],10);var d=parseInt(r[2],10);return s(l,d)?(a=Math.abs(l)*o+6e4*d,l>0?-a:a):NaN}if(function(t){if(f[t])return!0;try{return new Intl.DateTimeFormat(void 0,{timeZone:t}),f[t]=!0,!0}catch(t){return!1}}(t)){e=new Date(e||Date.now());var h=n?e:function(t){return(0,i.default)(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds())}(e),v=c(h,t),p=n?v:function(t,e,n){var r=t.getTime()-e,i=c(new Date(r),n);if(e===i)return e;r-=i-e;var a=c(new Date(r),n);return i===a?i:Math.max(i,a)}(e,v,t);return-p}return NaN};var r=a(n(2712)),i=a(n(5721));function a(t){return t&&t.__esModule?t:{default:t}}var o=36e5,u={timezone:/([Z+-].*)$/,timezoneZ:/^(Z)$/,timezoneHH:/^([+-]\d{2})$/,timezoneHHMM:/^([+-]\d{2}):?(\d{2})$/};function c(t,e){var n=(0,r.default)(t,e),a=(0,i.default)(n[0],n[1]-1,n[2],n[3]%24,n[4],n[5],0).getTime(),o=t.getTime(),u=o%1e3;return a-(o-(u>=0?u:1e3+u))}function s(t,e){return-23<=t&&t<=23&&(null==e||0<=e&&e<=59)}var f={};t.exports=e.default},7048:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;e.default=/(Z|[+-]\d{2}(?::?\d{2})?| UTC| [a-zA-Z]+\/[a-zA-Z_]+(?:\/[a-zA-Z_]+)?)$/,t.exports=e.default},2712:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){var i=function(t){if(!r[t]){var e=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:"America/New_York",year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit"}).format(new Date("2014-06-25T04:00:00.123Z")),n="06/25/2014, 00:00:00"===e||"‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00"===e;r[t]=n?new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:t,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit"}):new Intl.DateTimeFormat("en-US",{hourCycle:"h23",timeZone:t,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit"})}return r[t]}(e);return i.formatToParts?function(t,e){try{for(var r=t.formatToParts(e),i=[],a=0;a<r.length;a++){var o=n[r[a].type];o>=0&&(i[o]=parseInt(r[a].value,10))}return i}catch(t){if(t instanceof RangeError)return[NaN];throw t}}(i,t):function(t,e){var n=t.format(e).replace(/\u200E/g,""),r=/(\d+)\/(\d+)\/(\d+),? (\d+):(\d+):(\d+)/.exec(n);return[r[3],r[1],r[2],r[4],r[5],r[6]]}(i,t)};var n={year:0,month:1,day:2,hour:3,minute:4,second:5},r={};t.exports=e.default},3826:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=a(n(5855)),i=a(n(2734));function a(t){return t&&t.__esModule?t:{default:t}}function o(t,e){var n=t?(0,i.default)(t,e,!0)/6e4:e.getTimezoneOffset();if(Number.isNaN(n))throw new RangeError("Invalid time zone specified: "+t);return n}function u(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}function c(t,e){var n=e||"",r=t>0?"-":"+",i=Math.abs(t);return r+u(Math.floor(i/60),2)+n+u(Math.floor(i%60),2)}function s(t,e){return t%60==0?(t>0?"-":"+")+u(Math.abs(t)/60,2):c(t,e)}var f={X:function(t,e,n,r){var i=o(r.timeZone,r._originalDate||t);if(0===i)return"Z";switch(e){case"X":return s(i);case"XXXX":case"XX":return c(i);default:return c(i,":")}},x:function(t,e,n,r){var i=o(r.timeZone,r._originalDate||t);switch(e){case"x":return s(i);case"xxxx":case"xx":return c(i);default:return c(i,":")}},O:function(t,e,n,r){var i=o(r.timeZone,r._originalDate||t);switch(e){case"O":case"OO":case"OOO":return"GMT"+function(t,e){var n=t>0?"-":"+",r=Math.abs(t),i=Math.floor(r/60),a=r%60;if(0===a)return n+String(i);return n+String(i)+":"+u(a,2)}(i);default:return"GMT"+c(i,":")}},z:function(t,e,n,i){var a=i._originalDate||t;switch(e){case"z":case"zz":case"zzz":return(0,r.default)("short",a,i);default:return(0,r.default)("long",a,i)}}};e.default=f,t.exports=e.default},6558:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){var o=String(e),c=n||{},s=o.match(u);if(s){var f=(0,a.default)(t,c);o=s.reduce((function(t,e){if("'"===e[0])return t;var n=t.indexOf(e),r="'"===t[n-1],a=t.replace(e,"'"+i.default[e[0]](f,e,null,c)+"'");return r?a.substring(0,n-1)+a.substring(n+1):a}),o)}return(0,r.default)(t,o,c)};var r=o(n(5616)),i=o(n(3826)),a=o(n(1476));function o(t){return t&&t.__esModule?t:{default:t}}var u=/([xXOz]+)|''|'(''|[^'])+('|$)/g;t.exports=e.default},6645:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n,o){var u=(0,r.default)(o);return u.timeZone=e,(0,i.default)((0,a.default)(t,e),n,u)};var r=o(n(6420)),i=o(n(6558)),a=o(n(1132));function o(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default},4992:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){return-(0,i.default)(t,e)};var r,i=(r=n(2734))&&r.__esModule?r:{default:r};t.exports=e.default},722:(t,e,n)=>{"use strict";t.exports={format:n(6558),formatInTimeZone:n(6645),getTimezoneOffset:n(4992),toDate:n(1476),utcToZonedTime:n(1132),zonedTimeToUtc:n(8516)}},1476:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){if(arguments.length<1)throw new TypeError("1 argument required, but only "+arguments.length+" present");if(null===t)return new Date(NaN);var n=e||{},o=null==n.additionalDigits?2:(0,r.default)(n.additionalDigits);if(2!==o&&1!==o&&0!==o)throw new RangeError("additionalDigits must be 0, 1 or 2");if(t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t))return new Date(t.getTime());if("number"==typeof t||"[object Number]"===Object.prototype.toString.call(t))return new Date(t);if("string"!=typeof t&&"[object String]"!==Object.prototype.toString.call(t))return new Date(NaN);var u=f(t),c=l(u.date,o),s=c.year,v=c.restDateString,p=d(v,s);if(isNaN(p))return new Date(NaN);if(p){var g,m=p.getTime(),y=0;if(u.time&&(y=h(u.time),isNaN(y)))return new Date(NaN);if(u.timeZone||n.timeZone){if(g=(0,a.default)(u.timeZone||n.timeZone,new Date(m+y)),isNaN(g))return new Date(NaN)}else g=(0,i.default)(new Date(m+y)),g=(0,i.default)(new Date(m+y+g));return new Date(m+y+g)}return new Date(NaN)};var r=u(n(2084)),i=u(n(3561)),a=u(n(2734)),o=u(n(7048));function u(t){return t&&t.__esModule?t:{default:t}}var c=36e5,s={dateTimePattern:/^([0-9W+-]+)(T| )(.*)/,datePattern:/^([0-9W+-]+)(.*)/,plainTime:/:/,YY:/^(\d{2})$/,YYY:[/^([+-]\d{2})$/,/^([+-]\d{3})$/,/^([+-]\d{4})$/],YYYY:/^(\d{4})/,YYYYY:[/^([+-]\d{4})/,/^([+-]\d{5})/,/^([+-]\d{6})/],MM:/^-(\d{2})$/,DDD:/^-?(\d{3})$/,MMDD:/^-?(\d{2})-?(\d{2})$/,Www:/^-?W(\d{2})$/,WwwD:/^-?W(\d{2})-?(\d{1})$/,HH:/^(\d{2}([.,]\d*)?)$/,HHMM:/^(\d{2}):?(\d{2}([.,]\d*)?)$/,HHMMSS:/^(\d{2}):?(\d{2}):?(\d{2}([.,]\d*)?)$/,timeZone:o.default};function f(t){var e,n={},r=s.dateTimePattern.exec(t);if(r?(n.date=r[1],e=r[3]):(r=s.datePattern.exec(t))?(n.date=r[1],e=r[2]):(n.date=null,e=t),e){var i=s.timeZone.exec(e);i?(n.time=e.replace(i[1],""),n.timeZone=i[1].trim()):n.time=e}return n}function l(t,e){var n,r=s.YYY[e],i=s.YYYYY[e];if(n=s.YYYY.exec(t)||i.exec(t)){var a=n[1];return{year:parseInt(a,10),restDateString:t.slice(a.length)}}if(n=s.YY.exec(t)||r.exec(t)){var o=n[1];return{year:100*parseInt(o,10),restDateString:t.slice(o.length)}}return{year:null}}function d(t,e){if(null===e)return null;var n,r,i,a;if(0===t.length)return(r=new Date(0)).setUTCFullYear(e),r;if(n=s.MM.exec(t))return r=new Date(0),y(e,i=parseInt(n[1],10)-1)?(r.setUTCFullYear(e,i),r):new Date(NaN);if(n=s.DDD.exec(t)){r=new Date(0);var o=parseInt(n[1],10);return function(t,e){if(e<1)return!1;var n=m(t);return!(n&&e>366)&&!(!n&&e>365)}(e,o)?(r.setUTCFullYear(e,0,o),r):new Date(NaN)}if(n=s.MMDD.exec(t)){r=new Date(0),i=parseInt(n[1],10)-1;var u=parseInt(n[2],10);return y(e,i,u)?(r.setUTCFullYear(e,i,u),r):new Date(NaN)}if(n=s.Www.exec(t))return w(0,a=parseInt(n[1],10)-1)?v(e,a):new Date(NaN);if(n=s.WwwD.exec(t)){a=parseInt(n[1],10)-1;var c=parseInt(n[2],10)-1;return w(0,a,c)?v(e,a,c):new Date(NaN)}return null}function h(t){var e,n,r;if(e=s.HH.exec(t))return b(n=parseFloat(e[1].replace(",",".")))?n%24*c:NaN;if(e=s.HHMM.exec(t))return b(n=parseInt(e[1],10),r=parseFloat(e[2].replace(",",".")))?n%24*c+6e4*r:NaN;if(e=s.HHMMSS.exec(t)){n=parseInt(e[1],10),r=parseInt(e[2],10);var i=parseFloat(e[3].replace(",","."));return b(n,r,i)?n%24*c+6e4*r+1e3*i:NaN}return null}function v(t,e,n){e=e||0,n=n||0;var r=new Date(0);r.setUTCFullYear(t,0,4);var i=7*e+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+i),r}var p=[31,28,31,30,31,30,31,31,30,31,30,31],g=[31,29,31,30,31,30,31,31,30,31,30,31];function m(t){return t%400==0||t%4==0&&t%100!=0}function y(t,e,n){if(e<0||e>11)return!1;if(null!=n){if(n<1)return!1;var r=m(t);if(r&&n>g[e])return!1;if(!r&&n>p[e])return!1}return!0}function w(t,e,n){return!(e<0||e>52||null!=n&&(n<0||n>6))}function b(t,e,n){return!(null!=t&&(t<0||t>=25)||null!=e&&(e<0||e>=60)||null!=n&&(n<0||n>=60))}t.exports=e.default},1132:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){var a=(0,i.default)(t,n),o=(0,r.default)(e,a,!0),u=new Date(a.getTime()-o);return new Date(u.getUTCFullYear(),u.getUTCMonth(),u.getUTCDate(),u.getUTCHours(),u.getUTCMinutes(),u.getUTCSeconds(),u.getUTCMilliseconds())};var r=a(n(2734)),i=a(n(1476));function a(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default},8516:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){if("string"==typeof t&&!t.match(a.default)){var c=(0,r.default)(n);return c.timeZone=e,(0,i.default)(t,c)}var s=(0,i.default)(t,n),f=(0,u.default)(s.getFullYear(),s.getMonth(),s.getDate(),s.getHours(),s.getMinutes(),s.getSeconds(),s.getMilliseconds()).getTime(),l=(0,o.default)(e,new Date(f));return new Date(f+l)};var r=c(n(6420)),i=c(n(1476)),a=c(n(7048)),o=c(n(2734)),u=c(n(5721));function c(t){return t&&t.__esModule?t:{default:t}}t.exports=e.default}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var a=e[r]={id:r,exports:{}};return t[r].call(a.exports,a,a.exports,n),a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var r={};(()=>{"use strict";n.d(r,{vU:()=>ae,Tn:()=>ue,vE:()=>oe,R7:()=>Bt});var t=n(3379),e=n.n(t),i=n(7795),a=n.n(i),o=n(569),u=n.n(o),c=n(3565),s=n.n(c),f=n(9216),l=n.n(f),d=n(4589),h=n.n(d),v=n(5426),p={};function g(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function m(t){g(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function y(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function w(t){g(1,arguments);var e=y(t);return m(1e3*e)}function b(t){return g(1,arguments),t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)}function A(t){if(g(1,arguments),!b(t)&&"number"!=typeof t)return!1;var e=m(t);return!isNaN(Number(e))}p.styleTagTransform=h(),p.setAttributes=s(),p.insert=u().bind(null,"head"),p.domAPI=a(),p.insertStyleElement=l(),e()(v.Z,p),v.Z&&v.Z.locals&&v.Z.locals;var x={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function S(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,r=t.formats[n]||t.formats[t.defaultWidth];return r}}const M={date:S({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:S({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:S({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var C={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function _(t){return function(e,n){var r,i=n||{};if("formatting"===(i.context?String(i.context):"standalone")&&t.formattingValues){var a=t.defaultFormattingWidth||t.defaultWidth,o=i.width?String(i.width):a;r=t.formattingValues[o]||t.formattingValues[a]}else{var u=t.defaultWidth,c=i.width?String(i.width):t.defaultWidth;r=t.values[c]||t.values[u]}return r[t.argumentCallback?t.argumentCallback(e):e]}}const T={ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:_({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:_({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:_({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:_({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:_({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function I(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,i=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],a=e.match(i);if(!a)return null;var o,u=a[0],c=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],s=Array.isArray(c)?E(c,(function(t){return t.test(u)})):P(c,(function(t){return t.test(u)}));o=t.valueCallback?t.valueCallback(s):s,o=n.valueCallback?n.valueCallback(o):o;var f=e.slice(u.length);return{value:o,rest:f}}}function P(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function E(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}var k,O={ordinalNumber:(k={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(k.matchPattern);if(!n)return null;var r=n[0],i=t.match(k.parsePattern);if(!i)return null;var a=k.valueCallback?k.valueCallback(i[0]):i[0];a=e.valueCallback?e.valueCallback(a):a;var o=t.slice(r.length);return{value:a,rest:o}}),era:I({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:I({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:I({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:I({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:I({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const D={code:"en-US",formatDistance:function(t,e,n){var r,i=x[t];return r="string"==typeof i?i:1===e?i.one:i.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:M,formatRelative:function(t,e,n,r){return C[t]},localize:T,match:O,options:{weekStartsOn:0,firstWeekContainsDate:1}};function B(t,e){g(2,arguments);var n=m(t).getTime(),r=y(e);return new Date(n+r)}function j(t,e){g(2,arguments);var n=y(e);return B(t,-n)}var N=864e5;function F(t){g(1,arguments);var e=1,n=m(t),r=n.getUTCDay(),i=(r<e?7:0)+r-e;return n.setUTCDate(n.getUTCDate()-i),n.setUTCHours(0,0,0,0),n}function U(t){g(1,arguments);var e=m(t),n=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var i=F(r),a=new Date(0);a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0);var o=F(a);return e.getTime()>=i.getTime()?n+1:e.getTime()>=o.getTime()?n:n-1}function Y(t){g(1,arguments);var e=U(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var r=F(n);return r}var W=6048e5;function L(t,e){g(1,arguments);var n=e||{},r=n.locale,i=r&&r.options&&r.options.weekStartsOn,a=null==i?0:y(i),o=null==n.weekStartsOn?a:y(n.weekStartsOn);if(!(o>=0&&o<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=m(t),c=u.getUTCDay(),s=(c<o?7:0)+c-o;return u.setUTCDate(u.getUTCDate()-s),u.setUTCHours(0,0,0,0),u}function R(t,e){g(1,arguments);var n=m(t),r=n.getUTCFullYear(),i=e||{},a=i.locale,o=a&&a.options&&a.options.firstWeekContainsDate,u=null==o?1:y(o),c=null==i.firstWeekContainsDate?u:y(i.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var s=new Date(0);s.setUTCFullYear(r+1,0,c),s.setUTCHours(0,0,0,0);var f=L(s,e),l=new Date(0);l.setUTCFullYear(r,0,c),l.setUTCHours(0,0,0,0);var d=L(l,e);return n.getTime()>=f.getTime()?r+1:n.getTime()>=d.getTime()?r:r-1}function z(t,e){g(1,arguments);var n=e||{},r=n.locale,i=r&&r.options&&r.options.firstWeekContainsDate,a=null==i?1:y(i),o=null==n.firstWeekContainsDate?a:y(n.firstWeekContainsDate),u=R(t,e),c=new Date(0);c.setUTCFullYear(u,0,o),c.setUTCHours(0,0,0,0);var s=L(c,e);return s}var q=6048e5;function H(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}var G={y:function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return H("yy"===e?r%100:r,e.length)},M:function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):H(n+1,2)},d:function(t,e){return H(t.getUTCDate(),e.length)},a:function(t,e){var n=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:function(t,e){return H(t.getUTCHours()%12||12,e.length)},H:function(t,e){return H(t.getUTCHours(),e.length)},m:function(t,e){return H(t.getUTCMinutes(),e.length)},s:function(t,e){return H(t.getUTCSeconds(),e.length)},S:function(t,e){var n=e.length,r=t.getUTCMilliseconds();return H(Math.floor(r*Math.pow(10,n-3)),e.length)}};const Z=G;var X={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),i=r>0?r:1-r;return n.ordinalNumber(i,{unit:"year"})}return Z.y(t,e)},Y:function(t,e,n,r){var i=R(t,r),a=i>0?i:1-i;return"YY"===e?H(a%100,2):"Yo"===e?n.ordinalNumber(a,{unit:"year"}):H(a,e.length)},R:function(t,e){return H(U(t),e.length)},u:function(t,e){return H(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return H(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return H(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return Z.M(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return H(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){var i=function(t,e){g(1,arguments);var n=m(t),r=L(n,e).getTime()-z(n,e).getTime();return Math.round(r/q)+1}(t,r);return"wo"===e?n.ordinalNumber(i,{unit:"week"}):H(i,e.length)},I:function(t,e,n){var r=function(t){g(1,arguments);var e=m(t),n=F(e).getTime()-Y(e).getTime();return Math.round(n/W)+1}(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):H(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):Z.d(t,e)},D:function(t,e,n){var r=function(t){g(1,arguments);var e=m(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),i=n-r;return Math.floor(i/N)+1}(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):H(r,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var i=t.getUTCDay(),a=(i-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return H(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(i,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(i,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(i,{width:"short",context:"formatting"});default:return n.day(i,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var i=t.getUTCDay(),a=(i-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return H(a,e.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(i,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(i,{width:"narrow",context:"standalone"});case"cccccc":return n.day(i,{width:"short",context:"standalone"});default:return n.day(i,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),i=0===r?7:r;switch(e){case"i":return String(i);case"ii":return H(i,e.length);case"io":return n.ordinalNumber(i,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,i=t.getUTCHours();switch(r=12===i?"noon":0===i?"midnight":i/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,i=t.getUTCHours();switch(r=i>=17?"evening":i>=12?"afternoon":i>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return Z.h(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):Z.H(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):H(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):H(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):Z.m(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):Z.s(t,e)},S:function(t,e){return Z.S(t,e)},X:function(t,e,n,r){var i=(r._originalDate||t).getTimezoneOffset();if(0===i)return"Z";switch(e){case"X":return Q(i);case"XXXX":case"XX":return $(i);default:return $(i,":")}},x:function(t,e,n,r){var i=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return Q(i);case"xxxx":case"xx":return $(i);default:return $(i,":")}},O:function(t,e,n,r){var i=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+V(i,":");default:return"GMT"+$(i,":")}},z:function(t,e,n,r){var i=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+V(i,":");default:return"GMT"+$(i,":")}},t:function(t,e,n,r){var i=r._originalDate||t;return H(Math.floor(i.getTime()/1e3),e.length)},T:function(t,e,n,r){return H((r._originalDate||t).getTime(),e.length)}};function V(t,e){var n=t>0?"-":"+",r=Math.abs(t),i=Math.floor(r/60),a=r%60;if(0===a)return n+String(i);var o=e||"";return n+String(i)+o+H(a,2)}function Q(t,e){return t%60==0?(t>0?"-":"+")+H(Math.abs(t)/60,2):$(t,e)}function $(t,e){var n=e||"",r=t>0?"-":"+",i=Math.abs(t);return r+H(Math.floor(i/60),2)+n+H(i%60,2)}const J=X;function K(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}}function tt(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}}const et={p:tt,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],i=r[1],a=r[2];if(!a)return K(t,e);switch(i){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",K(i,e)).replace("{{time}}",tt(a,e))}};function nt(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var rt=["D","DD"],it=["YY","YYYY"];function at(t){return-1!==rt.indexOf(t)}function ot(t){return-1!==it.indexOf(t)}function ut(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var ct=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,st=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ft=/^'([^]*?)'?$/,lt=/''/g,dt=/[a-zA-Z]/;function ht(t,e,n){g(2,arguments);var r=String(e),i=n||{},a=i.locale||D,o=a.options&&a.options.firstWeekContainsDate,u=null==o?1:y(o),c=null==i.firstWeekContainsDate?u:y(i.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var s=a.options&&a.options.weekStartsOn,f=null==s?0:y(s),l=null==i.weekStartsOn?f:y(i.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!a.localize)throw new RangeError("locale must contain localize property");if(!a.formatLong)throw new RangeError("locale must contain formatLong property");var d=m(t);if(!A(d))throw new RangeError("Invalid time value");var h=nt(d),v=j(d,h),p={firstWeekContainsDate:c,weekStartsOn:l,locale:a,_originalDate:d},w=r.match(st).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,et[e])(t,a.formatLong,p):t})).join("").match(ct).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return vt(n);var o=J[r];if(o)return!i.useAdditionalWeekYearTokens&&ot(n)&&ut(n,e,t),!i.useAdditionalDayOfYearTokens&&at(n)&&ut(n,e,t),o(v,n,a.localize,p);if(r.match(dt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("");return w}function vt(t){return t.match(ft)[1].replace(lt,"'")}var pt=document.querySelector("#location"),gt=document.querySelector("#date"),mt=document.querySelector("#time"),yt=document.querySelector("form"),wt=document.querySelector("#search"),bt=(document.querySelector("button"),document.querySelector("img")),At=document.querySelector("#main-icon"),xt=document.querySelector("#temperature"),St=document.querySelector("#description"),Mt=document.querySelector("#wind"),Ct=document.querySelector("#feels-like"),_t=(document.querySelector("#humidity"),document.querySelector("#uv-index"),document.querySelector("#sunrise")),Tt=(document.querySelector("#pressure"),document.querySelector("#rain-title"),document.querySelector("#rain-value"),document.querySelector("#sunset")),It=document.querySelectorAll(".mode-button"),Pt=(document.querySelectorAll(".section-info-card"),document.querySelectorAll(".card-icon")),Et=document.querySelectorAll(".card-temp"),kt=document.querySelectorAll(".card-time"),Ot=document.querySelector("#right-button"),Dt=document.querySelector("#left-button");bt.addEventListener("click",(function(t){re(wt.value)})),yt.addEventListener("submit",(function(t){t.preventDefault(),re(wt.value)})),It.forEach((function(t){t.addEventListener("click",(function(e){t.classList.contains("active")||(It.forEach((function(t){t.classList.toggle("active")})),ue(),console.log(ae),ne(Bt,0))}))})),Dt.addEventListener("click",(function(t){switch(!0){case kt[0].textContent===Bt.hourlyForecast[8].dateAndTime:ne(Bt,0),Dt.classList.toggle("inactive");break;case kt[0].textContent===Bt.hourlyForecast[16].dateAndTime:ne(Bt,8),Ot.classList.toggle("inactive")}})),Ot.addEventListener("click",(function(t){switch(!0){case kt[0].textContent===Bt.hourlyForecast[0].dateAndTime:ne(Bt,8),Dt.classList.toggle("inactive");break;case kt[0].textContent===Bt.hourlyForecast[8].dateAndTime:ne(Bt,16),Ot.classList.toggle("inactive")}}));var Bt,jt=n(722);function Nt(t,e){g(2,arguments);var n=m(t),r=m(e);return n.getTime()>r.getTime()}function Ft(t,e){var n=w(t);return(0,jt.formatInTimeZone)(n,e,"yyyy-MM-dd HH:mm:ss")}function Ut(t,e){var n=w(t);return(0,jt.formatInTimeZone)(n,e,"EEEE, LLLL eo")}function Yt(t,e){var n=w(t);return(0,jt.formatInTimeZone)(n,e,"h a")}function Wt(t,e){var n=w(t);return(0,jt.formatInTimeZone)(n,e,"p")}function Lt(t,e,n){return Nt(n,t)&&Nt(t,e)}function Rt(t){switch(!0){case t>=0&&t<22.5||t>337.5&&t<360:t="N";break;case t>=22.5&&t<67.5:t="NE";break;case t>=67.5&&t<112.5:t="E";break;case t>=112.5&&t<157.5:t="SE";break;case t>=157.5&&t<202.5:t="S";break;case t>=202.5&&t<247.5:t="SW";break;case t>=247.5&&t<292.5:t="W";break;case t>=292.5&&t<337.5:t="NW"}return t}function zt(t,e){var n;switch(!0){case"Thunderstorm"===t.weather:n="../src/images/thunderstorm.png";break;case"Drizzle"===t.weather:n=Bt.isDaytime?"../src/images/day-rain.png":"../src/images/night-rain.jpg";break;case"Rain"===t.weather:n="../src/images/showers.png";break;case"Snow"===t.weather:n="../src/images/snow.png";break;case"Clear"===t.weather:n=t.isDaytime?"../src/images/sun.png":"../src/images/moon.png";break;case"Clouds"===t.weather:n="../src/images/cloud.png";break;default:n="../src/images/mist.png"}e.setAttribute("src",n)}function qt(t){return function(t){if(Array.isArray(t))return Zt(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||Gt(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ht(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,i,a=[],o=!0,u=!1;try{for(n=n.call(t);!(o=(r=n.next()).done)&&(a.push(r.value),!e||a.length!==e);o=!0);}catch(t){u=!0,i=t}finally{try{o||null==n.return||n.return()}finally{if(u)throw i}}return a}}(t,e)||Gt(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Gt(t,e){if(t){if("string"==typeof t)return Zt(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Zt(t,e):void 0}}function Zt(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Xt(t,e,n,r,i,a,o){try{var u=t[a](o),c=u.value}catch(t){return void n(t)}u.done?e(c):Promise.resolve(c).then(r,i)}function Vt(t){return function(){var e=this,n=arguments;return new Promise((function(r,i){var a=t.apply(e,n);function o(t){Xt(a,r,i,o,u,"next",t)}function u(t){Xt(a,r,i,o,u,"throw",t)}o(void 0)}))}}function Qt(t){return $t.apply(this,arguments)}function $t(){return($t=Vt(regeneratorRuntime.mark((function t(e){var n,r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,fetch("http://api.openweathermap.org/geo/1.0/direct?q=".concat(e,"&limit=1&appid=7a607fb85dc42ddc447af09a7ffec8fa"));case 3:return n=t.sent,t.next=6,n.json();case 6:return r=t.sent,t.abrupt("return",[r[0].lat,r[0].lon]);case 10:t.prev=10,t.t0=t.catch(0),console.error(t.t0),alert("Invalid city. Please try again.");case 14:case"end":return t.stop()}}),t,null,[[0,10]])})))).apply(this,arguments)}function Jt(t){return Kt.apply(this,arguments)}function Kt(){return(Kt=Vt(regeneratorRuntime.mark((function t(e){var n,r,i,a,o;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=Ht(e,2),r=n[0],i=n[1],t.prev=1,t.next=4,fetch("https://api.openweathermap.org/data/2.5/onecall?lat=".concat(r,"&lon=").concat(i,"&units=imperial&appid=7a607fb85dc42ddc447af09a7ffec8fa"));case 4:return a=t.sent,t.next=7,a.json();case 7:return o=t.sent,t.abrupt("return",o);case 11:t.prev=11,t.t0=t.catch(1),console.error(t.t0);case 14:case"end":return t.stop()}}),t,null,[[1,11]])})))).apply(this,arguments)}function te(t){for(var e=t.timezone,n={dateAndTime:Ft(t.current.dt,t.timezone),date:Ut(t.current.dt,t.timezone),time:Wt(t.current.dt,t.timezone),isDaytime:Lt(w(t.current.dt),w(t.daily[0].sunrise),w(t.daily[0].sunset)),sunrise:Ft(t.daily[0].sunrise,t.timezone),sunset:Ft(t.daily[0].sunset,t.timezone),temperature:"".concat(Math.round(t.current.temp),"°"),feelsLike:"Feels like ".concat(Math.round(t.current.feels_like),"°"),weather:t.current.weather[0].main,wind:"".concat(Math.round(t.current.wind_speed)," mph ").concat(Rt(t.current.wind_deg)),uvIndex:Math.round(t.current.uvi),humidity:"".concat(t.current.humidity,"%"),pressure:"".concat(t.current.pressure," inHg")},r=[],i=0;i<t.daily.length;i++)r[i]={dateAndTime:Ft(t.daily[i].dt,t.timezone),dailyHigh:"".concat(Math.round(t.daily[i].temp.max),"°"),dailyLow:"".concat(Math.round(t.daily[i].temp.min),"°"),isDaytime:!0,weather:t.daily[i].weather[0].main,wind:"".concat(Math.round(t.daily[i].wind_speed)," mph ").concat(Rt(t.daily[i].winc_deg)),uvIndex:Math.round(t.daily[i].uvi),humidity:"".concat(t.daily[i].humidity,"%"),sunrise:Ft(t.daily[i].sunrise,t.timezone),sunset:Ft(t.daily[i].sunset,t.timezone),rain:"".concat(t.daily[i].rain||0," in"),pressure:"".concat(t.daily[i].pressure," inHg")};for(var a=[],o=0;o<25;o++)a[o]={dateAndTime:Yt(t.hourly[o].dt,t.timezone),isDaytime:Lt(w(t.hourly[o].dt),w(t.daily[0].sunrise),w(t.daily[0].sunset)),weather:t.hourly[o].weather[0].main,temperature:"".concat(Math.round(t.hourly[o].temp),"°"),wind:"".concat(Math.round(t.hourly[o].wind_speed)," mph ").concat(Rt(t.hourly[o].wind_deg)),feelsLike:"Feels like ".concat(Math.round(t.hourly[o].feels_like),"°"),uvIndex:Math.round(t.hourly[o].uvi),humidity:"".concat(t.hourly[o].humidity,"%")};return{timezone:e,currentWeather:n,sevenDayForecast:r,hourlyForecast:a}}function ee(t,e){pt.textContent=t,gt.textContent=e.currentWeather.date,mt.textContent=e.currentWeather.time,xt.textContent=e.currentWeather.temperature,St.textContent=e.currentWeather.weather,Mt.textContent=e.currentWeather.wind,Ct.textContent=e.currentWeather.feelsLike,_t.textContent=ht(new Date(e.currentWeather.sunrise),"p"),Tt.textContent=ht(new Date(e.currentWeather.sunset),"p"),zt(e.currentWeather,At),function(t){var e;switch(t.weather){case"Thunderstorm":e="../src/images/thunderstorm-bg.jpg";break;case"Drizzle":case"Clouds":e="../src/images/rain-bg.jpg";break;case"Snow":e=t.isDaytime?"../src/images/snow-day-bg.jpg":"../src/images/snow-night-bg.jpg";break;case"Clear":e=t.isDaytime?"../src/images/clear-day.jpg":"../src/images/clear-night-bg.jpg";break;default:e="../src/images/mist-bg.jpg"}document.body.style.backgroundImage="url(".concat(e,")"),"../src/images/clear-night-bg.jpg"===e?(document.body.style.color="white",Dt.setAttribute("src","../src/images/left-arrow-white.png"),Ot.setAttribute("src","../src/images/right-arrow-white.png")):(document.body.style.color="black",Dt.setAttribute("src","../src/images/left-arrow.png"),Ot.setAttribute("src","../src/images/right-arrow.png"))}(e.currentWeather)}function ne(t,e){if(ae){for(var n=0;n<8;n++)zt(t.hourlyForecast[e],Pt[n]),Et[n].textContent=t.hourlyForecast[e].temperature,kt[n].textContent=t.hourlyForecast[e].dateAndTime,e++;Ot.classList.contains("inactive")&&Ot.classList.remove("inactive")}else{for(var r=0;r<8;r++)zt(t.sevenDayForecast[e],Pt[r]),Et[r].textContent="".concat(t.sevenDayForecast[e].dailyHigh," / ").concat(t.sevenDayForecast[e].dailyLow),kt[r].textContent=ht(new Date(t.sevenDayForecast[e].dateAndTime),"EEEE"),e++;Dt.classList.add("inactive"),Ot.classList.add("inactive")}}function re(t){return ie.apply(this,arguments)}function ie(){return(ie=Vt(regeneratorRuntime.mark((function t(e){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Qt(e);case 2:return n=t.sent,t.next=5,Jt(qt(n));case 5:oe(te(t.sent)),console.log(Bt),ee(e,Bt),ne(Bt,0);case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}n(6124);var ae=!0;function oe(t){return Bt=t}function ue(){ae=!ae}window.onload=function(){re("New York")}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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UixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxJQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFD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RCxHQUNFbmhELEdBQ0FnaUQsWUFGRixVQUVtQkQsRUFBUXVDLGlCQUFpQlUsR0FBY1QsVUFGMUQsY0FFeUV4QyxFQUFRdUMsaUJBQWlCVSxHQUFjUixVQUNoSHBELEdBQVVwaEQsR0FBR2dpRCxZQUFjalQsR0FDekIsSUFBSXBpQyxLQUFLbzFDLEVBQVF1QyxpQkFBaUJVLEdBQWM5QyxhQUNoRCxRQUVGOEMsSUFFRjFELEdBQVdJLFVBQVVqbkIsSUFBSSxZQUN6QjRtQixHQUFZSyxVQUFVam5CLElBQUksYSxTQUlmOG1CLEdBQVcsRyxvRkFBMUIsV0FBMEIwQixHQUExQixzR0FDcUJELEdBQVFDLEdBRDdCLGNBQ1FnQyxFQURSLGdCQUV1QnpCLEdBQWEsR0FBSXlCLElBRnhDLE9BR0VDLEdBQVd6QixHQUhiLFNBSUVudkIsUUFBUW5mLElBQUk0c0MsSUFDWjZDLEdBQW1CM0IsRUFBVWxCLElBQzdCRCxHQUFzQkMsR0FBUyxHQU5qQyw2QyxzQkEvS0FvRCxFQUFRLE1ITVIsSUFBSXRELElBQVcsRUFFZixTQUFTcUQsR0FBVzFyRCxHQUVsQixPQURBdW9ELEdBQVV2b0QsRUFJWixTQUFTb29ELEtBQ1BDLElBQVlBLEdBR2RqL0MsT0FBT3dpRCxPQUFTLFdBQ2Q3RCxHQUFXLGMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGUuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1udW1iZXItdmFsdWUuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZHZhbmNlLXN0cmluZy1pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1maWxsLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZnJvbS1pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktbWV0aG9kcy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXJlZHVjZS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXdlYWsuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy1pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYXR0ZW4taW50by1hcnJheS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Z1bmN0aW9uLXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW9iamVjdC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNhbGwuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1leHBtMS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1sb2cxcC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2NhbGUuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNpZ24uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWZvcmNlZC1wYW0uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1waWUuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qtc2FwLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXRvLWFycmF5LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWludC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9taXNlLXJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy1hYnN0cmFjdC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVwbGFjZXIuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zYW1lLXZhbHVlLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LWNvbGxlY3Rpb24tZnJvbS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLW9mLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWh0bWwuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcGFkLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXJlcGVhdC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy10cmltLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdGFzay5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWFycmF5LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYnVmZmVyLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191c2VyLWFnZW50LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdmFsaWRhdGUtY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZXZlcnkuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWxsLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5qb2luLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb21lLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbi5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hcC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYWNvc2guanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hdGFuaC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2x6MzIuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNvc2guanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5mcm91bmQuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmh5cG90LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpZ24uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpbmguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRydW5jLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtaW50LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHkuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lmhhcy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmV4ZWMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2guanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc2V0LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvci5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5iaWcuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3IuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcubGluay5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yYXcuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdWIuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLXNldC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdHRlbi5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXNhcC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmVycm9yLmlzLWVycm9yLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuZ2xvYmFsLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLmZyb20uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAub2YuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAudG8tanNvbi5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguY2xhbXAuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmRlZy1wZXItcmFkLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5kZWdyZWVzLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5mc2NhbGUuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pbXVsaC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaXN1YmguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnJhZC1wZXItZGVnLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5yYWRpYW5zLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5zY2FsZS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguc2lnbmJpdC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgudW11bGguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlci5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UudHJ5LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LmZyb20uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zZXQub2YuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zZXQudG8tanNvbi5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5hdC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5tYXRjaC1hbGwuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLW1hcC5mcm9tLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1tYXAub2YuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLXNldC5mcm9tLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1zZXQub2YuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5pbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9zaGltLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2Fzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2Nsb25lT2JqZWN0L2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL19saWIvZm9ybWF0L2Zvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9mb3JtYXQvbGlnaHRGb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2dldFVUQ0RheU9mWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2dldFVUQ1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL19saWIvc3RhcnRPZlVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL19saWIvc3RhcnRPZlVUQ1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9zdGFydE9mVVRDV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi90b0ludGVnZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2Zvcm1hdC9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9pc0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvaXNWYWxpZC9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0TG9uZy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4tVVMvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4tVVMvX2xpYi9tYXRjaC9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4tVVMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3RvRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zLXR6L19saWIvbmV3RGF0ZVVUQy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy10ei9fbGliL3R6SW50bFRpbWVab25lTmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy10ei9fbGliL3R6UGFyc2VUaW1lem9uZS9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy10ei9fbGliL3R6UGF0dGVybi9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy10ei9fbGliL3R6VG9rZW5pemVEYXRlL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zLXR6L2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zLXR6L2Zvcm1hdC9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy10ei9mb3JtYXRJblRpbWVab25lL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zLXR6L2dldFRpbWV6b25lT2Zmc2V0L2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zLXR6L2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zLXR6L3RvRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy10ei91dGNUb1pvbmVkVGltZS9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy10ei96b25lZFRpbWVUb1V0Yy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vc3JjL3N0eWxlLmNzcz83MTYzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vdG9EYXRlL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3RvSW50ZWdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZnJvbVVuaXhUaW1lL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzVmFsaWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0TG9uZy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbG9jYWxpemUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbWF0Y2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdWJNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENJU09XZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENJU09XZWVrL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbGlnaHRGb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZm9ybWF0L2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vc3JjL2pzL2RvbS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNBZnRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL3NyYy9qcy90cmFuc2xhdG9ycy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL3NyYy9qcy93ZWF0aGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9zaGltXCIpO1xuXG5yZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlXCIpO1xuXG5pZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIm9ubHkgb25lIGluc3RhbmNlIG9mIGJhYmVsLXBvbHlmaWxsIGlzIGFsbG93ZWRcIik7XG59XG5nbG9iYWwuX2JhYmVsUG9seWZpbGwgPSB0cnVlO1xuXG52YXIgREVGSU5FX1BST1BFUlRZID0gXCJkZWZpbmVQcm9wZXJ0eVwiO1xuZnVuY3Rpb24gZGVmaW5lKE8sIGtleSwgdmFsdWUpIHtcbiAgT1trZXldIHx8IE9iamVjdFtERUZJTkVfUFJPUEVSVFldKE8sIGtleSwge1xuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSk7XG59XG5cbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZExlZnRcIiwgXCJcIi5wYWRTdGFydCk7XG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRSaWdodFwiLCBcIlwiLnBhZEVuZCk7XG5cblwicG9wLHJldmVyc2Usc2hpZnQsa2V5cyx2YWx1ZXMsZW50cmllcyxpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzLGpvaW4sc2xpY2UsY29uY2F0LHB1c2gsc3BsaWNlLHVuc2hpZnQsc29ydCxsYXN0SW5kZXhPZixyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsXCIuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBbXVtrZXldICYmIGRlZmluZShBcnJheSwga2V5LCBGdW5jdGlvbi5jYWxsLmJpbmQoW11ba2V5XSkpO1xufSk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9tYXN0ZXIvTElDRU5TRSBmaWxlLiBBblxuICogYWRkaXRpb25hbCBncmFudCBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluXG4gKiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuIShmdW5jdGlvbihnbG9iYWwpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiO1xuICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIGlmIChydW50aW1lKSB7XG4gICAgaWYgKGluTW9kdWxlKSB7XG4gICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsXG4gICAgICAvLyBtYWtlIHRoZSBleHBvcnRzIG9iamVjdCBpZGVudGljYWwgdG8gcmVnZW5lcmF0b3JSdW50aW1lLlxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBydW50aW1lO1xuICAgIH1cbiAgICAvLyBEb24ndCBib3RoZXIgZXZhbHVhdGluZyB0aGUgcmVzdCBvZiB0aGlzIGZpbGUgaWYgdGhlIHJ1bnRpbWUgd2FzXG4gICAgLy8gYWxyZWFkeSBkZWZpbmVkIGdsb2JhbGx5LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlclxuICAvLyBtb2R1bGUuZXhwb3J0cyAoaWYgd2UncmUgaW4gYSBtb2R1bGUpIG9yIGEgbmV3LCBlbXB0eSBvYmplY3QuXG4gIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gaW5Nb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA6IHt9O1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIHJ1bnRpbWUud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgcnVudGltZS5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIHJ1bnRpbWUuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLiBJZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgaG93ZXZlciwgdGhlXG4gICAgICAgICAgLy8gcmVzdWx0IGZvciB0aGlzIGl0ZXJhdGlvbiB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHNhbWVcbiAgICAgICAgICAvLyByZWFzb24uIE5vdGUgdGhhdCByZWplY3Rpb25zIG9mIHlpZWxkZWQgUHJvbWlzZXMgYXJlIG5vdFxuICAgICAgICAgIC8vIHRocm93biBiYWNrIGludG8gdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgYXMgaXMgdGhlIGNhc2VcbiAgICAgICAgICAvLyB3aGVuIGFuIGF3YWl0ZWQgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpcyBkaWZmZXJlbmNlIGluXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYmV0d2VlbiB5aWVsZCBhbmQgYXdhaXQgaXMgaW1wb3J0YW50LCBiZWNhdXNlIGl0XG4gICAgICAgICAgLy8gYWxsb3dzIHRoZSBjb25zdW1lciB0byBkZWNpZGUgd2hhdCB0byBkbyB3aXRoIHRoZSB5aWVsZGVkXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIChzd2FsbG93IGl0IGFuZCBjb250aW51ZSwgbWFudWFsbHkgLnRocm93IGl0IGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBnZW5lcmF0b3IsIGFiYW5kb24gaXRlcmF0aW9uLCB3aGF0ZXZlcikuIFdpdGhcbiAgICAgICAgICAvLyBhd2FpdCwgYnkgY29udHJhc3QsIHRoZXJlIGlzIG5vIG9wcG9ydHVuaXR5IHRvIGV4YW1pbmUgdGhlXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIHJlYXNvbiBvdXRzaWRlIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIHNvIHRoZVxuICAgICAgICAgIC8vIG9ubHkgb3B0aW9uIGlzIHRvIHRocm93IGl0IGZyb20gdGhlIGF3YWl0IGV4cHJlc3Npb24sIGFuZFxuICAgICAgICAgIC8vIGxldCB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhbmRsZSB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwucHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiBnbG9iYWwucHJvY2Vzcy5kb21haW4pIHtcbiAgICAgIGludm9rZSA9IGdsb2JhbC5wcm9jZXNzLmRvbWFpbi5iaW5kKGludm9rZSk7XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcnVudGltZS5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0pKFxuICAvLyBBbW9uZyB0aGUgdmFyaW91cyB0cmlja3MgZm9yIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsXG4gIC8vIG9iamVjdCwgdGhpcyBzZWVtcyB0byBiZSB0aGUgbW9zdCByZWxpYWJsZSB0ZWNobmlxdWUgdGhhdCBkb2VzIG5vdFxuICAvLyB1c2UgaW5kaXJlY3QgZXZhbCAod2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kpLlxuICB0eXBlb2YgZ2xvYmFsID09PSBcIm9iamVjdFwiID8gZ2xvYmFsIDpcbiAgdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiA/IHdpbmRvdyA6XG4gIHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiID8gc2VsZiA6IHRoaXNcbik7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuUmVnRXhwLmVzY2FwZTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBtc2cpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnbnVtYmVyJyAmJiBjb2YoaXQpICE9ICdOdW1iZXInKSB0aHJvdyBUeXBlRXJyb3IobXNnKTtcbiAgcmV0dXJuICtpdDtcbn07XG4iLCIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuaWYgKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkgcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbiAvLyBgQWR2YW5jZVN0cmluZ0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBhdChTLCBpbmRleCkubGVuZ3RoIDogMSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciB0byA9IHRvQWJzb2x1dGVJbmRleCh0YXJnZXQsIGxlbik7XG4gIHZhciBmcm9tID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICB2YXIgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpO1xuICB2YXIgZW5kID0gYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlciwgSVRFUkFUT1IpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3JPZihpdGVyLCBmYWxzZSwgcmVzdWx0LnB1c2gsIHJlc3VsdCwgSVRFUkFUT1IpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwiLy8gMCAtPiBBcnJheSNmb3JFYWNoXG4vLyAxIC0+IEFycmF5I21hcFxuLy8gMiAtPiBBcnJheSNmaWx0ZXJcbi8vIDMgLT4gQXJyYXkjc29tZVxuLy8gNCAtPiBBcnJheSNldmVyeVxuLy8gNSAtPiBBcnJheSNmaW5kXG4vLyA2IC0+IEFycmF5I2ZpbmRJbmRleFxudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFzYyA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUWVBFLCAkY3JlYXRlKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgdmFyIGNyZWF0ZSA9ICRjcmVhdGUgfHwgYXNjO1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsLCByZXM7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWwgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlcyA9IGYodmFsLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSByZXN1bHRbaW5kZXhdID0gcmVzOyAgIC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXMpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWw7ICAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiByZXN1bHQucHVzaCh2YWwpOyAgICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZiAoSVNfRVZFUlkpIHJldHVybiBmYWxzZTsgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHJlc3VsdDtcbiAgfTtcbn07XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBjYWxsYmFja2ZuLCBhTGVuLCBtZW1vLCBpc1JpZ2h0KSB7XG4gIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGF0KTtcbiAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgaW5kZXggPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDA7XG4gIHZhciBpID0gaXNSaWdodCA/IC0xIDogMTtcbiAgaWYgKGFMZW4gPCAyKSBmb3IgKDs7KSB7XG4gICAgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaW5kZXggKz0gaTtcbiAgICBpZiAoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgfVxuICB9XG4gIGZvciAoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgfVxuICByZXR1cm4gbWVtbztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsKSkge1xuICAgIEMgPSBvcmlnaW5hbC5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xufTtcbiIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsLCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xudmFyIGZhY3RvcmllcyA9IHt9O1xuXG52YXIgY29uc3RydWN0ID0gZnVuY3Rpb24gKEYsIGxlbiwgYXJncykge1xuICBpZiAoIShsZW4gaW4gZmFjdG9yaWVzKSkge1xuICAgIGZvciAodmFyIG4gPSBbXSwgaSA9IDA7IGkgPCBsZW47IGkrKykgbltpXSA9ICdhWycgKyBpICsgJ10nO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgIGZhY3Rvcmllc1tsZW5dID0gRnVuY3Rpb24oJ0YsYScsICdyZXR1cm4gbmV3IEYoJyArIG4uam9pbignLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2xlbl0oRiwgYXJncyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xuICB2YXIgZm4gPSBhRnVuY3Rpb24odGhpcyk7XG4gIHZhciBwYXJ0QXJncyA9IGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmQgPSBmdW5jdGlvbiAoLyogYXJncy4uLiAqLykge1xuICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kID8gY29uc3RydWN0KGZuLCBhcmdzLmxlbmd0aCwgYXJncykgOiBpbnZva2UoZm4sIGFyZ3MsIHRoYXQpO1xuICB9O1xuICBpZiAoaXNPYmplY3QoZm4ucHJvdG90eXBlKSkgYm91bmQucHJvdG90eXBlID0gZm4ucHJvdG90eXBlO1xuICByZXR1cm4gYm91bmQ7XG59O1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGZhc3RLZXkgPSByZXF1aXJlKCcuL19tZXRhJykuZmFzdEtleTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTSVpFID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnO1xuXG52YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XG4gIC8vIGZhc3QgY2FzZVxuICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7XG4gIHZhciBlbnRyeTtcbiAgaWYgKGluZGV4ICE9PSAnRicpIHJldHVybiB0aGF0Ll9pW2luZGV4XTtcbiAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gIGZvciAoZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgaWYgKGVudHJ5LmsgPT0ga2V5KSByZXR1cm4gZW50cnk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gY3JlYXRlKG51bGwpOyAvLyBpbmRleFxuICAgICAgdGhhdC5fZiA9IHVuZGVmaW5lZDsgICAgLy8gZmlyc3QgZW50cnlcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnlcbiAgICAgIHRoYXRbU0laRV0gPSAwOyAgICAgICAgIC8vIHNpemVcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhcigpXG4gICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgZm9yICh2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBkYXRhID0gdGhhdC5faSwgZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKGVudHJ5LnApIGVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoYXRbU0laRV0gPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uO1xuICAgICAgICAgIHZhciBwcmV2ID0gZW50cnkucDtcbiAgICAgICAgICBkZWxldGUgdGhhdC5faVtlbnRyeS5pXTtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocHJldikgcHJldi5uID0gbmV4dDtcbiAgICAgICAgICBpZiAobmV4dCkgbmV4dC5wID0gcHJldjtcbiAgICAgICAgICBpZiAodGhhdC5fZiA9PSBlbnRyeSkgdGhhdC5fZiA9IG5leHQ7XG4gICAgICAgICAgaWYgKHRoYXQuX2wgPT0gZW50cnkpIHRoYXQuX2wgPSBwcmV2O1xuICAgICAgICAgIHRoYXRbU0laRV0tLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4yLjMuNiBTZXQucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgICAgICB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgICAgICB2YXIgZW50cnk7XG4gICAgICAgIHdoaWxlIChlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoaXMuX2YpIHtcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuNyBNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy4yLjMuNyBTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSwga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGUodGhpcywgTkFNRSlbU0laRV07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgIHZhciBwcmV2LCBpbmRleDtcbiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGVudHJ5LnYgPSB2YWx1ZTtcbiAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoYXQuX2wgPSBlbnRyeSA9IHtcbiAgICAgICAgaTogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksIC8vIDwtIGluZGV4XG4gICAgICAgIGs6IGtleSwgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBrZXlcbiAgICAgICAgdjogdmFsdWUsICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHZhbHVlXG4gICAgICAgIHA6IHByZXYgPSB0aGF0Ll9sLCAgICAgICAgICAgICAvLyA8LSBwcmV2aW91cyBlbnRyeVxuICAgICAgICBuOiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgLy8gPC0gbmV4dCBlbnRyeVxuICAgICAgICByOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gcmVtb3ZlZFxuICAgICAgfTtcbiAgICAgIGlmICghdGhhdC5fZikgdGhhdC5fZiA9IGVudHJ5O1xuICAgICAgaWYgKHByZXYpIHByZXYubiA9IGVudHJ5O1xuICAgICAgdGhhdFtTSVpFXSsrO1xuICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgdGhhdC5faVtpbmRleF0gPSBlbnRyeTtcbiAgICB9IHJldHVybiB0aGF0O1xuICB9LFxuICBnZXRFbnRyeTogZ2V0RW50cnksXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gKEMsIE5BTUUsIElTX01BUCkge1xuICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgICAkaXRlckRlZmluZShDLCBOQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICAgIHRoaXMuX3QgPSB2YWxpZGF0ZShpdGVyYXRlZCwgTkFNRSk7IC8vIHRhcmdldFxuICAgICAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgICAgICAgICAgICAgICAgLy8gcHJldmlvdXNcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIga2luZCA9IHRoYXQuX2s7XG4gICAgICB2YXIgZW50cnkgPSB0aGF0Ll9sO1xuICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmICghdGhhdC5fdCB8fCAhKHRoYXQuX2wgPSBlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoYXQuX3QuX2YpKSB7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHRoYXQuX3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBzdGVwKDEpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS5rKTtcbiAgICAgIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS52KTtcbiAgICAgIHJldHVybiBzdGVwKDAsIFtlbnRyeS5rLCBlbnRyeS52XSk7XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYWRkIFtAQHNwZWNpZXNdLCAyMy4xLjIuMiwgMjMuMi4yLjJcbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuICB9XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4vX2FycmF5LWZyb20taXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICBpZiAoY2xhc3NvZih0aGlzKSAhPSBOQU1FKSB0aHJvdyBUeXBlRXJyb3IoTkFNRSArIFwiI3RvSlNPTiBpc24ndCBnZW5lcmljXCIpO1xuICAgIHJldHVybiBmcm9tKHRoaXMpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGdldFdlYWsgPSByZXF1aXJlKCcuL19tZXRhJykuZ2V0V2VhaztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcbnZhciAkaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG52YXIgYXJyYXlGaW5kSW5kZXggPSBjcmVhdGVBcnJheU1ldGhvZCg2KTtcbnZhciBpZCA9IDA7XG5cbi8vIGZhbGxiYWNrIGZvciB1bmNhdWdodCBmcm96ZW4ga2V5c1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAodGhhdCkge1xuICByZXR1cm4gdGhhdC5fbCB8fCAodGhhdC5fbCA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKCkpO1xufTtcbnZhciBVbmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmEgPSBbXTtcbn07XG52YXIgZmluZFVuY2F1Z2h0RnJvemVuID0gZnVuY3Rpb24gKHN0b3JlLCBrZXkpIHtcbiAgcmV0dXJuIGFycmF5RmluZChzdG9yZS5hLCBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgfSk7XG59O1xuVW5jYXVnaHRGcm96ZW5TdG9yZS5wcm90b3R5cGUgPSB7XG4gIGdldDogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgcmV0dXJuIGVudHJ5WzFdO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gISFmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgZW50cnlbMV0gPSB2YWx1ZTtcbiAgICBlbHNlIHRoaXMuYS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0sXG4gICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGluZGV4ID0gYXJyYXlGaW5kSW5kZXgodGhpcy5hLCBmdW5jdGlvbiAoaXQpIHtcbiAgICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICAgIH0pO1xuICAgIGlmICh+aW5kZXgpIHRoaXMuYS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiAhIX5pbmRleDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBpZCsrOyAgICAgIC8vIGNvbGxlY3Rpb24gaWRcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7IC8vIGxlYWsgc3RvcmUgZm9yIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RzXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjMuMy4yIFdlYWtNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy40LjMuMyBXZWFrU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSkgJiYgZGVsZXRlIGRhdGFbdGhpcy5faV07XG4gICAgICB9LFxuICAgICAgLy8gMjMuMy4zLjQgV2Vha01hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjQuMy40IFdlYWtTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSkuaGFzKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZGF0YSA9IGdldFdlYWsoYW5PYmplY3Qoa2V5KSwgdHJ1ZSk7XG4gICAgaWYgKGRhdGEgPT09IHRydWUpIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhhdCkuc2V0KGtleSwgdmFsdWUpO1xuICAgIGVsc2UgZGF0YVt0aGF0Ll9pXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGF0O1xuICB9LFxuICB1ZnN0b3JlOiB1bmNhdWdodEZyb3plblN0b3JlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspIHtcbiAgdmFyIEJhc2UgPSBnbG9iYWxbTkFNRV07XG4gIHZhciBDID0gQmFzZTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZTtcbiAgdmFyIE8gPSB7fTtcbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgZm4gPSBwcm90b1tLRVldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBLRVksXG4gICAgICBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfVxuICAgICAgICA6IGZ1bmN0aW9uIHNldChhLCBiKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTsgcmV0dXJuIHRoaXM7IH1cbiAgICApO1xuICB9O1xuICBpZiAodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2U7XG4gICAgLy8gVjggfiAgQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICB2YXIgQUNDRVBUX0lURVJBQkxFUyA9ICRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7IG5ldyBDKGl0ZXIpOyB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICB2YXIgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgICB2YXIgaW5kZXggPSA1O1xuICAgICAgd2hpbGUgKGluZGV4LS0pICRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgfSk7XG4gICAgaWYgKCFBQ0NFUFRfSVRFUkFCTEVTKSB7XG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbiAodGFyZ2V0LCBpdGVyYWJsZSkge1xuICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UoKSwgdGFyZ2V0LCBDKTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKSBmaXhNZXRob2QoQURERVIpO1xuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYgKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpIGRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcblxuICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQztcbn07XG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi42LjEyJyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGluZGV4LCB2YWx1ZSkge1xuICBpZiAoaW5kZXggaW4gb2JqZWN0KSAkZGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGluZGV4LCBjcmVhdGVEZXNjKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W2luZGV4XSA9IHZhbHVlO1xufTtcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdldFRpbWUgPSBEYXRlLnByb3RvdHlwZS5nZXRUaW1lO1xudmFyICR0b0lTT1N0cmluZyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nO1xuXG52YXIgbHogPSBmdW5jdGlvbiAobnVtKSB7XG4gIHJldHVybiBudW0gPiA5ID8gbnVtIDogJzAnICsgbnVtO1xufTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG5tb2R1bGUuZXhwb3J0cyA9IChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZSgtNWUxMyAtIDEpKSAhPSAnMDM4NS0wNy0yNVQwNzowNjozOS45OTlaJztcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKE5hTikpO1xufSkpID8gZnVuY3Rpb24gdG9JU09TdHJpbmcoKSB7XG4gIGlmICghaXNGaW5pdGUoZ2V0VGltZS5jYWxsKHRoaXMpKSkgdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIHZhciBkID0gdGhpcztcbiAgdmFyIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBtID0gZC5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgdmFyIHMgPSB5IDwgMCA/ICctJyA6IHkgPiA5OTk5ID8gJysnIDogJyc7XG4gIHJldHVybiBzICsgKCcwMDAwMCcgKyBNYXRoLmFicyh5KSkuc2xpY2UocyA/IC02IDogLTQpICtcbiAgICAnLScgKyBseihkLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArIGx6KGQuZ2V0VVRDRGF0ZSgpKSArXG4gICAgJ1QnICsgbHooZC5nZXRVVENIb3VycygpKSArICc6JyArIGx6KGQuZ2V0VVRDTWludXRlcygpKSArXG4gICAgJzonICsgbHooZC5nZXRVVENTZWNvbmRzKCkpICsgJy4nICsgKG0gPiA5OSA/IG0gOiAnMCcgKyBseihtKSkgKyAnWic7XG59IDogJHRvSVNPU3RyaW5nO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBOVU1CRVIgPSAnbnVtYmVyJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaGludCkge1xuICBpZiAoaGludCAhPT0gJ3N0cmluZycgJiYgaGludCAhPT0gTlVNQkVSICYmIGhpbnQgIT09ICdkZWZhdWx0JykgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpO1xuICByZXR1cm4gdG9QcmltaXRpdmUoYW5PYmplY3QodGhpcyksIGhpbnQgIT0gTlVNQkVSKTtcbn07XG4iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYgKHRhcmdldCkgcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYgKGV4cG9ydHNba2V5XSAhPSBvdXQpIGhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsInZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIHRydWU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9lczYucmVnZXhwLmV4ZWMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcblxudmFyIFNQRUNJRVMgPSB3a3MoJ3NwZWNpZXMnKTtcblxudmFyIFJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gI3JlcGxhY2UgbmVlZHMgYnVpbHQtaW4gc3VwcG9ydCBmb3IgbmFtZWQgZ3JvdXBzLlxuICAvLyAjbWF0Y2ggd29ya3MgZmluZSBiZWNhdXNlIGl0IGp1c3QgcmV0dXJuIHRoZSBleGVjIHJlc3VsdHMsIGV2ZW4gaWYgaXQgaGFzXG4gIC8vIGEgXCJncm9wc1wiIHByb3BlcnR5LlxuICB2YXIgcmUgPSAvLi87XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHJlc3VsdC5ncm91cHMgPSB7IGE6ICc3JyB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHJldHVybiAnJy5yZXBsYWNlKHJlLCAnJDxhPicpICE9PSAnNyc7XG59KTtcblxudmFyIFNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyA9IChmdW5jdGlvbiAoKSB7XG4gIC8vIENocm9tZSA1MSBoYXMgYSBidWdneSBcInNwbGl0XCIgaW1wbGVtZW50YXRpb24gd2hlbiBSZWdFeHAjZXhlYyAhPT0gbmF0aXZlRXhlY1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPT09IDIgJiYgcmVzdWx0WzBdID09PSAnYScgJiYgcmVzdWx0WzFdID09PSAnYic7XG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGxlbmd0aCwgZXhlYykge1xuICB2YXIgU1lNQk9MID0gd2tzKEtFWSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19TWU1CT0wgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN0cmluZyBtZXRob2RzIGNhbGwgc3ltYm9sLW5hbWVkIFJlZ0VwIG1ldGhvZHNcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19FWEVDID0gREVMRUdBVEVTX1RPX1NZTUJPTCA/ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3ltYm9sLW5hbWVkIFJlZ0V4cCBtZXRob2RzIGNhbGwgLmV4ZWNcbiAgICB2YXIgZXhlY0NhbGxlZCA9IGZhbHNlO1xuICAgIHZhciByZSA9IC9hLztcbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgIH1cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pIDogdW5kZWZpbmVkO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIChLRVkgPT09ICdyZXBsYWNlJyAmJiAhUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMpIHx8XG4gICAgKEtFWSA9PT0gJ3NwbGl0JyAmJiAhU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDKVxuICApIHtcbiAgICB2YXIgbmF0aXZlUmVnRXhwTWV0aG9kID0gLy4vW1NZTUJPTF07XG4gICAgdmFyIGZucyA9IGV4ZWMoXG4gICAgICBkZWZpbmVkLFxuICAgICAgU1lNQk9MLFxuICAgICAgJydbS0VZXSxcbiAgICAgIGZ1bmN0aW9uIG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVNZXRob2QsIHJlZ2V4cCwgc3RyLCBhcmcyLCBmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICBpZiAocmVnZXhwLmV4ZWMgPT09IHJlZ2V4cEV4ZWMpIHtcbiAgICAgICAgICBpZiAoREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgICAgIC8vIFRoZSBuYXRpdmUgU3RyaW5nIG1ldGhvZCBhbHJlYWR5IGRlbGVnYXRlcyB0byBAQG1ldGhvZCAodGhpc1xuICAgICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgICAgLy8gV2UgYXZvaWQgaXQgYnkgZGlyZWN0bHkgY2FsbGluZyB0aGUgbmF0aXZlIEBAbWV0aG9kIG1ldGhvZC5cbiAgICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVSZWdFeHBNZXRob2QuY2FsbChyZWdleHAsIHN0ciwgYXJnMikgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZU1ldGhvZC5jYWxsKHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlIH07XG4gICAgICB9XG4gICAgKTtcbiAgICB2YXIgc3RyZm4gPSBmbnNbMF07XG4gICAgdmFyIHJ4Zm4gPSBmbnNbMV07XG5cbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmZuKTtcbiAgICBoaWRlKFJlZ0V4cC5wcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDJcbiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSlcbiAgICAgIC8vIDIxLjIuNS4xMSBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdKHN0cmluZywgbGltaXQpXG4gICAgICA/IGZ1bmN0aW9uIChzdHJpbmcsIGFyZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcywgYXJnKTsgfVxuICAgICAgLy8gMjEuMi41LjYgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXShzdHJpbmcpXG4gICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpXG4gICAgICA6IGZ1bmN0aW9uIChzdHJpbmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcblxuZnVuY3Rpb24gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBzb3VyY2UsIHNvdXJjZUxlbiwgc3RhcnQsIGRlcHRoLCBtYXBwZXIsIHRoaXNBcmcpIHtcbiAgdmFyIHRhcmdldEluZGV4ID0gc3RhcnQ7XG4gIHZhciBzb3VyY2VJbmRleCA9IDA7XG4gIHZhciBtYXBGbiA9IG1hcHBlciA/IGN0eChtYXBwZXIsIHRoaXNBcmcsIDMpIDogZmFsc2U7XG4gIHZhciBlbGVtZW50LCBzcHJlYWRhYmxlO1xuXG4gIHdoaWxlIChzb3VyY2VJbmRleCA8IHNvdXJjZUxlbikge1xuICAgIGlmIChzb3VyY2VJbmRleCBpbiBzb3VyY2UpIHtcbiAgICAgIGVsZW1lbnQgPSBtYXBGbiA/IG1hcEZuKHNvdXJjZVtzb3VyY2VJbmRleF0sIHNvdXJjZUluZGV4LCBvcmlnaW5hbCkgOiBzb3VyY2Vbc291cmNlSW5kZXhdO1xuXG4gICAgICBzcHJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoaXNPYmplY3QoZWxlbWVudCkpIHtcbiAgICAgICAgc3ByZWFkYWJsZSA9IGVsZW1lbnRbSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICAgICAgICBzcHJlYWRhYmxlID0gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNwcmVhZGFibGUgJiYgZGVwdGggPiAwKSB7XG4gICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCB0b0xlbmd0aChlbGVtZW50Lmxlbmd0aCksIHRhcmdldEluZGV4LCBkZXB0aCAtIDEpIC0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0YXJnZXRJbmRleCA+PSAweDFmZmZmZmZmZmZmZmZmKSB0aHJvdyBUeXBlRXJyb3IoKTtcbiAgICAgICAgdGFyZ2V0W3RhcmdldEluZGV4XSA9IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldEluZGV4Kys7XG4gICAgfVxuICAgIHNvdXJjZUluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIHRhcmdldEluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5JbnRvQXJyYXk7XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZycsIEZ1bmN0aW9uLnRvU3RyaW5nKTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgdGFyZ2V0LCBDKSB7XG4gIHZhciBTID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xuICB2YXIgUDtcbiAgaWYgKFMgIT09IEMgJiYgdHlwZW9mIFMgPT0gJ2Z1bmN0aW9uJyAmJiAoUCA9IFMucHJvdG90eXBlKSAhPT0gQy5wcm90b3R5cGUgJiYgaXNPYmplY3QoUCkgJiYgc2V0UHJvdG90eXBlT2YpIHtcbiAgICBzZXRQcm90b3R5cGVPZih0aGF0LCBQKTtcbiAgfSByZXR1cm4gdGhhdDtcbn07XG4iLCIvLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCBhcmdzLCB0aGF0KSB7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0ludGVnZXIoaXQpIHtcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCIvLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwbTEgPSBNYXRoLmV4cG0xO1xubW9kdWxlLmV4cG9ydHMgPSAoISRleHBtMVxuICAvLyBPbGQgRkYgYnVnXG4gIHx8ICRleHBtMSgxMCkgPiAyMjAyNS40NjU3OTQ4MDY3MTkgfHwgJGV4cG0xKDEwKSA8IDIyMDI1LjQ2NTc5NDgwNjcxNjUxNjhcbiAgLy8gVG9yIEJyb3dzZXIgYnVnXG4gIHx8ICRleHBtMSgtMmUtMTcpICE9IC0yZS0xN1xuKSA/IGZ1bmN0aW9uIGV4cG0xKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogeCA+IC0xZS02ICYmIHggPCAxZS02ID8geCArIHggKiB4IC8gMiA6IE1hdGguZXhwKHgpIC0gMTtcbn0gOiAkZXhwbTE7XG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgRVBTSUxPTiA9IHBvdygyLCAtNTIpO1xudmFyIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpO1xudmFyIE1BWDMyID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMik7XG52YXIgTUlOMzIgPSBwb3coMiwgLTEyNik7XG5cbnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbiAobikge1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguZnJvdW5kIHx8IGZ1bmN0aW9uIGZyb3VuZCh4KSB7XG4gIHZhciAkYWJzID0gTWF0aC5hYnMoeCk7XG4gIHZhciAkc2lnbiA9IHNpZ24oeCk7XG4gIHZhciBhLCByZXN1bHQ7XG4gIGlmICgkYWJzIDwgTUlOMzIpIHJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7XG4gIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgcmVzdWx0ID0gYSAtIChhIC0gJGFicyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHJlc3VsdCA+IE1BWDMyIHx8IHJlc3VsdCAhPSByZXN1bHQpIHJldHVybiAkc2lnbiAqIEluZmluaXR5O1xuICByZXR1cm4gJHNpZ24gKiByZXN1bHQ7XG59O1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IE1hdGgubG9nKDEgKyB4KTtcbn07XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2NhbGUgfHwgZnVuY3Rpb24gc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSB7XG4gIGlmIChcbiAgICBhcmd1bWVudHMubGVuZ3RoID09PSAwXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCB4ICE9IHhcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IGluTG93ICE9IGluTG93XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBpbkhpZ2ggIT0gaW5IaWdoXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBvdXRMb3cgIT0gb3V0TG93XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBvdXRIaWdoICE9IG91dEhpZ2hcbiAgKSByZXR1cm4gTmFOO1xuICBpZiAoeCA9PT0gSW5maW5pdHkgfHwgeCA9PT0gLUluZmluaXR5KSByZXR1cm4geDtcbiAgcmV0dXJuICh4IC0gaW5Mb3cpICogKG91dEhpZ2ggLSBvdXRMb3cpIC8gKGluSGlnaCAtIGluTG93KSArIG91dExvdztcbn07XG4iLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbiBzaWduKHgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4gKHggPSAreCkgPT0gMCB8fCB4ICE9IHggPyB4IDogeCA8IDAgPyAtMSA6IDE7XG59O1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwidmFyIE1hcCA9IHJlcXVpcmUoJy4vZXM2Lm1hcCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbWV0YWRhdGEnKTtcbnZhciBzdG9yZSA9IHNoYXJlZC5zdG9yZSB8fCAoc2hhcmVkLnN0b3JlID0gbmV3IChyZXF1aXJlKCcuL2VzNi53ZWFrLW1hcCcpKSgpKTtcblxudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBmdW5jdGlvbiAodGFyZ2V0LCB0YXJnZXRLZXksIGNyZWF0ZSkge1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgaWYgKCF0YXJnZXRNZXRhZGF0YSkge1xuICAgIGlmICghY3JlYXRlKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHN0b3JlLnNldCh0YXJnZXQsIHRhcmdldE1ldGFkYXRhID0gbmV3IE1hcCgpKTtcbiAgfVxuICB2YXIga2V5TWV0YWRhdGEgPSB0YXJnZXRNZXRhZGF0YS5nZXQodGFyZ2V0S2V5KTtcbiAgaWYgKCFrZXlNZXRhZGF0YSkge1xuICAgIGlmICghY3JlYXRlKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHRhcmdldE1ldGFkYXRhLnNldCh0YXJnZXRLZXksIGtleU1ldGFkYXRhID0gbmV3IE1hcCgpKTtcbiAgfSByZXR1cm4ga2V5TWV0YWRhdGE7XG59O1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBtZXRhZGF0YU1hcC5oYXMoTWV0YWRhdGFLZXkpO1xufTtcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpO1xuICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IG1ldGFkYXRhTWFwLmdldChNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApIHtcbiAgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCB0cnVlKS5zZXQoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUpO1xufTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKHRhcmdldCwgdGFyZ2V0S2V5LCBmYWxzZSk7XG4gIHZhciBrZXlzID0gW107XG4gIGlmIChtZXRhZGF0YU1hcCkgbWV0YWRhdGFNYXAuZm9yRWFjaChmdW5jdGlvbiAoXywga2V5KSB7IGtleXMucHVzaChrZXkpOyB9KTtcbiAgcmV0dXJuIGtleXM7XG59O1xudmFyIHRvTWV0YUtleSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xudmFyIGV4cCA9IGZ1bmN0aW9uIChPKSB7XG4gICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIE8pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHN0b3JlOiBzdG9yZSxcbiAgbWFwOiBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwLFxuICBoYXM6IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEsXG4gIGdldDogb3JkaW5hcnlHZXRPd25NZXRhZGF0YSxcbiAgc2V0OiBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhLFxuICBrZXlzOiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyxcbiAga2V5OiB0b01ldGFLZXksXG4gIGV4cDogZXhwXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChpc05vZGUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmIChpc05vZGUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgU2FmYXJpIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICB9IGVsc2UgaWYgKE9ic2VydmVyICYmICEoZ2xvYmFsLm5hdmlnYXRvciAmJiBnbG9iYWwubmF2aWdhdG9yLnN0YW5kYWxvbmUpKSB7XG4gICAgdmFyIHRvZ2dsZSA9IHRydWU7XG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZm4pIHtcbiAgICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgICBpZiAoIWhlYWQpIHtcbiAgICAgIGhlYWQgPSB0YXNrO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSBsYXN0ID0gdGFzaztcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcblxuZnVuY3Rpb24gUHJvbWlzZUNhcGFiaWxpdHkoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBTID0gU3ltYm9sKCk7XG4gIHZhciBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGspIHsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICB2YXIgaXNFbnVtID0gcElFLmY7XG4gIHdoaWxlIChhTGVuID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSB7XG4gICAgICBrZXkgPSBrZXlzW2orK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IGlzRW51bS5jYWxsKFMsIGtleSkpIFRba2V5XSA9IFNba2V5XTtcbiAgICB9XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBGb3JjZWQgcmVwbGFjZW1lbnQgcHJvdG90eXBlIGFjY2Vzc29ycyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBLID0gTWF0aC5yYW5kb20oKTtcbiAgLy8gSW4gRkYgdGhyb3dzIG9ubHkgZGVmaW5lIG1ldGhvZHNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmLCBuby11c2VsZXNzLWNhbGxcbiAgX19kZWZpbmVTZXR0ZXJfXy5jYWxsKG51bGwsIEssIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG4gIGRlbGV0ZSByZXF1aXJlKCcuL19nbG9iYWwnKVtLXTtcbn0pO1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYykge1xuICB2YXIgZm4gPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07XG4gIHZhciBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgaXNFbnVtID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpc0VudHJpZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkge1xuICAgICAga2V5ID0ga2V5c1tpKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBpc0VudW0uY2FsbChPLCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcbiIsIi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIFJlZmxlY3QgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBSZWZsZWN0ICYmIFJlZmxlY3Qub3duS2V5cyB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ09QTi5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICByZXR1cm4gZ2V0U3ltYm9scyA/IGtleXMuY29uY2F0KGdldFN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwidmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VGbG9hdDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcblxubW9kdWxlLmV4cG9ydHMgPSAxIC8gJHBhcnNlRmxvYXQocmVxdWlyZSgnLi9fc3RyaW5nLXdzJykgKyAnLTAnKSAhPT0gLUluZmluaXR5ID8gZnVuY3Rpb24gcGFyc2VGbG9hdChzdHIpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgdmFyIHJlc3VsdCA9ICRwYXJzZUZsb2F0KHN0cmluZyk7XG4gIHJldHVybiByZXN1bHQgPT09IDAgJiYgc3RyaW5nLmNoYXJBdCgwKSA9PSAnLScgPyAtMCA6IHJlc3VsdDtcbn0gOiAkcGFyc2VGbG9hdDtcbiIsInZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUludDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciB3cyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIGhleCA9IC9eWy0rXT8wW3hYXS87XG5cbm1vZHVsZS5leHBvcnRzID0gJHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIgPyBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHJldHVybiAkcGFyc2VJbnQoc3RyaW5nLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChzdHJpbmcpID8gMTYgOiAxMCkpO1xufSA6ICRwYXJzZUludDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgc2FmZSkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFNSQyA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuL19mdW5jdGlvbi10by1zdHJpbmcnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIGJ1aWx0aW5FeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuXG4gLy8gYFJlZ0V4cEV4ZWNgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKHR5cGVvZiBleGVjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCBleGVjIG1ldGhvZCByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBPYmplY3Qgb3IgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmIChjbGFzc29mKFIpICE9PSAnUmVnRXhwJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbiAgfVxuICByZXR1cm4gYnVpbHRpbkV4ZWMuY2FsbChSLCBTKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWdleHBGbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG5cbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuLy8gVGhpcyBhbHdheXMgcmVmZXJzIHRvIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24sIGJlY2F1c2UgdGhlXG4vLyBTdHJpbmcjcmVwbGFjZSBwb2x5ZmlsbCB1c2VzIC4vZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyxcbi8vIHdoaWNoIGxvYWRzIHRoaXMgZmlsZSBiZWZvcmUgcGF0Y2hpbmcgdGhlIG1ldGhvZC5cbnZhciBuYXRpdmVSZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xuXG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xuXG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuXG52YXIgVVBEQVRFU19MQVNUX0lOREVYX1dST05HID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlMSA9IC9hLyxcbiAgICAgIHJlMiA9IC9iKi9nO1xuICBuYXRpdmVFeGVjLmNhbGwocmUxLCAnYScpO1xuICBuYXRpdmVFeGVjLmNhbGwocmUyLCAnYScpO1xuICByZXR1cm4gcmUxW0xBU1RfSU5ERVhdICE9PSAwIHx8IHJlMltMQVNUX0lOREVYXSAhPT0gMDtcbn0pKCk7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cikge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIGxhc3RJbmRleCwgcmVDb3B5LCBtYXRjaCwgaTtcblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHJlLnNvdXJjZSArICckKD8hXFxcXHMpJywgcmVnZXhwRmxhZ3MuY2FsbChyZSkpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZVtMQVNUX0lOREVYXTtcblxuICAgIG1hdGNoID0gbmF0aXZlRXhlYy5jYWxsKHJlLCBzdHIpO1xuXG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmVbTEFTVF9JTkRFWF0gPSByZS5nbG9iYWwgPyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA6IGxhc3RJbmRleDtcbiAgICB9XG4gICAgaWYgKE5QQ0dfSU5DTFVERUQgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGBcbiAgICAgIC8vIGZvciBOUENHLCBsaWtlIElFOC4gTk9URTogVGhpcyBkb2Vzbicgd29yayBmb3IgLyguPyk/L1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgICAgbmF0aXZlUmVwbGFjZS5jYWxsKG1hdGNoWzBdLCByZUNvcHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyZWdFeHAsIHJlcGxhY2UpIHtcbiAgdmFyIHJlcGxhY2VyID0gcmVwbGFjZSA9PT0gT2JqZWN0KHJlcGxhY2UpID8gZnVuY3Rpb24gKHBhcnQpIHtcbiAgICByZXR1cm4gcmVwbGFjZVtwYXJ0XTtcbiAgfSA6IHJlcGxhY2U7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gU3RyaW5nKGl0KS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZXIpO1xuICB9O1xufTtcbiIsIi8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgZnJvbTogZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBGbiwgdGhpc0FyZyAqLykge1xuICAgIHZhciBtYXBGbiA9IGFyZ3VtZW50c1sxXTtcbiAgICB2YXIgbWFwcGluZywgQSwgbiwgY2I7XG4gICAgYUZ1bmN0aW9uKHRoaXMpO1xuICAgIG1hcHBpbmcgPSBtYXBGbiAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChtYXBwaW5nKSBhRnVuY3Rpb24obWFwRm4pO1xuICAgIGlmIChzb3VyY2UgPT0gdW5kZWZpbmVkKSByZXR1cm4gbmV3IHRoaXMoKTtcbiAgICBBID0gW107XG4gICAgaWYgKG1hcHBpbmcpIHtcbiAgICAgIG4gPSAwO1xuICAgICAgY2IgPSBjdHgobWFwRm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgICBmb3JPZihzb3VyY2UsIGZhbHNlLCBmdW5jdGlvbiAobmV4dEl0ZW0pIHtcbiAgICAgICAgQS5wdXNoKGNiKG5leHRJdGVtLCBuKyspKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JPZihzb3VyY2UsIGZhbHNlLCBBLnB1c2gsIEEpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHRoaXMoQSk7XG4gIH0gfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09MTEVDVElPTikge1xuICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBvZjogZnVuY3Rpb24gb2YoKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIEEgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIEFbbGVuZ3RoXSA9IGFyZ3VtZW50c1tsZW5ndGhdO1xuICAgIHJldHVybiBuZXcgdGhpcyhBKTtcbiAgfSB9KTtcbn07XG4iLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgQyA9IGdsb2JhbFtLRVldO1xuICBpZiAoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSkgZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICB9KTtcbn07XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwidmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IHJlcXVpcmUoJy4vX2xpYnJhcnknKSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDIwIERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtZXRob2QsIGFyZykge1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGxcbiAgICBhcmcgPyBtZXRob2QuY2FsbChudWxsLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIDEpIDogbWV0aG9kLmNhbGwobnVsbCk7XG4gIH0pO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG4iLCIvLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfVxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgc2VhcmNoU3RyaW5nLCBOQU1FKSB7XG4gIGlmIChpc1JlZ0V4cChzZWFyY2hTdHJpbmcpKSB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZyMnICsgTkFNRSArIFwiIGRvZXNuJ3QgYWNjZXB0IHJlZ2V4IVwiKTtcbiAgcmV0dXJuIFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHF1b3QgPSAvXCIvZztcbi8vIEIuMi4zLjIuMSBDcmVhdGVIVE1MKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKVxudmFyIGNyZWF0ZUhUTUwgPSBmdW5jdGlvbiAoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgdmFyIHAxID0gJzwnICsgdGFnO1xuICBpZiAoYXR0cmlidXRlICE9PSAnJykgcDEgKz0gJyAnICsgYXR0cmlidXRlICsgJz1cIicgKyBTdHJpbmcodmFsdWUpLnJlcGxhY2UocXVvdCwgJyZxdW90OycpICsgJ1wiJztcbiAgcmV0dXJuIHAxICsgJz4nICsgUyArICc8LycgKyB0YWcgKyAnPic7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgZXhlYykge1xuICB2YXIgTyA9IHt9O1xuICBPW05BTUVdID0gZXhlYyhjcmVhdGVIVE1MKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRlc3QgPSAnJ1tOQU1FXSgnXCInKTtcbiAgICByZXR1cm4gdGVzdCAhPT0gdGVzdC50b0xvd2VyQ2FzZSgpIHx8IHRlc3Quc3BsaXQoJ1wiJykubGVuZ3RoID4gMztcbiAgfSksICdTdHJpbmcnLCBPKTtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIG1heExlbmd0aCwgZmlsbFN0cmluZywgbGVmdCkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoO1xuICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKTtcbiAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xuICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcbiAgdmFyIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIE1hdGguY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcGVhdChjb3VudCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGRlZmluZWQodGhpcykpO1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBuID0gdG9JbnRlZ2VyKGNvdW50KTtcbiAgaWYgKG4gPCAwIHx8IG4gPT0gSW5maW5pdHkpIHRocm93IFJhbmdlRXJyb3IoXCJDb3VudCBjYW4ndCBiZSBuZWdhdGl2ZVwiKTtcbiAgZm9yICg7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKSBpZiAobiAmIDEpIHJlcyArPSBzdHI7XG4gIHJldHVybiByZXM7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzcGFjZXMgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBzcGFjZSA9ICdbJyArIHNwYWNlcyArICddJztcbnZhciBub24gPSAnXFx1MjAwYlxcdTAwODUnO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHNwYWNlICsgc3BhY2UgKyAnKiQnKTtcblxudmFyIGV4cG9ydGVyID0gZnVuY3Rpb24gKEtFWSwgZXhlYywgQUxJQVMpIHtcbiAgdmFyIGV4cCA9IHt9O1xuICB2YXIgRk9SQ0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhc3BhY2VzW0tFWV0oKSB8fCBub25bS0VZXSgpICE9IG5vbjtcbiAgfSk7XG4gIHZhciBmbiA9IGV4cFtLRVldID0gRk9SQ0UgPyBleGVjKHRyaW0pIDogc3BhY2VzW0tFWV07XG4gIGlmIChBTElBUykgZXhwW0FMSUFTXSA9IGZuO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTtcbn07XG5cbi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0XG4vLyAyIC0+IFN0cmluZyN0cmltUmlnaHRcbi8vIDMgLT4gU3RyaW5nI3RyaW1cbnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uIChzdHJpbmcsIFRZUEUpIHtcbiAgc3RyaW5nID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIGlmIChUWVBFICYgMSkgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTtcbiAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICByZXR1cm4gc3RyaW5nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gJ1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJyArXG4gICdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbmRleFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICB2YXIgbnVtYmVyID0gdG9JbnRlZ2VyKGl0KTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKG51bWJlcik7XG4gIGlmIChudW1iZXIgIT09IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbGVuZ3RoIScpO1xuICByZXR1cm4gbGVuZ3RoO1xufTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSkge1xuICB2YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbiAgdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xuICB2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuICB2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuICB2YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbiAgdmFyICRidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbiAgdmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xuICB2YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG4gIHZhciBwcm9wZXJ0eURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG4gIHZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xuICB2YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbiAgdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbiAgdmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG4gIHZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG4gIHZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuICB2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG4gIHZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xuICB2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbiAgdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG4gIHZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbiAgdmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuICB2YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG4gIHZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbiAgdmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuICB2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG4gIHZhciBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKTtcbiAgdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbiAgdmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbiAgdmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xuICB2YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG4gIHZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG4gIHZhciBhcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpO1xuICB2YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG4gIHZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG4gIHZhciBkUCA9ICREUC5mO1xuICB2YXIgZ09QRCA9ICRHT1BELmY7XG4gIHZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4gIHZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuICB2YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xuICB2YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbiAgdmFyIFNIQVJFRF9CVUZGRVIgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUjtcbiAgdmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgQXJyYXlQcm90byA9IEFycmF5W1BST1RPVFlQRV07XG4gIHZhciAkQXJyYXlCdWZmZXIgPSAkYnVmZmVyLkFycmF5QnVmZmVyO1xuICB2YXIgJERhdGFWaWV3ID0gJGJ1ZmZlci5EYXRhVmlldztcbiAgdmFyIGFycmF5Rm9yRWFjaCA9IGNyZWF0ZUFycmF5TWV0aG9kKDApO1xuICB2YXIgYXJyYXlGaWx0ZXIgPSBjcmVhdGVBcnJheU1ldGhvZCgyKTtcbiAgdmFyIGFycmF5U29tZSA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpO1xuICB2YXIgYXJyYXlFdmVyeSA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpO1xuICB2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG4gIHZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xuICB2YXIgYXJyYXlJbmNsdWRlcyA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSk7XG4gIHZhciBhcnJheUluZGV4T2YgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKTtcbiAgdmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xuICB2YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbiAgdmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG4gIHZhciBhcnJheUxhc3RJbmRleE9mID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZjtcbiAgdmFyIGFycmF5UmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2U7XG4gIHZhciBhcnJheVJlZHVjZVJpZ2h0ID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodDtcbiAgdmFyIGFycmF5Sm9pbiA9IEFycmF5UHJvdG8uam9pbjtcbiAgdmFyIGFycmF5U29ydCA9IEFycmF5UHJvdG8uc29ydDtcbiAgdmFyIGFycmF5U2xpY2UgPSBBcnJheVByb3RvLnNsaWNlO1xuICB2YXIgYXJyYXlUb1N0cmluZyA9IEFycmF5UHJvdG8udG9TdHJpbmc7XG4gIHZhciBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZztcbiAgdmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xuICB2YXIgVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xuICB2YXIgVFlQRURfQ09OU1RSVUNUT1IgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBERUZfQ09OU1RSVUNUT1IgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpO1xuICB2YXIgQUxMX0NPTlNUUlVDVE9SUyA9ICR0eXBlZC5DT05TVFI7XG4gIHZhciBUWVBFRF9BUlJBWSA9ICR0eXBlZC5UWVBFRDtcbiAgdmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbiAgdmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdCkgcmV0dXJuIGl0O1xuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gKEMsIGxlbmd0aCkge1xuICAgIGlmICghKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uIChPLCBsaXN0KSB7XG4gICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTtcbiAgfTtcblxuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXksIGludGVybmFsKSB7XG4gICAgZFAoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9IH0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZiAobWFwcGluZyAmJiBhTGVuID4gMikgbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQsIGVuZCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGg7XG4gICAgICB2YXIgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBPID0gdmFsaWRhdGUodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gICAgICB2YXIgJGJlZ2luID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxuICAgICAgICBPLmJ1ZmZlcixcbiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSk7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICB9O1xuXG4gIHZhciAkaXRlcmF0b3JzID0ge1xuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIGlmIChpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZiAoIUFMTF9DT05TVFJVQ1RPUlMpIHtcbiAgICAkR09QRC5mID0gJGdldERlc2M7XG4gICAgJERQLmYgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogJHNldERlc2NcbiAgfSk7XG5cbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAkc2xpY2UsXG4gICAgc2V0OiAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7IC8qIG5vb3AgKi8gfSxcbiAgICB0b1N0cmluZzogYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIEtFWTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBLRVk7XG4gICAgdmFyIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV07XG4gICAgdmFyIEJhc2UgPSBUeXBlZEFycmF5IHx8IHt9O1xuICAgIHZhciBUQUMgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpO1xuICAgIHZhciBGT1JDRUQgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVjtcbiAgICB2YXIgTyA9IHt9O1xuICAgIHZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkge1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XG4gICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpO1xuICAgIH0gZWxzZSBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXkoMSk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9KSB8fCAhJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IEJhc2UodG9JbmRleChkYXRhKSk7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXkpKSBoaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmICghTElCUkFSWSkgVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XG4gICAgfVxuICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXTtcbiAgICB2YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvclxuICAgICAgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCk7XG4gICAgdmFyICRpdGVyYXRvciA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYgKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkge1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTkFNRTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVNcbiAgICB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBCYXNlLm9mLmNhbGwoVHlwZWRBcnJheSwgMSk7IH0pLCBOQU1FLCB7XG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwgeyBzZXQ6ICRzZXQgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICBpZiAoIUxJQlJBUlkgJiYgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nID0gYXJyYXlUb1N0cmluZztcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwgeyBzbGljZTogJHNsaWNlIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7IHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcgfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZiAoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXghJztcbnZhciAkQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciBNYXRoID0gZ2xvYmFsLk1hdGg7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzXG52YXIgSW5maW5pdHkgPSBnbG9iYWwuSW5maW5pdHk7XG52YXIgQmFzZUJ1ZmZlciA9ICRBcnJheUJ1ZmZlcjtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE4yID0gTWF0aC5MTjI7XG52YXIgQlVGRkVSID0gJ2J1ZmZlcic7XG52YXIgQllURV9MRU5HVEggPSAnYnl0ZUxlbmd0aCc7XG52YXIgQllURV9PRkZTRVQgPSAnYnl0ZU9mZnNldCc7XG52YXIgJEJVRkZFUiA9IERFU0NSSVBUT1JTID8gJ19iJyA6IEJVRkZFUjtcbnZhciAkTEVOR1RIID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEg7XG52YXIgJE9GRlNFVCA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxuZnVuY3Rpb24gcGFja0lFRUU3NTQodmFsdWUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KG5CeXRlcyk7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xuICB2YXIgaSA9IDA7XG4gIHZhciBzID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMDtcbiAgdmFyIGUsIG0sIGM7XG4gIHZhbHVlID0gYWJzKHZhbHVlKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAodmFsdWUgIT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIG0gPSB2YWx1ZSAhPSB2YWx1ZSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBmbG9vcihsb2codmFsdWUpIC8gTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufVxuZnVuY3Rpb24gdW5wYWNrSUVFRTc1NChidWZmZXIsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZUxlbiAtIDc7XG4gIHZhciBpID0gbkJ5dGVzIC0gMTtcbiAgdmFyIHMgPSBidWZmZXJbaS0tXTtcbiAgdmFyIGUgPSBzICYgMTI3O1xuICB2YXIgbTtcbiAgcyA+Pj0gNztcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59XG5cbmZ1bmN0aW9uIHVucGFja0kzMihieXRlcykge1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn1cbmZ1bmN0aW9uIHBhY2tJOChpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTE2KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTMyKGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0Y2NChpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn1cbmZ1bmN0aW9uIHBhY2tGMzIoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59XG5cbmZ1bmN0aW9uIGFkZEdldHRlcihDLCBrZXksIGludGVybmFsKSB7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH0gfSk7XG59XG5cbmZ1bmN0aW9uIGdldCh2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn1cbmZ1bmN0aW9uIHNldCh2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspIHN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdO1xufVxuXG5pZiAoISR0eXBlZC5BQlYpIHtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0b0luZGV4KGxlbmd0aCk7XG4gICAgdGhpcy5fYiA9IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgJEFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgaWYgKCFMSUJSQVJZKSBBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBUWVBFRCA9IHVpZCgndHlwZWRfYXJyYXknKTtcbnZhciBWSUVXID0gdWlkKCd2aWV3Jyk7XG52YXIgQUJWID0gISEoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGdsb2JhbC5EYXRhVmlldyk7XG52YXIgQ09OU1RSID0gQUJWO1xudmFyIGkgPSAwO1xudmFyIGwgPSA5O1xudmFyIFR5cGVkO1xuXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9IChcbiAgJ0ludDhBcnJheSxVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5J1xuKS5zcGxpdCgnLCcpO1xuXG53aGlsZSAoaSA8IGwpIHtcbiAgaWYgKFR5cGVkID0gZ2xvYmFsW1R5cGVkQXJyYXlDb25zdHJ1Y3RvcnNbaSsrXV0pIHtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVFlQRUQsIHRydWUpO1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgfSBlbHNlIENPTlNUUiA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQUJWOiBBQlYsXG4gIENPTlNUUjogQ09OU1RSLFxuICBUWVBFRDogVFlQRUQsXG4gIFZJRVc6IFZJRVdcbn07XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBuYXZpZ2F0b3IgPSBnbG9iYWwubmF2aWdhdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVFlQRSkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSB8fCBpdC5fdCAhPT0gVFlQRSkgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vYmVuamFtaW5nci9SZXhFeHAuZXNjYXBlXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZSA9IHJlcXVpcmUoJy4vX3JlcGxhY2VyJykoL1tcXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVnRXhwJywgeyBlc2NhcGU6IGZ1bmN0aW9uIGVzY2FwZShpdCkgeyByZXR1cm4gJHJlKGl0KTsgfSB9KTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgY29weVdpdGhpbjogcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2NvcHlXaXRoaW4nKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV2ZXJ5ID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZXZlcnksIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBmaWxsOiByZXF1aXJlKCcuL19hcnJheS1maWxsJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmaWxsJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMik7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy45IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg2KTtcbnZhciBLRVkgPSAnZmluZEluZGV4JztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNSk7XG52YXIgS0VZID0gJ2ZpbmQnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIFNUUklDVCA9IHJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5mb3JFYWNoLCB0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhU1RSSUNULCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikgeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKG1hcHBpbmcpIG1hcGZuID0gY3R4KG1hcGZuLCBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHJlc3VsdCA9IG5ldyBDKCk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICAgIGZvciAocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciAkbmF0aXZlID0gW10uaW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0uaW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMSAvIDE1LjQuNC4xNCBBcnJheS5wcm90b3R5cGUuaW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMFxuICAgICAgOiAkaW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIi8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0FycmF5JywgeyBpc0FycmF5OiByZXF1aXJlKCcuL19pcy1hcnJheScpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUuam9pbihzZXBhcmF0b3IpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUpvaW4gPSBbXS5qb2luO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2Ugc3RyaW5nc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAocmVxdWlyZSgnLi9faW9iamVjdCcpICE9IE9iamVjdCB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKGFycmF5Sm9pbikpLCAnQXJyYXknLCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyICRuYXRpdmUgPSBbXS5sYXN0SW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTQgLyAxNS40LjQuMTUgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSBAWyotMV0gKi8pIHtcbiAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgaWYgKE5FR0FUSVZFX1pFUk8pIHJldHVybiAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMDtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBpbmRleCA9IE1hdGgubWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgICBmb3IgKDtpbmRleCA+PSAwOyBpbmRleC0tKSBpZiAoaW5kZXggaW4gTykgaWYgKE9baW5kZXhdID09PSBzZWFyY2hFbGVtZW50KSByZXR1cm4gaW5kZXggfHwgMDtcbiAgICByZXR1cm4gLTE7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ubWFwLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4vLyBXZWJLaXQgQXJyYXkub2YgaXNuJ3QgZ2VuZXJpY1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShBcnJheS5vZi5jYWxsKEYpIGluc3RhbmNlb2YgRik7XG59KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMyBBcnJheS5vZiggLi4uaXRlbXMpXG4gIG9mOiBmdW5jdGlvbiBvZigvKiAuLi5hcmdzICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkoYUxlbik7XG4gICAgd2hpbGUgKGFMZW4gPiBpbmRleCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gYUxlbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlUmlnaHQsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOSAvIDE1LjQuNC4yMiBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2UsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBpZiAoaHRtbCkgYXJyYXlTbGljZS5jYWxsKGh0bWwpO1xufSksICdBcnJheScsIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpIHtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhpcy5sZW5ndGgpO1xuICAgIHZhciBrbGFzcyA9IGNvZih0aGlzKTtcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcbiAgICBpZiAoa2xhc3MgPT0gJ0FycmF5JykgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB2YXIgc3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbik7XG4gICAgdmFyIHVwVG8gPSB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pO1xuICAgIHZhciBzaXplID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KTtcbiAgICB2YXIgY2xvbmVkID0gbmV3IEFycmF5KHNpemUpO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKDsgaSA8IHNpemU7IGkrKykgY2xvbmVkW2ldID0ga2xhc3MgPT0gJ1N0cmluZydcbiAgICAgID8gdGhpcy5jaGFyQXQoc3RhcnQgKyBpKVxuICAgICAgOiB0aGlzW3N0YXJ0ICsgaV07XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRzb21lID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uc29tZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjIzIC8gMTUuNC40LjE3IEFycmF5LnByb3RvdHlwZS5zb21lKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkc29ydCA9IFtdLnNvcnQ7XG52YXIgdGVzdCA9IFsxLCAyLCAzXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTgtXG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggYnVnXG4gIHRlc3Quc29ydChudWxsKTtcbiAgLy8gT2xkIFdlYktpdFxufSkgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkc29ydCkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdBcnJheScpO1xuIiwiLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7IG5vdzogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH0gfSk7XG4iLCIvLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lTT1N0cmluZyA9IHJlcXVpcmUoJy4vX2RhdGUtdG8taXNvLXN0cmluZycpO1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nICE9PSB0b0lTT1N0cmluZyksICdEYXRlJywge1xuICB0b0lTT1N0cmluZzogdG9JU09TdHJpbmdcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRGF0ZShOYU4pLnRvSlNPTigpICE9PSBudWxsXG4gICAgfHwgRGF0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoeyB0b0lTT1N0cmluZzogZnVuY3Rpb24gKCkgeyByZXR1cm4gMTsgfSB9KSAhPT0gMTtcbn0pLCAnRGF0ZScsIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKGtleSkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHB2ID0gdG9QcmltaXRpdmUoTyk7XG4gICAgcmV0dXJuIHR5cGVvZiBwdiA9PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocHYpID8gbnVsbCA6IE8udG9JU09TdHJpbmcoKTtcbiAgfVxufSk7XG4iLCJ2YXIgVE9fUFJJTUlUSVZFID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvUHJpbWl0aXZlJyk7XG52YXIgcHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcblxuaWYgKCEoVE9fUFJJTUlUSVZFIGluIHByb3RvKSkgcmVxdWlyZSgnLi9faGlkZScpKHByb3RvLCBUT19QUklNSVRJVkUsIHJlcXVpcmUoJy4vX2RhdGUtdG8tcHJpbWl0aXZlJykpO1xuIiwidmFyIERhdGVQcm90byA9IERhdGUucHJvdG90eXBlO1xudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRGF0ZVByb3RvW1RPX1NUUklOR107XG52YXIgZ2V0VGltZSA9IERhdGVQcm90by5nZXRUaW1lO1xuaWYgKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0VGltZS5jYWxsKHRoaXMpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gJHRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufVxuIiwiLy8gMTkuMi4zLjIgLyAxNS4zLjQuNSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCh0aGlzQXJnLCBhcmdzLi4uKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdGdW5jdGlvbicsIHsgYmluZDogcmVxdWlyZSgnLi9fYmluZCcpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSEFTX0lOU1RBTkNFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2hhc0luc3RhbmNlJyk7XG52YXIgRnVuY3Rpb25Qcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIDE5LjIuMy42IEZ1bmN0aW9uLnByb3RvdHlwZVtAQGhhc0luc3RhbmNlXShWKVxuaWYgKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG8pKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKEZ1bmN0aW9uUHJvdG8sIEhBU19JTlNUQU5DRSwgeyB2YWx1ZTogZnVuY3Rpb24gKE8pIHtcbiAgaWYgKHR5cGVvZiB0aGlzICE9ICdmdW5jdGlvbicgfHwgIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIGlmICghaXNPYmplY3QodGhpcy5wcm90b3R5cGUpKSByZXR1cm4gTyBpbnN0YW5jZW9mIHRoaXM7XG4gIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XG4gIHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpIGlmICh0aGlzLnByb3RvdHlwZSA9PT0gTykgcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn0gfSk7XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIEZQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gMTkuMi40LjIgbmFtZVxuTkFNRSBpbiBGUHJvdG8gfHwgcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiBkUChGUHJvdG8sIE5BTUUsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICgnJyArIHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBNQVAgPSAnTWFwJztcblxuLy8gMjMuMSBNYXAgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoTUFQLCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIHZhciBlbnRyeSA9IHN0cm9uZy5nZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52O1xuICB9LFxuICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgTUFQKSwga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcsIHRydWUpO1xuIiwiLy8gMjAuMi4yLjMgTWF0aC5hY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBsb2cxcCA9IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKTtcbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xudmFyICRhY29zaCA9IE1hdGguYWNvc2g7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYWNvc2hcbiAgLy8gVjggYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzUwOVxuICAmJiBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgPT0gNzEwXG4gIC8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hY29zaChJbmZpbml0eSkgLT4gTmFOXG4gICYmICRhY29zaChJbmZpbml0eSkgPT0gSW5maW5pdHlcbiksICdNYXRoJywge1xuICBhY29zaDogZnVuY3Rpb24gYWNvc2goeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA8IDEgPyBOYU4gOiB4ID4gOTQ5MDYyNjUuNjI0MjUxNTZcbiAgICAgID8gTWF0aC5sb2coeCkgKyBNYXRoLkxOMlxuICAgICAgOiBsb2cxcCh4IC0gMSArIHNxcnQoeCAtIDEpICogc3FydCh4ICsgMSkpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi41IE1hdGguYXNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGFzaW5oID0gTWF0aC5hc2luaDtcblxuZnVuY3Rpb24gYXNpbmgoeCkge1xuICByZXR1cm4gIWlzRmluaXRlKHggPSAreCkgfHwgeCA9PSAwID8geCA6IHggPCAwID8gLWFzaW5oKC14KSA6IE1hdGgubG9nKHggKyBNYXRoLnNxcnQoeCAqIHggKyAxKSk7XG59XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hc2luaCgwKSAtPiAtMFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhc2luaCAmJiAxIC8gJGFzaW5oKDApID4gMCksICdNYXRoJywgeyBhc2luaDogYXNpbmggfSk7XG4iLCIvLyAyMC4yLjIuNyBNYXRoLmF0YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdGFuaCA9IE1hdGguYXRhbmg7XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hdGFuaCgtMCkgLT4gMFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhdGFuaCAmJiAxIC8gJGF0YW5oKC0wKSA8IDApLCAnTWF0aCcsIHtcbiAgYXRhbmg6IGZ1bmN0aW9uIGF0YW5oKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiBNYXRoLmxvZygoMSArIHgpIC8gKDEgLSB4KSkgLyAyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi45IE1hdGguY2JydCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2JydDogZnVuY3Rpb24gY2JydCh4KSB7XG4gICAgcmV0dXJuIHNpZ24oeCA9ICt4KSAqIE1hdGgucG93KE1hdGguYWJzKHgpLCAxIC8gMyk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjExIE1hdGguY2x6MzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2x6MzI6IGZ1bmN0aW9uIGNsejMyKHgpIHtcbiAgICByZXR1cm4gKHggPj4+PSAwKSA/IDMxIC0gTWF0aC5mbG9vcihNYXRoLmxvZyh4ICsgMC41KSAqIE1hdGguTE9HMkUpIDogMzI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjEyIE1hdGguY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjb3NoOiBmdW5jdGlvbiBjb3NoKHgpIHtcbiAgICByZXR1cm4gKGV4cCh4ID0gK3gpICsgZXhwKC14KSkgLyAyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoJGV4cG0xICE9IE1hdGguZXhwbTEpLCAnTWF0aCcsIHsgZXhwbTE6ICRleHBtMSB9KTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBmcm91bmQ6IHJlcXVpcmUoJy4vX21hdGgtZnJvdW5kJykgfSk7XG4iLCIvLyAyMC4yLjIuMTcgTWF0aC5oeXBvdChbdmFsdWUxWywgdmFsdWUyWywg4oCmIF1dXSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaHlwb3Q6IGZ1bmN0aW9uIGh5cG90KHZhbHVlMSwgdmFsdWUyKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgc3VtID0gMDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBsYXJnID0gMDtcbiAgICB2YXIgYXJnLCBkaXY7XG4gICAgd2hpbGUgKGkgPCBhTGVuKSB7XG4gICAgICBhcmcgPSBhYnMoYXJndW1lbnRzW2krK10pO1xuICAgICAgaWYgKGxhcmcgPCBhcmcpIHtcbiAgICAgICAgZGl2ID0gbGFyZyAvIGFyZztcbiAgICAgICAgc3VtID0gc3VtICogZGl2ICogZGl2ICsgMTtcbiAgICAgICAgbGFyZyA9IGFyZztcbiAgICAgIH0gZWxzZSBpZiAoYXJnID4gMCkge1xuICAgICAgICBkaXYgPSBhcmcgLyBsYXJnO1xuICAgICAgICBzdW0gKz0gZGl2ICogZGl2O1xuICAgICAgfSBlbHNlIHN1bSArPSBhcmc7XG4gICAgfVxuICAgIHJldHVybiBsYXJnID09PSBJbmZpbml0eSA/IEluZmluaXR5IDogbGFyZyAqIE1hdGguc3FydChzdW0pO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xOCBNYXRoLmltdWwoeCwgeSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGltdWwgPSBNYXRoLmltdWw7XG5cbi8vIHNvbWUgV2ViS2l0IHZlcnNpb25zIGZhaWxzIHdpdGggYmlnIG51bWJlcnMsIHNvbWUgaGFzIHdyb25nIGFyaXR5XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJGltdWwoMHhmZmZmZmZmZiwgNSkgIT0gLTUgfHwgJGltdWwubGVuZ3RoICE9IDI7XG59KSwgJ01hdGgnLCB7XG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSkge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyIHhuID0gK3g7XG4gICAgdmFyIHluID0gK3k7XG4gICAgdmFyIHhsID0gVUlOVDE2ICYgeG47XG4gICAgdmFyIHlsID0gVUlOVDE2ICYgeW47XG4gICAgcmV0dXJuIDAgfCB4bCAqIHlsICsgKChVSU5UMTYgJiB4biA+Pj4gMTYpICogeWwgKyB4bCAqIChVSU5UMTYgJiB5biA+Pj4gMTYpIDw8IDE2ID4+PiAwKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjEgTWF0aC5sb2cxMCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAqIE1hdGguTE9HMTBFO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGxvZzFwOiByZXF1aXJlKCcuL19tYXRoLWxvZzFwJykgfSk7XG4iLCIvLyAyMC4yLjIuMjIgTWF0aC5sb2cyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzI6IGZ1bmN0aW9uIGxvZzIoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAvIE1hdGguTE4yO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2lnbjogcmVxdWlyZSgnLi9fbWF0aC1zaWduJykgfSk7XG4iLCIvLyAyMC4yLjIuMzAgTWF0aC5zaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBWOCBuZWFyIENocm9taXVtIDM4IGhhcyBhIHByb2JsZW0gd2l0aCB2ZXJ5IHNtYWxsIG51bWJlcnNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3O1xufSksICdNYXRoJywge1xuICBzaW5oOiBmdW5jdGlvbiBzaW5oKHgpIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoeCA9ICt4KSA8IDFcbiAgICAgID8gKGV4cG0xKHgpIC0gZXhwbTEoLXgpKSAvIDJcbiAgICAgIDogKGV4cCh4IC0gMSkgLSBleHAoLXggLSAxKSkgKiAoTWF0aC5FIC8gMik7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpIHtcbiAgICB2YXIgYSA9IGV4cG0xKHggPSAreCk7XG4gICAgdmFyIGIgPSBleHBtMSgteCk7XG4gICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAoeCkgKyBleHAoLXgpKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpIHtcbiAgICByZXR1cm4gKGl0ID4gMCA/IE1hdGguZmxvb3IgOiBNYXRoLmNlaWwpKGl0KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciBOVU1CRVIgPSAnTnVtYmVyJztcbnZhciAkTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgQmFzZSA9ICROdW1iZXI7XG52YXIgcHJvdG8gPSAkTnVtYmVyLnByb3RvdHlwZTtcbi8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xudmFyIEJST0tFTl9DT0YgPSBjb2YocmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpKHByb3RvKSkgPT0gTlVNQkVSO1xudmFyIFRSSU0gPSAndHJpbScgaW4gU3RyaW5nLnByb3RvdHlwZTtcblxuLy8gNy4xLjMgVG9OdW1iZXIoYXJndW1lbnQpXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsIGZhbHNlKTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSBUUklNID8gaXQudHJpbSgpIDogJHRyaW0oaXQsIDMpO1xuICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIHRoaXJkLCByYWRpeCwgbWF4Q29kZTtcbiAgICBpZiAoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSkge1xuICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpO1xuICAgICAgaWYgKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKSByZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHtcbiAgICAgIHN3aXRjaCAoaXQuY2hhckNvZGVBdCgxKSkge1xuICAgICAgICBjYXNlIDY2OiBjYXNlIDk4OiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzk6IGNhc2UgMTExOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wb1swLTddKyQvaVxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgZGlnaXRzID0gaXQuc2xpY2UoMiksIGkgPSAwLCBsID0gZGlnaXRzLmxlbmd0aCwgY29kZTsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb2RlID0gZGlnaXRzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKSByZXR1cm4gTmFOO1xuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59O1xuXG5pZiAoISROdW1iZXIoJyAwbzEnKSB8fCAhJE51bWJlcignMGIxJykgfHwgJE51bWJlcignKzB4MScpKSB7XG4gICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgICB2YXIgaXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiB2YWx1ZTtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIHRoYXQgaW5zdGFuY2VvZiAkTnVtYmVyXG4gICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICAgICYmIChCUk9LRU5fQ09GID8gZmFpbHMoZnVuY3Rpb24gKCkgeyBwcm90by52YWx1ZU9mLmNhbGwodGhhdCk7IH0pIDogY29mKHRoYXQpICE9IE5VTUJFUilcbiAgICAgICAgPyBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSh0b051bWJlcihpdCkpLCB0aGF0LCAkTnVtYmVyKSA6IHRvTnVtYmVyKGl0KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BOKEJhc2UpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVM2IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVM2IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICtcbiAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcidcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKykge1xuICAgIGlmIChoYXMoQmFzZSwga2V5ID0ga2V5c1tqXSkgJiYgIWhhcygkTnVtYmVyLCBrZXkpKSB7XG4gICAgICBkUCgkTnVtYmVyLCBrZXksIGdPUEQoQmFzZSwga2V5KSk7XG4gICAgfVxuICB9XG4gICROdW1iZXIucHJvdG90eXBlID0gcHJvdG87XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJE51bWJlcjtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XG59XG4iLCIvLyAyMC4xLjIuMSBOdW1iZXIuRVBTSUxPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IEVQU0lMT046IE1hdGgucG93KDIsIC01MikgfSk7XG4iLCIvLyAyMC4xLjIuMiBOdW1iZXIuaXNGaW5pdGUobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBfaXNGaW5pdGUgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5pc0Zpbml0ZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzRmluaXRlOiBmdW5jdGlvbiBpc0Zpbml0ZShpdCkge1xuICAgIHJldHVybiB0eXBlb2YgaXQgPT0gJ251bWJlcicgJiYgX2lzRmluaXRlKGl0KTtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBpc0ludGVnZXI6IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKSB9KTtcbiIsIi8vIDIwLjEuMi40IE51bWJlci5pc05hTihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuNSBOdW1iZXIuaXNTYWZlSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzSW50ZWdlciA9IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKSB7XG4gICAgcmV0dXJuIGlzSW50ZWdlcihudW1iZXIpICYmIGFicyhudW1iZXIpIDw9IDB4MWZmZmZmZmZmZmZmZmY7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjYgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNQVhfU0FGRV9JTlRFR0VSOiAweDFmZmZmZmZmZmZmZmZmIH0pO1xuIiwiLy8gMjAuMS4yLjEwIE51bWJlci5NSU5fU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUlOX1NBRkVfSU5URUdFUjogLTB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDIwLjEuMi4xMiBOdW1iZXIucGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksICdOdW1iZXInLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDIwLjEuMi4xMyBOdW1iZXIucGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUludCAhPSAkcGFyc2VJbnQpLCAnTnVtYmVyJywgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XG52YXIgJHRvRml4ZWQgPSAxLjAudG9GaXhlZDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgZGF0YSA9IFswLCAwLCAwLCAwLCAwLCAwXTtcbnZhciBFUlJPUiA9ICdOdW1iZXIudG9GaXhlZDogaW5jb3JyZWN0IGludm9jYXRpb24hJztcbnZhciBaRVJPID0gJzAnO1xuXG52YXIgbXVsdGlwbHkgPSBmdW5jdGlvbiAobiwgYykge1xuICB2YXIgaSA9IC0xO1xuICB2YXIgYzIgPSBjO1xuICB3aGlsZSAoKytpIDwgNikge1xuICAgIGMyICs9IG4gKiBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBjMiAlIDFlNztcbiAgICBjMiA9IGZsb29yKGMyIC8gMWU3KTtcbiAgfVxufTtcbnZhciBkaXZpZGUgPSBmdW5jdGlvbiAobikge1xuICB2YXIgaSA9IDY7XG4gIHZhciBjID0gMDtcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgYyArPSBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBmbG9vcihjIC8gbik7XG4gICAgYyA9IChjICUgbikgKiAxZTc7XG4gIH1cbn07XG52YXIgbnVtVG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIHMgPSAnJztcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgaWYgKHMgIT09ICcnIHx8IGkgPT09IDAgfHwgZGF0YVtpXSAhPT0gMCkge1xuICAgICAgdmFyIHQgPSBTdHJpbmcoZGF0YVtpXSk7XG4gICAgICBzID0gcyA9PT0gJycgPyB0IDogcyArIHJlcGVhdC5jYWxsKFpFUk8sIDcgLSB0Lmxlbmd0aCkgKyB0O1xuICAgIH1cbiAgfSByZXR1cm4gcztcbn07XG52YXIgcG93ID0gZnVuY3Rpb24gKHgsIG4sIGFjYykge1xuICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7XG59O1xudmFyIGxvZyA9IGZ1bmN0aW9uICh4KSB7XG4gIHZhciBuID0gMDtcbiAgdmFyIHgyID0geDtcbiAgd2hpbGUgKHgyID49IDQwOTYpIHtcbiAgICBuICs9IDEyO1xuICAgIHgyIC89IDQwOTY7XG4gIH1cbiAgd2hpbGUgKHgyID49IDIpIHtcbiAgICBuICs9IDE7XG4gICAgeDIgLz0gMjtcbiAgfSByZXR1cm4gbjtcbn07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCEhJHRvRml4ZWQgJiYgKFxuICAwLjAwMDA4LnRvRml4ZWQoMykgIT09ICcwLjAwMCcgfHxcbiAgMC45LnRvRml4ZWQoMCkgIT09ICcxJyB8fFxuICAxLjI1NS50b0ZpeGVkKDIpICE9PSAnMS4yNScgfHxcbiAgMTAwMDAwMDAwMDAwMDAwMDEyOC4wLnRvRml4ZWQoMCkgIT09ICcxMDAwMDAwMDAwMDAwMDAwMTI4J1xuKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b0ZpeGVkLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgdmFyIHggPSBhTnVtYmVyVmFsdWUodGhpcywgRVJST1IpO1xuICAgIHZhciBmID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKTtcbiAgICB2YXIgcyA9ICcnO1xuICAgIHZhciBtID0gWkVSTztcbiAgICB2YXIgZSwgeiwgaiwgaztcbiAgICBpZiAoZiA8IDAgfHwgZiA+IDIwKSB0aHJvdyBSYW5nZUVycm9yKEVSUk9SKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKHggIT0geCkgcmV0dXJuICdOYU4nO1xuICAgIGlmICh4IDw9IC0xZTIxIHx8IHggPj0gMWUyMSkgcmV0dXJuIFN0cmluZyh4KTtcbiAgICBpZiAoeCA8IDApIHtcbiAgICAgIHMgPSAnLSc7XG4gICAgICB4ID0gLXg7XG4gICAgfVxuICAgIGlmICh4ID4gMWUtMjEpIHtcbiAgICAgIGUgPSBsb2coeCAqIHBvdygyLCA2OSwgMSkpIC0gNjk7XG4gICAgICB6ID0gZSA8IDAgPyB4ICogcG93KDIsIC1lLCAxKSA6IHggLyBwb3coMiwgZSwgMSk7XG4gICAgICB6ICo9IDB4MTAwMDAwMDAwMDAwMDA7XG4gICAgICBlID0gNTIgLSBlO1xuICAgICAgaWYgKGUgPiAwKSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBqID0gZjtcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KDEsIDEpO1xuICAgICAgICBkaXZpZGUoMik7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIG11bHRpcGx5KDEgPDwgLWUsIDApO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKSArIHJlcGVhdC5jYWxsKFpFUk8sIGYpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZiA+IDApIHtcbiAgICAgIGsgPSBtLmxlbmd0aDtcbiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBzICsgbTtcbiAgICB9IHJldHVybiBtO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyICR0b1ByZWNpc2lvbiA9IDEuMC50b1ByZWNpc2lvbjtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU3LVxuICByZXR1cm4gJHRvUHJlY2lzaW9uLmNhbGwoMSwgdW5kZWZpbmVkKSAhPT0gJzEnO1xufSkgfHwgISRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b1ByZWNpc2lvbi5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9QcmVjaXNpb246IGZ1bmN0aW9uIHRvUHJlY2lzaW9uKHByZWNpc2lvbikge1xuICAgIHZhciB0aGF0ID0gYU51bWJlclZhbHVlKHRoaXMsICdOdW1iZXIjdG9QcmVjaXNpb246IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICAgIHJldHVybiBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQpIDogJHRvUHJlY2lzaW9uLmNhbGwodGhhdCwgcHJlY2lzaW9uKTtcbiAgfVxufSk7XG4iLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7IGFzc2lnbjogcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGNyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnRpZXM6IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYgfSk7XG4iLCIvLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2ZyZWV6ZScsIGZ1bmN0aW9uICgkZnJlZXplKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmcmVlemUoaXQpIHtcbiAgICByZXR1cm4gJGZyZWV6ZSAmJiBpc09iamVjdChpdCkgPyAkZnJlZXplKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0lPYmplY3QoaXQpLCBrZXkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JykuZjtcbn0pO1xuIiwiLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAkZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjExIE9iamVjdC5pc0V4dGVuc2libGUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uICgkaXNFeHRlbnNpYmxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0V4dGVuc2libGUoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTIgT2JqZWN0LmlzRnJvemVuKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0Zyb3plbicsIGZ1bmN0aW9uICgkaXNGcm96ZW4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRnJvemVuKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMyBPYmplY3QuaXNTZWFsZWQoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzU2VhbGVkJywgZnVuY3Rpb24gKCRpc1NlYWxlZCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzU2VhbGVkID8gJGlzU2VhbGVkKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4zLjEwIE9iamVjdC5pcyh2YWx1ZTEsIHZhbHVlMilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgaXM6IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKSB9KTtcbiIsIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgncHJldmVudEV4dGVuc2lvbnMnLCBmdW5jdGlvbiAoJHByZXZlbnRFeHRlbnNpb25zKSB7XG4gIHJldHVybiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyhpdCkge1xuICAgIHJldHVybiAkcHJldmVudEV4dGVuc2lvbnMgJiYgaXNPYmplY3QoaXQpID8gJHByZXZlbnRFeHRlbnNpb25zKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTcgT2JqZWN0LnNlYWwoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnc2VhbCcsIGZ1bmN0aW9uICgkc2VhbCkge1xuICByZXR1cm4gZnVuY3Rpb24gc2VhbChpdCkge1xuICAgIHJldHVybiAkc2VhbCAmJiBpc09iamVjdChpdCkgPyAkc2VhbChtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldCB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZiAodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJykge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDE4LjIuNCBwYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDE4LjIuNSBwYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52OCB8fCAnJztcbnZhciAkUHJvbWlzZSA9IGdsb2JhbFtQUk9NSVNFXTtcbnZhciBpc05vZGUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBJbnRlcm5hbCwgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG5cbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgPSAkUHJvbWlzZS5yZXNvbHZlKDEpO1xuICAgIHZhciBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICAgIGV4ZWMoZW1wdHksIGVtcHR5KTtcbiAgICB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpXG4gICAgICAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2VcbiAgICAgIC8vIHY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAgICAgLy8gd2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICAgICYmIHY4LmluZGV4T2YoJzYuNicpICE9PSAwXG4gICAgICAmJiB1c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lLzY2JykgPT09IC0xO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIGlzUmVqZWN0KSB7XG4gIGlmIChwcm9taXNlLl9uKSByZXR1cm47XG4gIHByb21pc2UuX24gPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9jO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIG9rID0gcHJvbWlzZS5fcyA9PSAxO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcnVuID0gZnVuY3Rpb24gKHJlYWN0aW9uKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChwcm9taXNlLl9oID09IDIpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpO1xuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIG1heSB0aHJvd1xuICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xuICAgIHZhciByZXN1bHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYgKHVuaGFuZGxlZCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgcmV0dXJuIHByb21pc2UuX2ggIT09IDEgJiYgKHByb21pc2UuX2EgfHwgcHJvbWlzZS5fYykubGVuZ3RoID09PSAwO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKSB7XG4gICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92IH0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fcyA9IDI7XG4gIGlmICghcHJvbWlzZS5fYSkgcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIHZhciB0aGVuO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICBpZiAodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgICRyZWplY3QuY2FsbCh7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmICghVVNFX05BVElWRSkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fYSkgdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9zKSBub3RpZnkodGhpcywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09ICRQcm9taXNlIHx8IEMgPT09IFdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBQcm9taXNlOiAkUHJvbWlzZSB9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgdmFyICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKExJQlJBUlkgJiYgdGhpcyA9PT0gV3JhcHBlciA/ICRQcm9taXNlIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikge1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciAkaW5kZXggPSBpbmRleCsrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEgUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgckFwcGx5ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmFwcGx5O1xudmFyIGZBcHBseSA9IEZ1bmN0aW9uLmFwcGx5O1xuLy8gTVMgRWRnZSBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgckFwcGx5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCkge1xuICAgIHZhciBUID0gYUZ1bmN0aW9uKHRhcmdldCk7XG4gICAgdmFyIEwgPSBhbk9iamVjdChhcmd1bWVudHNMaXN0KTtcbiAgICByZXR1cm4gckFwcGx5ID8gckFwcGx5KFQsIHRoaXNBcmd1bWVudCwgTCkgOiBmQXBwbHkuY2FsbChULCB0aGlzQXJndW1lbnQsIEwpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL19iaW5kJyk7XG52YXIgckNvbnN0cnVjdCA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5jb25zdHJ1Y3Q7XG5cbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xudmFyIEFSR1NfQlVHID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgckNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHKSwgJ1JlZmxlY3QnLCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiAsIG5ld1RhcmdldCAqLykge1xuICAgIGFGdW5jdGlvbihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFGdW5jdGlvbihhcmd1bWVudHNbMl0pO1xuICAgIGlmIChBUkdTX0JVRyAmJiAhTkVXX1RBUkdFVF9CVUcpIHJldHVybiByQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcbiAgICBpZiAoVGFyZ2V0ID09IG5ld1RhcmdldCkge1xuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHNcbiAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldCgpO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgfVxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2VcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcbiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gRnVuY3Rpb24uYXBwbHkuY2FsbChUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMyBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4vLyBNUyBFZGdlIGhhcyBicm9rZW4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSAtIHRocm93aW5nIGluc3RlYWQgb2YgcmV0dXJuaW5nIGZhbHNlXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShkUC5mKHt9LCAxLCB7IHZhbHVlOiAxIH0pLCAxLCB7IHZhbHVlOiAyIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShwcm9wZXJ0eUtleSwgdHJ1ZSk7XG4gICAgYW5PYmplY3QoYXR0cmlidXRlcyk7XG4gICAgdHJ5IHtcbiAgICAgIGRQLmYodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHZhciBkZXNjID0gZ09QRChhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIEVudW1lcmF0ZSA9IGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gYW5PYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB2YXIga2V5cyA9IHRoaXMuX2sgPSBbXTsgICAgICAvLyBrZXlzXG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIGl0ZXJhdGVkKSBrZXlzLnB1c2goa2V5KTtcbn07XG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIga2V5cyA9IHRoYXQuX2s7XG4gIHZhciBrZXk7XG4gIGRvIHtcbiAgICBpZiAodGhhdC5faSA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9IHdoaWxlICghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTtcbiAgcmV0dXJuIHsgdmFsdWU6IGtleSwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCkge1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS43IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuOCBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ2V0UHJvdG8gPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGdldFByb3RvKGFuT2JqZWN0KHRhcmdldCkpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuNiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3BlcnR5S2V5IFssIHJlY2VpdmVyXSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBnZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdO1xuICB2YXIgZGVzYywgcHJvdG87XG4gIGlmIChhbk9iamVjdCh0YXJnZXQpID09PSByZWNlaXZlcikgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIGlmIChkZXNjID0gZ09QRC5mKHRhcmdldCwgcHJvcGVydHlLZXkpKSByZXR1cm4gaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgPyBkZXNjLnZhbHVlXG4gICAgOiBkZXNjLmdldCAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHJldHVybiBnZXQocHJvdG8sIHByb3BlcnR5S2V5LCByZWNlaXZlcik7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgZ2V0OiBnZXQgfSk7XG4iLCIvLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMCBSZWZsZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICByZXR1cm4gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUodGFyZ2V0KSA6IHRydWU7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMSBSZWZsZWN0Lm93bktleXModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBvd25LZXlzOiByZXF1aXJlKCcuL19vd24ta2V5cycpIH0pO1xuIiwiLy8gMjYuMS4xMiBSZWZsZWN0LnByZXZlbnRFeHRlbnNpb25zKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdHJ5IHtcbiAgICAgIGlmICgkcHJldmVudEV4dGVuc2lvbnMpICRwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjE0IFJlZmxlY3Quc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2V0UHJvdG8gPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKTtcblxuaWYgKHNldFByb3RvKSAkZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKSB7XG4gICAgc2V0UHJvdG8uY2hlY2sodGFyZ2V0LCBwcm90byk7XG4gICAgdHJ5IHtcbiAgICAgIHNldFByb3RvLnNldCh0YXJnZXQsIHByb3RvKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMyBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIFssIHJlY2VpdmVyXSlcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxuZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXTtcbiAgdmFyIG93bkRlc2MgPSBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB2YXIgZXhpc3RpbmdEZXNjcmlwdG9yLCBwcm90bztcbiAgaWYgKCFvd25EZXNjKSB7XG4gICAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHtcbiAgICAgIHJldHVybiBzZXQocHJvdG8sIHByb3BlcnR5S2V5LCBWLCByZWNlaXZlcik7XG4gICAgfVxuICAgIG93bkRlc2MgPSBjcmVhdGVEZXNjKDApO1xuICB9XG4gIGlmIChoYXMob3duRGVzYywgJ3ZhbHVlJykpIHtcbiAgICBpZiAob3duRGVzYy53cml0YWJsZSA9PT0gZmFsc2UgfHwgIWlzT2JqZWN0KHJlY2VpdmVyKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IgPSBnT1BELmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5KSkge1xuICAgICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvci5nZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLnNldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iud3JpdGFibGUgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICBleGlzdGluZ0Rlc2NyaXB0b3IudmFsdWUgPSBWO1xuICAgICAgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGV4aXN0aW5nRGVzY3JpcHRvcik7XG4gICAgfSBlbHNlIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBjcmVhdGVEZXNjKDAsIFYpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb3duRGVzYy5zZXQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogKG93bkRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIFYpLCB0cnVlKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBzZXQ6IHNldCB9KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgQmFzZSA9ICRSZWdFeHA7XG52YXIgcHJvdG8gPSAkUmVnRXhwLnByb3RvdHlwZTtcbnZhciByZTEgPSAvYS9nO1xudmFyIHJlMiA9IC9hL2c7XG4vLyBcIm5ld1wiIGNyZWF0ZXMgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z2d5IGhlcmVcbnZhciBDT1JSRUNUX05FVyA9IG5ldyAkUmVnRXhwKHJlMSkgIT09IHJlMTtcblxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgKCFDT1JSRUNUX05FVyB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmUyW3JlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpXSA9IGZhbHNlO1xuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbn0pKSkge1xuICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpIHtcbiAgICB2YXIgdGlSRSA9IHRoaXMgaW5zdGFuY2VvZiAkUmVnRXhwO1xuICAgIHZhciBwaVJFID0gaXNSZWdFeHAocCk7XG4gICAgdmFyIGZpVSA9IGYgPT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHBcbiAgICAgIDogaW5oZXJpdElmUmVxdWlyZWQoQ09SUkVDVF9ORVdcbiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpXG4gICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpXG4gICAgICAsIHRpUkUgPyB0aGlzIDogcHJvdG8sICRSZWdFeHApO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluICRSZWdFeHAgfHwgZFAoJFJlZ0V4cCwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJhc2Vba2V5XTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKGl0KSB7IEJhc2Vba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2UpLCBpID0gMDsga2V5cy5sZW5ndGggPiBpOykgcHJveHkoa2V5c1tpKytdKTtcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwO1xuICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgJ1JlZ0V4cCcsICRSZWdFeHApO1xufVxuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdSZWdFeHAnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcbnJlcXVpcmUoJy4vX2V4cG9ydCcpKHtcbiAgdGFyZ2V0OiAnUmVnRXhwJyxcbiAgcHJvdG86IHRydWUsXG4gIGZvcmNlZDogcmVnZXhwRXhlYyAhPT0gLy4vLmV4ZWNcbn0sIHtcbiAgZXhlYzogcmVnZXhwRXhlY1xufSk7XG4iLCIvLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncygpXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAvLi9nLmZsYWdzICE9ICdnJykgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiByZXF1aXJlKCcuL19mbGFncycpXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQG1hdGNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ21hdGNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIE1BVENILCAkbWF0Y2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLm1hdGNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLm1hdGNoXG4gICAgZnVuY3Rpb24gbWF0Y2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBtYXRjaFxuICAgIGZ1bmN0aW9uIChyZWdleHApIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJG1hdGNoLCByZWdleHAsIHRoaXMpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKCFyeC5nbG9iYWwpIHJldHVybiByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHZhciBuID0gMDtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICB3aGlsZSAoKHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpKSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgQVtuXSA9IG1hdGNoU3RyO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgICBuKys7XG4gICAgICB9XG4gICAgICByZXR1cm4gbiA9PT0gMCA/IG51bGwgOiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCZgJ118XFxkXFxkP3w8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCZgJ118XFxkXFxkPykvZztcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlXG4gICAgZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRyZXBsYWNlLCByZWdleHAsIHRoaXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBmdW5jdGlvbmFsUmVwbGFjZSA9IHR5cGVvZiByZXBsYWNlVmFsdWUgPT09ICdmdW5jdGlvbic7XG4gICAgICBpZiAoIWZ1bmN0aW9uYWxSZXBsYWNlKSByZXBsYWNlVmFsdWUgPSBTdHJpbmcocmVwbGFjZVZhbHVlKTtcbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcbiAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgIGlmICghZ2xvYmFsKSBicmVhaztcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICB9XG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG4gICAgICAgIHZhciBtYXRjaGVkID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IG1heChtaW4odG9JbnRlZ2VyKHJlc3VsdC5pbmRleCksIFMubGVuZ3RoKSwgMCk7XG4gICAgICAgIHZhciBjYXB0dXJlcyA9IFtdO1xuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAgICAgICAgLy8gICBjYXB0dXJlcyA9IHJlc3VsdC5zbGljZSgxKS5tYXAobWF5YmVUb1N0cmluZylcbiAgICAgICAgLy8gYnV0IGZvciBzb21lIHJlYXNvbiBgbmF0aXZlU2xpY2UuY2FsbChyZXN1bHQsIDEsIHJlc3VsdC5sZW5ndGgpYCAoY2FsbGVkIGluXG4gICAgICAgIC8vIHRoZSBzbGljZSBwb2x5ZmlsbCB3aGVuIHNsaWNpbmcgbmF0aXZlIGFycmF5cykgXCJkb2Vzbid0IHdvcmtcIiBpbiBzYWZhcmkgOSBhbmRcbiAgICAgICAgLy8gY2F1c2VzIGEgY3Jhc2ggKGh0dHBzOi8vcGFzdGViaW4uY29tL04yMVF6ZVFBKSB3aGVuIHRyeWluZyB0byBkZWJ1ZyBpdC5cbiAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCByZXN1bHQubGVuZ3RoOyBqKyspIGNhcHR1cmVzLnB1c2gobWF5YmVUb1N0cmluZyhyZXN1bHRbal0pKTtcbiAgICAgICAgdmFyIG5hbWVkQ2FwdHVyZXMgPSByZXN1bHQuZ3JvdXBzO1xuICAgICAgICBpZiAoZnVuY3Rpb25hbFJlcGxhY2UpIHtcbiAgICAgICAgICB2YXIgcmVwbGFjZXJBcmdzID0gW21hdGNoZWRdLmNvbmNhdChjYXB0dXJlcywgcG9zaXRpb24sIFMpO1xuICAgICAgICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHJlcGxhY2VyQXJncy5wdXNoKG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IFN0cmluZyhyZXBsYWNlVmFsdWUuYXBwbHkodW5kZWZpbmVkLCByZXBsYWNlckFyZ3MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBsYWNlbWVudCA9IGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBTLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID49IG5leHRTb3VyY2VQb3NpdGlvbikge1xuICAgICAgICAgIGFjY3VtdWxhdGVkUmVzdWx0ICs9IFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcbiAgICAgICAgICBuZXh0U291cmNlUG9zaXRpb24gPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0ZWRSZXN1bHQgKyBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbik7XG4gICAgfVxuICBdO1xuXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0c3Vic3RpdHV0aW9uXG4gIGZ1bmN0aW9uIGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcbiAgICB2YXIgdGFpbFBvcyA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgdmFyIG0gPSBjYXB0dXJlcy5sZW5ndGg7XG4gICAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcbiAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBuYW1lZENhcHR1cmVzID0gdG9PYmplY3QobmFtZWRDYXB0dXJlcyk7XG4gICAgICBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFM7XG4gICAgfVxuICAgIHJldHVybiAkcmVwbGFjZS5jYWxsKHJlcGxhY2VtZW50LCBzeW1ib2xzLCBmdW5jdGlvbiAobWF0Y2gsIGNoKSB7XG4gICAgICB2YXIgY2FwdHVyZTtcbiAgICAgIHN3aXRjaCAoY2guY2hhckF0KDApKSB7XG4gICAgICAgIGNhc2UgJyQnOiByZXR1cm4gJyQnO1xuICAgICAgICBjYXNlICcmJzogcmV0dXJuIG1hdGNoZWQ7XG4gICAgICAgIGNhc2UgJ2AnOiByZXR1cm4gc3RyLnNsaWNlKDAsIHBvc2l0aW9uKTtcbiAgICAgICAgY2FzZSBcIidcIjogcmV0dXJuIHN0ci5zbGljZSh0YWlsUG9zKTtcbiAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgICAgY2FwdHVyZSA9IG5hbWVkQ2FwdHVyZXNbY2guc2xpY2UoMSwgLTEpXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDogLy8gXFxkXFxkP1xuICAgICAgICAgIHZhciBuID0gK2NoO1xuICAgICAgICAgIGlmIChuID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgaWYgKG4gPiBtKSB7XG4gICAgICAgICAgICB2YXIgZiA9IGZsb29yKG4gLyAxMCk7XG4gICAgICAgICAgICBpZiAoZiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgICAgaWYgKGYgPD0gbSkgcmV0dXJuIGNhcHR1cmVzW2YgLSAxXSA9PT0gdW5kZWZpbmVkID8gY2guY2hhckF0KDEpIDogY2FwdHVyZXNbZiAtIDFdICsgY2guY2hhckF0KDEpO1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXB0dXJlID0gY2FwdHVyZXNbbiAtIDFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNhcHR1cmUgPT09IHVuZGVmaW5lZCA/ICcnIDogY2FwdHVyZTtcbiAgICB9KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHNhbWVWYWx1ZSA9IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBzZWFyY2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc2VhcmNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIFNFQVJDSCwgJHNlYXJjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc2VhcmNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNlYXJjaFxuICAgIGZ1bmN0aW9uIHNlYXJjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbU0VBUkNIXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNlYXJjaFxuICAgIGZ1bmN0aW9uIChyZWdleHApIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJHNlYXJjaCwgcmVnZXhwLCB0aGlzKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBwcmV2aW91c0xhc3RJbmRleCA9IHJ4Lmxhc3RJbmRleDtcbiAgICAgIGlmICghc2FtZVZhbHVlKHByZXZpb3VzTGFzdEluZGV4LCAwKSkgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgIGlmICghc2FtZVZhbHVlKHJ4Lmxhc3RJbmRleCwgcHJldmlvdXNMYXN0SW5kZXgpKSByeC5sYXN0SW5kZXggPSBwcmV2aW91c0xhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IG51bGwgPyAtMSA6IHJlc3VsdC5pbmRleDtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNhbGxSZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJG1pbiA9IE1hdGgubWluO1xudmFyICRwdXNoID0gW10ucHVzaDtcbnZhciAkU1BMSVQgPSAnc3BsaXQnO1xudmFyIExFTkdUSCA9ICdsZW5ndGgnO1xudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcbnZhciBNQVhfVUlOVDMyID0gMHhmZmZmZmZmZjtcblxuLy8gYmFiZWwtbWluaWZ5IHRyYW5zcGlsZXMgUmVnRXhwKCd4JywgJ3knKSAtPiAveC95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciBTVVBQT1JUU19ZID0gIWZhaWxzKGZ1bmN0aW9uICgpIHsgUmVnRXhwKE1BWF9VSU5UMzIsICd5Jyk7IH0pO1xuXG4vLyBAQHNwbGl0IGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NwbGl0JywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFNQTElULCAkc3BsaXQsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICB2YXIgaW50ZXJuYWxTcGxpdDtcbiAgaWYgKFxuICAgICdhYmJjJ1skU1BMSVRdKC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgJ3Rlc3QnWyRTUExJVF0oLyg/OikvLCAtMSlbTEVOR1RIXSAhPSA0IHx8XG4gICAgJ2FiJ1skU1BMSVRdKC8oPzphYikqLylbTEVOR1RIXSAhPSAyIHx8XG4gICAgJy4nWyRTUExJVF0oLyguPykoLj8pLylbTEVOR1RIXSAhPSA0IHx8XG4gICAgJy4nWyRTUExJVF0oLygpKCkvKVtMRU5HVEhdID4gMSB8fFxuICAgICcnWyRTUExJVF0oLy4/LylbTEVOR1RIXVxuICApIHtcbiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXRcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDApIHJldHVybiBbXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHJldHVybiAkc3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBzcGxpdExpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGg7XG4gICAgICB3aGlsZSAobWF0Y2ggPSByZWdleHBFeGVjLmNhbGwoc2VwYXJhdG9yQ29weSwgc3RyaW5nKSkge1xuICAgICAgICBsYXN0SW5kZXggPSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdO1xuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIGlmIChtYXRjaFtMRU5HVEhdID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZ1tMRU5HVEhdKSAkcHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgIGlmIChvdXRwdXRbTEVOR1RIXSA+PSBzcGxpdExpbWl0KSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSA9PT0gbWF0Y2guaW5kZXgpIHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0rKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZ1tMRU5HVEhdKSB7XG4gICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKSBvdXRwdXQucHVzaCgnJyk7XG4gICAgICB9IGVsc2Ugb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiBvdXRwdXRbTEVOR1RIXSA+IHNwbGl0TGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgc3BsaXRMaW1pdCkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgLy8gQ2hha3JhLCBWOFxuICB9IGVsc2UgaWYgKCcwJ1skU1BMSVRdKHVuZGVmaW5lZCwgMClbTEVOR1RIXSkge1xuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiAkc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGludGVybmFsU3BsaXQgPSAkc3BsaXQ7XG4gIH1cblxuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNwbGl0YCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNwbGl0XG4gICAgZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIHNwbGl0dGVyID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgICByZXR1cm4gc3BsaXR0ZXIgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IHNwbGl0dGVyLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdClcbiAgICAgICAgOiBpbnRlcm5hbFNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc3BsaXRcbiAgICAvL1xuICAgIC8vIE5PVEU6IFRoaXMgY2Fubm90IGJlIHByb3Blcmx5IHBvbHlmaWxsZWQgaW4gZW5naW5lcyB0aGF0IGRvbid0IHN1cHBvcnRcbiAgICAvLyB0aGUgJ3knIGZsYWcuXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgbGltaXQpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoaW50ZXJuYWxTcGxpdCwgcmVnZXhwLCB0aGlzLCBsaW1pdCwgaW50ZXJuYWxTcGxpdCAhPT0gJHNwbGl0KTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IocngsIFJlZ0V4cCk7XG5cbiAgICAgIHZhciB1bmljb2RlTWF0Y2hpbmcgPSByeC51bmljb2RlO1xuICAgICAgdmFyIGZsYWdzID0gKHJ4Lmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4Lm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoU1VQUE9SVFNfWSA/ICd5JyA6ICdnJyk7XG5cbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBTIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICB2YXIgc3BsaXR0ZXIgPSBuZXcgQyhTVVBQT1JUU19ZID8gcnggOiAnXig/OicgKyByeC5zb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKFMubGVuZ3RoID09PSAwKSByZXR1cm4gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFMpID09PSBudWxsID8gW1NdIDogW107XG4gICAgICB2YXIgcCA9IDA7XG4gICAgICB2YXIgcSA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgd2hpbGUgKHEgPCBTLmxlbmd0aCkge1xuICAgICAgICBzcGxpdHRlci5sYXN0SW5kZXggPSBTVVBQT1JUU19ZID8gcSA6IDA7XG4gICAgICAgIHZhciB6ID0gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFNVUFBPUlRTX1kgPyBTIDogUy5zbGljZShxKSk7XG4gICAgICAgIHZhciBlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgeiA9PT0gbnVsbCB8fFxuICAgICAgICAgIChlID0gJG1pbih0b0xlbmd0aChzcGxpdHRlci5sYXN0SW5kZXggKyAoU1VQUE9SVFNfWSA/IDAgOiBxKSksIFMubGVuZ3RoKSkgPT09IHBcbiAgICAgICAgKSB7XG4gICAgICAgICAgcSA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCBxLCB1bmljb2RlTWF0Y2hpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEEucHVzaChTLnNsaWNlKHAsIHEpKTtcbiAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gei5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIEEucHVzaCh6W2ldKTtcbiAgICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcSA9IHAgPSBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBBLnB1c2goUy5zbGljZShwKSk7XG4gICAgICByZXR1cm4gQTtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uIChmbikge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYgKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0VUID0gJ1NldCc7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFNFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgU0VUKSwgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hvcihuYW1lKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYW5jaG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGFuY2hvcihuYW1lKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4zIFN0cmluZy5wcm90b3R5cGUuYmlnKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JpZycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBiaWcoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JpZycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjQgU3RyaW5nLnByb3RvdHlwZS5ibGluaygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdibGluaycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBibGluaygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmxpbmsnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy41IFN0cmluZy5wcm90b3R5cGUuYm9sZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdib2xkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJvbGQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2InLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKGZhbHNlKTtcbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMyBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0KHBvcylcbiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uIGNvZGVQb2ludEF0KHBvcykge1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG4iLCIvLyAyMS4xLjMuNiBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKHNlYXJjaFN0cmluZyBbLCBlbmRQb3NpdGlvbl0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgRU5EU19XSVRIID0gJ2VuZHNXaXRoJztcbnZhciAkZW5kc1dpdGggPSAnJ1tFTkRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKEVORFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBlbmRQb3NpdGlvbiA9IEBsZW5ndGggKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBFTkRTX1dJVEgpO1xuICAgIHZhciBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGF0Lmxlbmd0aCk7XG4gICAgdmFyIGVuZCA9IGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyBsZW4gOiBNYXRoLm1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbik7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkZW5kc1dpdGhcbiAgICAgID8gJGVuZHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBlbmQpXG4gICAgICA6IHRoYXQuc2xpY2UoZW5kIC0gc2VhcmNoLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjYgU3RyaW5nLnByb3RvdHlwZS5maXhlZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmaXhlZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmaXhlZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAndHQnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy43IFN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yKGNvbG9yKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udGNvbG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcikge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ2NvbG9yJywgY29sb3IpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy44IFN0cmluZy5wcm90b3R5cGUuZm9udHNpemUoc2l6ZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRzaXplJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRzaXplKHNpemUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdzaXplJywgc2l6ZSk7XG4gIH07XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyICRmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDEpLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKVxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBjb2RlO1xuICAgIHdoaWxlIChhTGVuID4gaSkge1xuICAgICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTtcbiAgICAgIGlmICh0b0Fic29sdXRlSW5kZXgoY29kZSwgMHgxMGZmZmYpICE9PSBjb2RlKSB0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwXG4gICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICAgIDogZnJvbUNoYXJDb2RlKCgoY29kZSAtPSAweDEwMDAwKSA+PiAxMCkgKyAweGQ4MDAsIGNvZGUgJSAweDQwMCArIDB4ZGMwMClcbiAgICAgICk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsIi8vIDIxLjEuMy43IFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiA9IDApXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIElOQ0xVREVTID0gJ2luY2x1ZGVzJztcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShJTkNMVURFUyksICdTdHJpbmcnLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICByZXR1cm4gISF+Y29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIElOQ0xVREVTKVxuICAgICAgLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOSBTdHJpbmcucHJvdG90eXBlLml0YWxpY3MoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnaXRhbGljcycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpdGFsaWNzKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdpJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMCBTdHJpbmcucHJvdG90eXBlLmxpbmsodXJsKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnbGluaycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBsaW5rKHVybCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ2hyZWYnLCB1cmwpO1xuICB9O1xufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjQgU3RyaW5nLnJhdyhjYWxsU2l0ZSwgLi4uc3Vic3RpdHV0aW9ucylcbiAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpIHtcbiAgICB2YXIgdHBsID0gdG9JT2JqZWN0KGNhbGxTaXRlLnJhdyk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRwbC5sZW5ndGgpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChsZW4gPiBpKSB7XG4gICAgICByZXMucHVzaChTdHJpbmcodHBsW2krK10pKTtcbiAgICAgIGlmIChpIDwgYUxlbikgcmVzLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KVxuICByZXBlYXQ6IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMSBTdHJpbmcucHJvdG90eXBlLnNtYWxsKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3NtYWxsJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNtYWxsKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIi8vIDIxLjEuMy4xOCBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIFssIHBvc2l0aW9uIF0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgU1RBUlRTX1dJVEggPSAnc3RhcnRzV2l0aCc7XG52YXIgJHN0YXJ0c1dpdGggPSAnJ1tTVEFSVFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoU1RBUlRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIFNUQVJUU19XSVRIKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRzdGFydHNXaXRoXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N0cmlrZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdHJpa2UoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEzIFN0cmluZy5wcm90b3R5cGUuc3ViKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1YicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdWIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1YicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjE0IFN0cmluZy5wcm90b3R5cGUuc3VwKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1cCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdXAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1cCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbScsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBfY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJEdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbicgJiYgISEkR09QUy5mO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICAkR09QUy5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xuXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9ICRmYWlscyhmdW5jdGlvbiAoKSB7ICRHT1BTLmYoMSk7IH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIEZBSUxTX09OX1BSSU1JVElWRVMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuICRHT1BTLmYodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5BcnJheUJ1ZmZlcjtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgJEFycmF5QnVmZmVyID0gYnVmZmVyLkFycmF5QnVmZmVyO1xudmFyICREYXRhVmlldyA9IGJ1ZmZlci5EYXRhVmlldztcbnZhciAkaXNWaWV3ID0gJHR5cGVkLkFCViAmJiBBcnJheUJ1ZmZlci5pc1ZpZXc7XG52YXIgJHNsaWNlID0gJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZTtcbnZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQXJyYXlCdWZmZXIgIT09ICRBcnJheUJ1ZmZlciksIHsgQXJyYXlCdWZmZXI6ICRBcnJheUJ1ZmZlciB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhJHR5cGVkLkNPTlNUUiwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuMy4xIEFycmF5QnVmZmVyLmlzVmlldyhhcmcpXG4gIGlzVmlldzogZnVuY3Rpb24gaXNWaWV3KGl0KSB7XG4gICAgcmV0dXJuICRpc1ZpZXcgJiYgJGlzVmlldyhpdCkgfHwgaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7XG4gIH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuVSArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xufSksIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZClcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoJHNsaWNlICE9PSB1bmRlZmluZWQgJiYgZW5kID09PSB1bmRlZmluZWQpIHJldHVybiAkc2xpY2UuY2FsbChhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcbiAgICB2YXIgbGVuID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aDtcbiAgICB2YXIgZmlyc3QgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZCwgbGVuKTtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJEFycmF5QnVmZmVyKSkodG9MZW5ndGgoZmluIC0gZmlyc3QpKTtcbiAgICB2YXIgdmlld1MgPSBuZXcgJERhdGFWaWV3KHRoaXMpO1xuICAgIHZhciB2aWV3VCA9IG5ldyAkRGF0YVZpZXcocmVzdWx0KTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChmaXJzdCA8IGZpbikge1xuICAgICAgdmlld1Quc2V0VWludDgoaW5kZXgrKywgdmlld1MuZ2V0VWludDgoZmlyc3QrKykpO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoQVJSQVlfQlVGRkVSKTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL190eXBlZCcpLkFCViwge1xuICBEYXRhVmlldzogcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJykuRGF0YVZpZXdcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQ2NCcsIDgsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDY0QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OENsYW1wZWRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSwgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyk7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIElTX0lFMTEgPSAhZ2xvYmFsLkFjdGl2ZVhPYmplY3QgJiYgJ0FjdGl2ZVhPYmplY3QnIGluIGdsb2JhbDtcbnZhciBXRUFLX01BUCA9ICdXZWFrTWFwJztcbnZhciBnZXRXZWFrID0gbWV0YS5nZXRXZWFrO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IHdlYWsudWZzdG9yZTtcbnZhciBJbnRlcm5hbE1hcDtcblxudmFyIHdyYXBwZXIgPSBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrTWFwKCkge1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxudmFyIG1ldGhvZHMgPSB7XG4gIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCkpLmdldChrZXkpO1xuICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3RoaXMuX2ldIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19NQVApLCBrZXksIHZhbHVlKTtcbiAgfVxufTtcblxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcbnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfTUFQLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuaWYgKE5BVElWRV9XRUFLX01BUCAmJiBJU19JRTExKSB7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBXRUFLX01BUCk7XG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICBtZXRhLk5FRUQgPSB0cnVlO1xuICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcHJvdG8gPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gICAgdmFyIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbVxuICAgICAgaWYgKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9mKSB0aGlzLl9mID0gbmV3IEludGVybmFsTWFwKCk7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7XG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgLy8gc3RvcmUgYWxsIHRoZSByZXN0IG9uIG5hdGl2ZSB3ZWFrbWFwXG4gICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTtcbiAgICB9KTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFdFQUtfU0VUID0gJ1dlYWtTZXQnO1xuXG4vLyAyMy40IFdlYWtTZXQgT2JqZWN0c1xucmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuNC4zLjEgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX1NFVCksIHZhbHVlLCB0cnVlKTtcbiAgfVxufSwgd2VhaywgZmFsc2UsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtQXJyYXkucHJvdG90eXBlLmZsYXRNYXBcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4vX2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgZmxhdE1hcDogZnVuY3Rpb24gZmxhdE1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiwgQTtcbiAgICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gICAgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIDEsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmxhdE1hcCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtQXJyYXkucHJvdG90eXBlLmZsYXR0ZW5cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4vX2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgZmxhdHRlbjogZnVuY3Rpb24gZmxhdHRlbigvKiBkZXB0aEFyZyA9IDEgKi8pIHtcbiAgICB2YXIgZGVwdGhBcmcgPSBhcmd1bWVudHNbMF07XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCBkZXB0aEFyZyA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aEFyZykpO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZsYXR0ZW4nKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L0FycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2luY2x1ZGVzJyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vcndhbGRyb24vdGMzOS1ub3Rlcy9ibG9iL21hc3Rlci9lczYvMjAxNC0wOS9zZXB0LTI1Lm1kIzUxMC1nbG9iYWxhc2FwLWZvci1lbnF1ZXVpbmctYS1taWNyb3Rhc2tcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBwcm9jZXNzID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucHJvY2VzcztcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7XG4gIGFzYXA6IGZ1bmN0aW9uIGFzYXAoZm4pIHtcbiAgICB2YXIgZG9tYWluID0gaXNOb2RlICYmIHByb2Nlc3MuZG9tYWluO1xuICAgIG1pY3JvdGFzayhkb21haW4gPyBkb21haW4uYmluZChmbikgOiBmbik7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1pcy1lcnJvclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdFcnJvcicsIHtcbiAgaXNFcnJvcjogZnVuY3Rpb24gaXNFcnJvcihpdCkge1xuICAgIHJldHVybiBjb2YoaXQpID09PSAnRXJyb3InO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWdsb2JhbFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHsgZ2xvYmFsOiByZXF1aXJlKCcuL19nbG9iYWwnKSB9KTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ01hcCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtbWFwLm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdNYXAnKTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnTWFwJywgeyB0b0pTT046IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tdG8tanNvbicpKCdNYXAnKSB9KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2xhbXA6IGZ1bmN0aW9uIGNsYW1wKHgsIGxvd2VyLCB1cHBlcikge1xuICAgIHJldHVybiBNYXRoLm1pbih1cHBlciwgTWF0aC5tYXgobG93ZXIsIHgpKTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IERFR19QRVJfUkFEOiBNYXRoLlBJIC8gMTgwIH0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBSQURfUEVSX0RFRyA9IDE4MCAvIE1hdGguUEk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgZGVncmVlczogZnVuY3Rpb24gZGVncmVlcyhyYWRpYW5zKSB7XG4gICAgcmV0dXJuIHJhZGlhbnMgKiBSQURfUEVSX0RFRztcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNjYWxlID0gcmVxdWlyZSgnLi9fbWF0aC1zY2FsZScpO1xudmFyIGZyb3VuZCA9IHJlcXVpcmUoJy4vX21hdGgtZnJvdW5kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgZnNjYWxlOiBmdW5jdGlvbiBmc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSB7XG4gICAgcmV0dXJuIGZyb3VuZChzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpKTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpYWRkaDogZnVuY3Rpb24gaWFkZGgoeDAsIHgxLCB5MCwgeTEpIHtcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XG4gICAgdmFyICR4MSA9IHgxID4+PiAwO1xuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxICsgKHkxID4+PiAwKSArICgoJHgwICYgJHkwIHwgKCR4MCB8ICR5MCkgJiB+KCR4MCArICR5MCA+Pj4gMCkpID4+PiAzMSkgfCAwO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGltdWxoOiBmdW5jdGlvbiBpbXVsaCh1LCB2KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgJHUgPSArdTtcbiAgICB2YXIgJHYgPSArdjtcbiAgICB2YXIgdTAgPSAkdSAmIFVJTlQxNjtcbiAgICB2YXIgdjAgPSAkdiAmIFVJTlQxNjtcbiAgICB2YXIgdTEgPSAkdSA+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+PiAxNjtcbiAgICB2YXIgdCA9ICh1MSAqIHYwID4+PiAwKSArICh1MCAqIHYwID4+PiAxNik7XG4gICAgcmV0dXJuIHUxICogdjEgKyAodCA+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+IDE2KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpc3ViaDogZnVuY3Rpb24gaXN1YmgoeDAsIHgxLCB5MCwgeTEpIHtcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XG4gICAgdmFyICR4MSA9IHgxID4+PiAwO1xuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxIC0gKHkxID4+PiAwKSAtICgofiR4MCAmICR5MCB8IH4oJHgwIF4gJHkwKSAmICR4MCAtICR5MCA+Pj4gMCkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBSQURfUEVSX0RFRzogMTgwIC8gTWF0aC5QSSB9KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgREVHX1BFUl9SQUQgPSBNYXRoLlBJIC8gMTgwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHJhZGlhbnM6IGZ1bmN0aW9uIHJhZGlhbnMoZGVncmVlcykge1xuICAgIHJldHVybiBkZWdyZWVzICogREVHX1BFUl9SQUQ7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzY2FsZTogcmVxdWlyZSgnLi9fbWF0aC1zY2FsZScpIH0pO1xuIiwiLy8gaHR0cDovL2pmYmFzdGllbi5naXRodWIuaW8vcGFwZXJzL01hdGguc2lnbmJpdC5odG1sXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ25iaXQ6IGZ1bmN0aW9uIHNpZ25iaXQoeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSAhPSB4ID8geCA6IHggPT0gMCA/IDEgLyB4ID09IEluZmluaXR5IDogeCA+IDA7XG59IH0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdW11bGg6IGZ1bmN0aW9uIHVtdWxoKHUsIHYpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciAkdSA9ICt1O1xuICAgIHZhciAkdiA9ICt2O1xuICAgIHZhciB1MCA9ICR1ICYgVUlOVDE2O1xuICAgIHZhciB2MCA9ICR2ICYgVUlOVDE2O1xuICAgIHZhciB1MSA9ICR1ID4+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+Pj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4+IDE2KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuXG4vLyBCLjIuMi4yIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19kZWZpbmVHZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpIHtcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwgeyBnZXQ6IGFGdW5jdGlvbihnZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcblxuLy8gQi4yLjIuMyBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fZGVmaW5lU2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKSB7XG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHsgc2V0OiBhRnVuY3Rpb24oc2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZW50cmllcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCkge1xuICAgIHJldHVybiAkZW50cmllcyhpdCk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4vX293bi1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gICAgdmFyIGdldERlc2MgPSBnT1BELmY7XG4gICAgdmFyIGtleXMgPSBvd25LZXlzKE8pO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleSwgZGVzYztcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpKSB7XG4gICAgICBkZXNjID0gZ2V0RGVzYyhPLCBrZXkgPSBrZXlzW2krK10pO1xuICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2MpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxuLy8gQi4yLjIuNCBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwR2V0dGVyX18oUClcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2xvb2t1cEdldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cEdldHRlcl9fKFApIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gICAgdmFyIEQ7XG4gICAgZG8ge1xuICAgICAgaWYgKEQgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgSykpIHJldHVybiBELmdldDtcbiAgICB9IHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxuLy8gQi4yLjIuNSBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwU2V0dGVyX18oUClcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2xvb2t1cFNldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cFNldHRlcl9fKFApIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gICAgdmFyIEQ7XG4gICAgZG8ge1xuICAgICAgaWYgKEQgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgSykpIHJldHVybiBELnNldDtcbiAgICB9IHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdmFsdWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykoZmFsc2UpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoaXQpIHtcbiAgICByZXR1cm4gJHZhbHVlcyhpdCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3plbnBhcnNpbmcvZXMtb2JzZXJ2YWJsZVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgT0JTRVJWQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdvYnNlcnZhYmxlJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgUkVUVVJOID0gZm9yT2YuUkVUVVJOO1xuXG52YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJldHVybiBmbiA9PSBudWxsID8gdW5kZWZpbmVkIDogYUZ1bmN0aW9uKGZuKTtcbn07XG5cbnZhciBjbGVhbnVwU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICB2YXIgY2xlYW51cCA9IHN1YnNjcmlwdGlvbi5fYztcbiAgaWYgKGNsZWFudXApIHtcbiAgICBzdWJzY3JpcHRpb24uX2MgPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cCgpO1xuICB9XG59O1xuXG52YXIgc3Vic2NyaXB0aW9uQ2xvc2VkID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICByZXR1cm4gc3Vic2NyaXB0aW9uLl9vID09PSB1bmRlZmluZWQ7XG59O1xuXG52YXIgY2xvc2VTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICB9XG59O1xuXG52YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKG9ic2VydmVyLCBzdWJzY3JpYmVyKSB7XG4gIGFuT2JqZWN0KG9ic2VydmVyKTtcbiAgdGhpcy5fYyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fbyA9IG9ic2VydmVyO1xuICBvYnNlcnZlciA9IG5ldyBTdWJzY3JpcHRpb25PYnNlcnZlcih0aGlzKTtcbiAgdHJ5IHtcbiAgICB2YXIgY2xlYW51cCA9IHN1YnNjcmliZXIob2JzZXJ2ZXIpO1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjbGVhbnVwO1xuICAgIGlmIChjbGVhbnVwICE9IG51bGwpIHtcbiAgICAgIGlmICh0eXBlb2YgY2xlYW51cC51bnN1YnNjcmliZSA9PT0gJ2Z1bmN0aW9uJykgY2xlYW51cCA9IGZ1bmN0aW9uICgpIHsgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7IH07XG4gICAgICBlbHNlIGFGdW5jdGlvbihjbGVhbnVwKTtcbiAgICAgIHRoaXMuX2MgPSBjbGVhbnVwO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgIHJldHVybjtcbiAgfSBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHRoaXMpKSBjbGVhbnVwU3Vic2NyaXB0aW9uKHRoaXMpO1xufTtcblxuU3Vic2NyaXB0aW9uLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7XG4gIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHsgY2xvc2VTdWJzY3JpcHRpb24odGhpcyk7IH1cbn0pO1xuXG52YXIgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIHRoaXMuX3MgPSBzdWJzY3JpcHRpb247XG59O1xuXG5TdWJzY3JpcHRpb25PYnNlcnZlci5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICBuZXh0OiBmdW5jdGlvbiBuZXh0KHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIubmV4dCk7XG4gICAgICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2xvc2VTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBlcnJvcjogZnVuY3Rpb24gZXJyb3IodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHRocm93IHZhbHVlO1xuICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLmVycm9yKTtcbiAgICAgIGlmICghbSkgdGhyb3cgdmFsdWU7XG4gICAgICB2YWx1ZSA9IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5jb21wbGV0ZSk7XG4gICAgICAgIHZhbHVlID0gbSA/IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpIDogdW5kZWZpbmVkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbn0pO1xuXG52YXIgJE9ic2VydmFibGUgPSBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZXIpIHtcbiAgYW5JbnN0YW5jZSh0aGlzLCAkT2JzZXJ2YWJsZSwgJ09ic2VydmFibGUnLCAnX2YnKS5fZiA9IGFGdW5jdGlvbihzdWJzY3JpYmVyKTtcbn07XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwge1xuICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKG9ic2VydmVyLCB0aGlzLl9mKTtcbiAgfSxcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gbmV3IChjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGFGdW5jdGlvbihmbik7XG4gICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhhdC5zdWJzY3JpYmUoe1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGZuKHZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgIGNvbXBsZXRlOiByZXNvbHZlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLCB7XG4gIGZyb206IGZ1bmN0aW9uIGZyb20oeCkge1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGU7XG4gICAgdmFyIG1ldGhvZCA9IGdldE1ldGhvZChhbk9iamVjdCh4KVtPQlNFUlZBQkxFXSk7XG4gICAgaWYgKG1ldGhvZCkge1xuICAgICAgdmFyIG9ic2VydmFibGUgPSBhbk9iamVjdChtZXRob2QuY2FsbCh4KSk7XG4gICAgICByZXR1cm4gb2JzZXJ2YWJsZS5jb25zdHJ1Y3RvciA9PT0gQyA/IG9ic2VydmFibGUgOiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmb3JPZih4LCBmYWxzZSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXQpO1xuICAgICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuIFJFVFVSTjtcbiAgICAgICAgICAgIH0pID09PSBSRVRVUk4pIHJldHVybjtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoZG9uZSkgdGhyb3cgZTtcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfSxcbiAgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aCwgaXRlbXMgPSBuZXcgQXJyYXkobCk7IGkgPCBsOykgaXRlbXNbaV0gPSBhcmd1bWVudHNbaSsrXTtcbiAgICByZXR1cm4gbmV3ICh0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZSkoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpdGVtcy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtc1tqXSk7XG4gICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbmhpZGUoJE9ic2VydmFibGUucHJvdG90eXBlLCBPQlNFUlZBQkxFLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHsgT2JzZXJ2YWJsZTogJE9ic2VydmFibGUgfSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ09ic2VydmFibGUnKTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtZmluYWxseVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1Byb21pc2UnLCB7ICdmaW5hbGx5JzogZnVuY3Rpb24gKG9uRmluYWxseSkge1xuICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpO1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiBvbkZpbmFsbHkgPT0gJ2Z1bmN0aW9uJztcbiAgcmV0dXJuIHRoaXMudGhlbihcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB4OyB9KTtcbiAgICB9IDogb25GaW5hbGx5LFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgdGhyb3cgZTsgfSk7XG4gICAgfSA6IG9uRmluYWxseVxuICApO1xufSB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtdHJ5XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUHJvbWlzZScsIHsgJ3RyeSc6IGZ1bmN0aW9uIChjYWxsYmFja2ZuKSB7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYodGhpcyk7XG4gIHZhciByZXN1bHQgPSBwZXJmb3JtKGNhbGxiYWNrZm4pO1xuICAocmVzdWx0LmUgPyBwcm9taXNlQ2FwYWJpbGl0eS5yZWplY3QgOiBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlKShyZXN1bHQudik7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IG1ldGFkYXRhLnNldDtcblxubWV0YWRhdGEuZXhwKHsgZGVmaW5lTWV0YWRhdGE6IGZ1bmN0aW9uIGRlZmluZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHRhcmdldEtleSkge1xuICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCBhbk9iamVjdCh0YXJnZXQpLCB0b01ldGFLZXkodGFyZ2V0S2V5KSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcbnZhciBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwID0gbWV0YWRhdGEubWFwO1xudmFyIHN0b3JlID0gbWV0YWRhdGEuc3RvcmU7XG5cbm1ldGFkYXRhLmV4cCh7IGRlbGV0ZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWxldGVNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHZhciB0YXJnZXRLZXkgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pO1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKGFuT2JqZWN0KHRhcmdldCksIHRhcmdldEtleSwgZmFsc2UpO1xuICBpZiAobWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCB8fCAhbWV0YWRhdGFNYXBbJ2RlbGV0ZSddKG1ldGFkYXRhS2V5KSkgcmV0dXJuIGZhbHNlO1xuICBpZiAobWV0YWRhdGFNYXAuc2l6ZSkgcmV0dXJuIHRydWU7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICB0YXJnZXRNZXRhZGF0YVsnZGVsZXRlJ10odGFyZ2V0S2V5KTtcbiAgcmV0dXJuICEhdGFyZ2V0TWV0YWRhdGEuc2l6ZSB8fCBzdG9yZVsnZGVsZXRlJ10odGFyZ2V0KTtcbn0gfSk7XG4iLCJ2YXIgU2V0ID0gcmVxdWlyZSgnLi9lczYuc2V0Jyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4vX2FycmF5LWZyb20taXRlcmFibGUnKTtcbnZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IG1ldGFkYXRhLmtleXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlNZXRhZGF0YUtleXMgPSBmdW5jdGlvbiAoTywgUCkge1xuICB2YXIgb0tleXMgPSBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhPLCBQKTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICBpZiAocGFyZW50ID09PSBudWxsKSByZXR1cm4gb0tleXM7XG4gIHZhciBwS2V5cyA9IG9yZGluYXJ5TWV0YWRhdGFLZXlzKHBhcmVudCwgUCk7XG4gIHJldHVybiBwS2V5cy5sZW5ndGggPyBvS2V5cy5sZW5ndGggPyBmcm9tKG5ldyBTZXQob0tleXMuY29uY2F0KHBLZXlzKSkpIDogcEtleXMgOiBvS2V5cztcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGdldE1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0TWV0YWRhdGFLZXlzKHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlNZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzFdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldDtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUdldE1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYgKGhhc093bikgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUdldE1ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogdW5kZWZpbmVkO1xufTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0TWV0YWRhdGE6IGZ1bmN0aW9uIGdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IG1ldGFkYXRhLmtleXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRPd25NZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhS2V5cyh0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0O1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0T3duTWV0YWRhdGE6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5SGFzTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIGhhc093biA9IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICBpZiAoaGFzT3duKSByZXR1cm4gdHJ1ZTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlIYXNNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IGZhbHNlO1xufTtcblxubWV0YWRhdGEuZXhwKHsgaGFzTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5SGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgaGFzT3duTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciAkbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvTWV0YUtleSA9ICRtZXRhZGF0YS5rZXk7XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9ICRtZXRhZGF0YS5zZXQ7XG5cbiRtZXRhZGF0YS5leHAoeyBtZXRhZGF0YTogZnVuY3Rpb24gbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGRlY29yYXRvcih0YXJnZXQsIHRhcmdldEtleSkge1xuICAgIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEoXG4gICAgICBtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSxcbiAgICAgICh0YXJnZXRLZXkgIT09IHVuZGVmaW5lZCA/IGFuT2JqZWN0IDogYUZ1bmN0aW9uKSh0YXJnZXQpLFxuICAgICAgdG9NZXRhS2V5KHRhcmdldEtleSlcbiAgICApO1xuICB9O1xufSB9KTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1NldCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0Lm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdTZXQnKTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnU2V0JywgeyB0b0pTT046IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tdG8tanNvbicpKCdTZXQnKSB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxudmFyIEZPUkNFRCA9ICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAn8KCutycuYXQoMCkgIT09ICfwoK63Jztcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFRCwgJ1N0cmluZycsIHtcbiAgYXQ6IGZ1bmN0aW9uIGF0KHBvcykge1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL1N0cmluZy5wcm90b3R5cGUubWF0Y2hBbGwvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGdldEZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBSZWdFeHBQcm90byA9IFJlZ0V4cC5wcm90b3R5cGU7XG5cbnZhciAkUmVnRXhwU3RyaW5nSXRlcmF0b3IgPSBmdW5jdGlvbiAocmVnZXhwLCBzdHJpbmcpIHtcbiAgdGhpcy5fciA9IHJlZ2V4cDtcbiAgdGhpcy5fcyA9IHN0cmluZztcbn07XG5cbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLCAnUmVnRXhwIFN0cmluZycsIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBtYXRjaCA9IHRoaXMuX3IuZXhlYyh0aGlzLl9zKTtcbiAgcmV0dXJuIHsgdmFsdWU6IG1hdGNoLCBkb25lOiBtYXRjaCA9PT0gbnVsbCB9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBtYXRjaEFsbDogZnVuY3Rpb24gbWF0Y2hBbGwocmVnZXhwKSB7XG4gICAgZGVmaW5lZCh0aGlzKTtcbiAgICBpZiAoIWlzUmVnRXhwKHJlZ2V4cCkpIHRocm93IFR5cGVFcnJvcihyZWdleHAgKyAnIGlzIG5vdCBhIHJlZ2V4cCEnKTtcbiAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICB2YXIgZmxhZ3MgPSAnZmxhZ3MnIGluIFJlZ0V4cFByb3RvID8gU3RyaW5nKHJlZ2V4cC5mbGFncykgOiBnZXRGbGFncy5jYWxsKHJlZ2V4cCk7XG4gICAgdmFyIHJ4ID0gbmV3IFJlZ0V4cChyZWdleHAuc291cmNlLCB+ZmxhZ3MuaW5kZXhPZignZycpID8gZmxhZ3MgOiAnZycgKyBmbGFncyk7XG4gICAgcngubGFzdEluZGV4ID0gdG9MZW5ndGgocmVnZXhwLmxhc3RJbmRleCk7XG4gICAgcmV0dXJuIG5ldyAkUmVnRXhwU3RyaW5nSXRlcmF0b3IocngsIFMpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG52YXIgV0VCS0lUX0JVRyA9IC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyggTW9iaWxlXFwvXFx3Kyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIFdFQktJVF9CVUcsICdTdHJpbmcnLCB7XG4gIHBhZEVuZDogZnVuY3Rpb24gcGFkRW5kKG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbnZhciBXRUJLSVRfQlVHID0gL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/KCBNb2JpbGVcXC9cXHcrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogV0VCS0lUX0JVRywgJ1N0cmluZycsIHtcbiAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0cnVlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltTGVmdCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbUxlZnQoKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDEpO1xuICB9O1xufSwgJ3RyaW1TdGFydCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbVJpZ2h0JywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltUmlnaHQoKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDIpO1xuICB9O1xufSwgJ3RyaW1FbmQnKTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3lzdGVtJywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1dlYWtNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWttYXAub2ZcbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLW9mJykoJ1dlYWtNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdXZWFrU2V0Jyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrc2V0Lm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdXZWFrU2V0Jyk7XG4iLCJ2YXIgJGl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheTtcblxudmFyIERPTUl0ZXJhYmxlcyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgQ1NTVmFsdWVMaXN0OiBmYWxzZSxcbiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLFxuICBET01SZWN0TGlzdDogZmFsc2UsXG4gIERPTVN0cmluZ0xpc3Q6IGZhbHNlLFxuICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcbiAgRmlsZUxpc3Q6IGZhbHNlLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTEZvcm1FbGVtZW50OiBmYWxzZSxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLFxuICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBNaW1lVHlwZUFycmF5OiBmYWxzZSxcbiAgTmFtZWROb2RlTWFwOiBmYWxzZSxcbiAgTm9kZUxpc3Q6IHRydWUsXG4gIFBhaW50UmVxdWVzdExpc3Q6IGZhbHNlLFxuICBQbHVnaW46IGZhbHNlLFxuICBQbHVnaW5BcnJheTogZmFsc2UsXG4gIFNWR0xlbmd0aExpc3Q6IGZhbHNlLFxuICBTVkdOdW1iZXJMaXN0OiBmYWxzZSxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxuICBTVkdQb2ludExpc3Q6IGZhbHNlLFxuICBTVkdTdHJpbmdMaXN0OiBmYWxzZSxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IGZhbHNlLFxuICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxuICBUZXh0VHJhY2tMaXN0OiBmYWxzZSxcbiAgVG91Y2hMaXN0OiBmYWxzZVxufTtcblxuZm9yICh2YXIgY29sbGVjdGlvbnMgPSBnZXRLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBjb2xsZWN0aW9uc1tpXTtcbiAgdmFyIGV4cGxpY2l0ID0gRE9NSXRlcmFibGVzW05BTUVdO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGtleTtcbiAgaWYgKHByb3RvKSB7XG4gICAgaWYgKCFwcm90b1tJVEVSQVRPUl0pIGhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYgKCFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgaWYgKGV4cGxpY2l0KSBmb3IgKGtleSBpbiAkaXRlcmF0b3JzKSBpZiAoIXByb3RvW2tleV0pIHJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XG4gIH1cbn1cbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHRhc2sgPSByZXF1aXJlKCcuL190YXNrJyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiwge1xuICBzZXRJbW1lZGlhdGU6ICR0YXNrLnNldCxcbiAgY2xlYXJJbW1lZGlhdGU6ICR0YXNrLmNsZWFyXG59KTtcbiIsIi8vIGllOS0gc2V0VGltZW91dCAmIHNldEludGVydmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHNsaWNlID0gW10uc2xpY2U7XG52YXIgTVNJRSA9IC9NU0lFIC5cXC4vLnRlc3QodXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIHdyYXAgPSBmdW5jdGlvbiAoc2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZm4sIHRpbWUgLyogLCAuLi5hcmdzICovKSB7XG4gICAgdmFyIGJvdW5kQXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICAgIHZhciBhcmdzID0gYm91bmRBcmdzID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpIDogZmFsc2U7XG4gICAgcmV0dXJuIHNldChib3VuZEFyZ3MgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9IDogZm4sIHRpbWUpO1xuICB9O1xufTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7XG4iLCJyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYXNpbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hdGFuaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNicnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jbHozMicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNvc2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5leHBtMScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmh5cG90Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguaW11bCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguc2lnbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnNpbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC50YW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcucmF3Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy50cmltJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5iaWcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcubGluaycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS5ub3cnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmpvaW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc29ydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNvbWUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZXZlcnknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbGwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5leGVjJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wcm9taXNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYud2Vhay1tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYud2Vhay1zZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5oYXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFycmF5LmZsYXR0ZW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLmF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtc2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1tYXAub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1zZXQub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWFwLmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0LmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1tYXAuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLXNldC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lmdsb2JhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeXN0ZW0uZ2xvYmFsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmVycm9yLmlzLWVycm9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguY2xhbXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5kZWctcGVyLXJhZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmRlZ3JlZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5mc2NhbGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pYWRkaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaW11bGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5yYWQtcGVyLWRlZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnJhZGlhbnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5zY2FsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnVtdWxoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguc2lnbmJpdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucHJvbWlzZS50cnknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5kZWxldGUtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QubWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXNhcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLnRpbWVycycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi5pbW1lZGlhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbW9kdWxlcy9fY29yZScpO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCI6cm9vdCB7XFxuICAgIGZvbnQtc2l6ZTogMTJweDtcXG4gICAgZm9udC1mYW1pbHk6ICdNdWt0YScsIHNhbnMtc2VyaWY7XFxufVxcblxcbmJvZHkge1xcbiAgICBtYXJnaW46IDA7XFxuICAgIGhlaWdodDogMTAwdmg7XFxuICAgIHdpZHRoOiAxMDB2dztcXG4gICAgcGFkZGluZy1sZWZ0OiAyJTtcXG4gICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXG59XFxuXFxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgcCB7XFxuICAgIG1hcmdpbjogMDtcXG59XFxuXFxuaGVhZGVyIHtcXG4gICAgZGlzcGxheTogZmxleDsgXFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjsgXFxuICAgIGZvbnQtc2l6ZTogMS41cmVtO1xcbn1cXG5cXG4jbG9jYXRpb24ge1xcbiAgICBncmlkLWNvbHVtbjogMSAvIDI7XFxuICAgIGdyaWQtcm93OiAxIC8gMjtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICB0b3A6IDUzcHg7XFxuICAgIGZvbnQtc2l6ZTogMy41cmVtO1xcbn1cXG5cXG4jZGF0ZSB7XFxuICAgIGdyaWQtY29sdW1uOiAxIC8gMjtcXG4gICAgZ3JpZC1yb3c6IDIgLyAzO1xcbiAgICBmb250LXNpemU6IDIuNXJlbTtcXG59XFxuXFxuI3RpbWUge1xcbiAgICBncmlkLWNvbHVtbjogMSAvIDI7XFxuICAgIGdyaWQtcm93OiAzIC8gNDtcXG4gICAgZm9udC1zaXplOiAyLjVyZW07XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgYm90dG9tOiA3OHB4O1xcbiAgICBmb250LXNpemU6IDIuNXJlbTtcXG59XFxuXFxuZm9ybSB7XFxuICAgIHdpZHRoOiAzNTBweDtcXG4gICAgZ3JpZC1jb2x1bW46IDEgLyAyO1xcbiAgICBncmlkLXJvdzogNCAvIDU7XFxufVxcblxcbmZvcm0gPiBpbWcge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIHJpZ2h0OiAzN3B4O1xcbiAgICB0b3A6IDhweDtcXG4gICAgaGVpZ2h0OiAyOHB4O1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGJhY2tncm91bmQ6IHdoaXRlO1xcbn1cXG5cXG5pbnB1dCB7XFxuICAgIHBhZGRpbmc6IDEycHggMTJweCAxMnB4IDEycHg7XFxuICAgIGhlaWdodDogNDVweDtcXG4gICAgd2lkdGg6IDMwNXB4O1xcbiAgICBib3JkZXItcmFkaXVzOiAxMnB4O1xcbiAgICBmb250LXNpemU6IDEuNXJlbTtcXG59XFxubWFpbiB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDQsIDFmcik7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDQsIDFmcik7XFxufVxcblxcbiNtYWluLWNvbnRhaW5lciB7XFxuICAgIGdyaWQtY29sdW1uOiAyIC8gNDtcXG4gICAgZ3JpZC1yb3c6IDEgLyAzO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgZ2FwOiA2cHg7XFxufVxcblxcbiNtYWluLWljb24ge1xcbiAgICBoZWlnaHQ6IDExNXB4O1xcbn1cXG5cXG5cXG4jdGVtcGVyYXR1cmUge1xcbiAgICBmb250LXNpemU6IDEycmVtO1xcbiAgICBtYXJnaW46IDA7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuXFxuI3N1bnJpc2UtY2FyZCB7XFxuICAgIGdyaWQtY29sdW1uOiA0IC8gNTtcXG4gICAgZ3JpZC1yb3c6IDEgLyAyO1xcbiAgICBmb250LXNpemU6IDEuNzVyZW07XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgdG9wOiA0NnB4O1xcbn1cXG5cXG4jc3Vuc2V0LWNhcmQge1xcbiAgICBncmlkLWNvbHVtbjogNCAvIDU7XFxuICAgIGdyaWQtcm93OiAyIC8gMztcXG4gICAgZm9udC1zaXplOiAxLjc1cmVtO1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIHRvcDogNDZweDtcXG59XFxuXFxuI2Rlc2NyaXB0aW9uIHtcXG4gICAgZ3JpZC1jb2x1bW46IDIgLyA0O1xcbiAgICBncmlkLXJvdzogMyAvIDQ7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgZm9udC1zaXplOiAyLjVyZW07XFxufVxcblxcbiN3aW5kIHtcXG4gICAgZ3JpZC1jb2x1bW46IDIgLyA0O1xcbiAgICBncmlkLXJvdzogNCAvIDU7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgZm9udC1zaXplOiAyLjVyZW07XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgYm90dG9tOiA2MnB4O1xcbn1cXG5cXG4jZmVlbHMtbGlrZSB7XFxuICAgIGdyaWQtY29sdW1uOiAyIC8gNDtcXG4gICAgZ3JpZC1yb3c6IDUgLyA2O1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGZvbnQtc2l6ZTogMi41cmVtO1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIGJvdHRvbTogMTIzcHg7XFxufVxcblxcbi5ib3R0b20taW5mby1jYXJkIHtcXG4gICAgZGlzcGxheTogZmxleDsgXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICB3aWR0aDogMzAwcHg7XFxuICAgIGhlaWdodDogMTAwcHg7XFxuICAgIG1hcmdpbjogMTBweDtcXG59XFxuXFxuc2VjdGlvbiB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbiNtb2RlLWJ1dHRvbi1jb250YWluZXIge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBnYXA6IDI1NnB4O1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMTZweDtcXG59XFxuXFxuXFxuLm1vZGUtYnV0dG9uIHtcXG4gICAgYXBwZWFyYW5jZTogbm9uZTtcXG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIHdpZHRoOiAxNTBweDtcXG4gICAgaGVpZ2h0OiA1MHB4O1xcbiAgICBib3JkZXI6IDJweCBzb2xpZCBncmV5O1xcbiAgICBib3JkZXItcmFkaXVzOiA2cHg7XFxuICAgIGZvbnQtc2l6ZTogMS41cmVtO1xcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwyNTUsMjU1LDAuNCk7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG4ubW9kZS1idXR0b246aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwyNTUsMjU1LCAwLjYpXFxufVxcblxcbi5hY3RpdmUge1xcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwyNTUsMjU1LCAwLjgpXFxufVxcblxcbi5tb2RlLWJ1dHRvbi5hY3RpdmU6aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwyNTUsMjU1LCAwLjgpXFxufVxcblxcbi5jYXJkLWNvbnRhaW5lciB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcbiAgICBnYXA6IDEycHg7XFxufVxcblxcbi5jYXJkLWNvbnRhaW5lciA+IGltZyB7XFxuICAgIGhlaWdodDogNzVweDtcXG4gICAgd2lkdGg6IGF1dG87XFxufVxcblxcbi5zZWN0aW9uLWluZm8tY2FyZCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgYm9yZGVyOiAzcHggc29saWQgZ3JleTtcXG4gICAgdHJhbnNpdGlvbjogYm9yZGVyIDIwMG1zIGVhc2UtaW4tb3V0O1xcbiAgICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICAgIG1pbi13aWR0aDogODBweDtcXG4gICAgbWF4LXdpZHRoOiA4dnc7XFxuICAgIGhlaWdodDogMTUwcHg7XFxuICAgIGZvbnQtc2l6ZTogMS41cmVtO1xcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwyNTUsMjU1LDAuMjUpXFxufVxcblxcbi50b3Atcm93IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLnRvcC1yb3cgPiBpbWcge1xcbiAgICBoZWlnaHQ6IDUwcHg7XFxufVxcblxcbiNyaWdodC1idXR0b24sICNsZWZ0LWJ1dHRvbiB7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmluYWN0aXZlIHtcXG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gICAgY3Vyc29yOiBkZWZhdWx0O1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksZUFBZTtJQUNmLGdDQUFnQztBQUNwQzs7QUFFQTtJQUNJLFNBQVM7SUFDVCxhQUFhO0lBQ2IsWUFBWTtJQUNaLGdCQUFnQjtJQUNoQixzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxTQUFTO0FBQ2I7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsOEJBQThCO0lBQzlCLG1CQUFtQjtJQUNuQixpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLGtCQUFrQjtJQUNsQixTQUFTO0lBQ1QsaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLGVBQWU7SUFDZixpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsWUFBWTtJQUNaLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixXQUFXO0lBQ1gsUUFBUTtJQUNSLFlBQVk7SUFDWixlQUFlO0lBQ2YsaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksNEJBQTRCO0lBQzVCLFlBQVk7SUFDWixZQUFZO0lBQ1osbUJBQW1CO0lBQ25CLGlCQUFpQjtBQUNyQjtBQUNBO0lBQ0ksYUFBYTtJQUNiLHFDQUFxQztJQUNyQyxrQ0FBa0M7QUFDdEM7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsbUJBQW1CO0lBQ25CLFFBQVE7QUFDWjs7QUFFQTtJQUNJLGFBQWE7QUFDakI7OztBQUdBO0lBQ0ksZ0JBQWdCO0lBQ2hCLFNBQVM7SUFDVCxxQkFBcUI7QUFDekI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsU0FBUztBQUNiOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLGVBQWU7SUFDZixrQkFBa0I7SUFDbEIsa0JBQWtCO0lBQ2xCLFNBQVM7QUFDYjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixlQUFlO0lBQ2Ysa0JBQWtCO0lBQ2xCLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixlQUFlO0lBQ2Ysa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsWUFBWTtBQUNoQjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixlQUFlO0lBQ2Ysa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsYUFBYTtBQUNqQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsbUJBQW1CO0lBQ25CLHVCQUF1QjtJQUN2QixZQUFZO0lBQ1osYUFBYTtJQUNiLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLGFBQWE7SUFDYixVQUFVO0lBQ1Ysb0JBQW9CO0FBQ3hCOzs7QUFHQTtJQUNJLGdCQUFnQjtJQUNoQix3QkFBd0I7SUFDeEIsZUFBZTtJQUNmLFlBQVk7SUFDWixZQUFZO0lBQ1osc0JBQXNCO0lBQ3RCLGtCQUFrQjtJQUNsQixpQkFBaUI7SUFDakIsaUNBQWlDO0lBQ2pDLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJO0FBQ0o7O0FBRUE7SUFDSTtBQUNKOztBQUVBO0lBQ0k7QUFDSjs7QUFFQTtJQUNJLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsNkJBQTZCO0lBQzdCLFNBQVM7QUFDYjs7QUFFQTtJQUNJLFlBQVk7SUFDWixXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLDhCQUE4QjtJQUM5QixtQkFBbUI7SUFDbkIsc0JBQXNCO0lBQ3RCLG9DQUFvQztJQUNwQyxrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLGNBQWM7SUFDZCxhQUFhO0lBQ2IsaUJBQWlCO0lBQ2pCO0FBQ0o7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLG1CQUFtQjtJQUNuQix1QkFBdUI7SUFDdkIsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksWUFBWTtBQUNoQjs7QUFFQTtJQUNJLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsb0JBQW9CO0lBQ3BCLGVBQWU7QUFDbkJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiOnJvb3Qge1xcbiAgICBmb250LXNpemU6IDEycHg7XFxuICAgIGZvbnQtZmFtaWx5OiAnTXVrdGEnLCBzYW5zLXNlcmlmO1xcbn1cXG5cXG5ib2R5IHtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBoZWlnaHQ6IDEwMHZoO1xcbiAgICB3aWR0aDogMTAwdnc7XFxuICAgIHBhZGRpbmctbGVmdDogMiU7XFxuICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XFxufVxcblxcbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIHAge1xcbiAgICBtYXJnaW46IDA7XFxufVxcblxcbmhlYWRlciB7XFxuICAgIGRpc3BsYXk6IGZsZXg7IFxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7IFxcbiAgICBmb250LXNpemU6IDEuNXJlbTtcXG59XFxuXFxuI2xvY2F0aW9uIHtcXG4gICAgZ3JpZC1jb2x1bW46IDEgLyAyO1xcbiAgICBncmlkLXJvdzogMSAvIDI7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgdG9wOiA1M3B4O1xcbiAgICBmb250LXNpemU6IDMuNXJlbTtcXG59XFxuXFxuI2RhdGUge1xcbiAgICBncmlkLWNvbHVtbjogMSAvIDI7XFxuICAgIGdyaWQtcm93OiAyIC8gMztcXG4gICAgZm9udC1zaXplOiAyLjVyZW07XFxufVxcblxcbiN0aW1lIHtcXG4gICAgZ3JpZC1jb2x1bW46IDEgLyAyO1xcbiAgICBncmlkLXJvdzogMyAvIDQ7XFxuICAgIGZvbnQtc2l6ZTogMi41cmVtO1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIGJvdHRvbTogNzhweDtcXG4gICAgZm9udC1zaXplOiAyLjVyZW07XFxufVxcblxcbmZvcm0ge1xcbiAgICB3aWR0aDogMzUwcHg7XFxuICAgIGdyaWQtY29sdW1uOiAxIC8gMjtcXG4gICAgZ3JpZC1yb3c6IDQgLyA1O1xcbn1cXG5cXG5mb3JtID4gaW1nIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICByaWdodDogMzdweDtcXG4gICAgdG9wOiA4cHg7XFxuICAgIGhlaWdodDogMjhweDtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcXG59XFxuXFxuaW5wdXQge1xcbiAgICBwYWRkaW5nOiAxMnB4IDEycHggMTJweCAxMnB4O1xcbiAgICBoZWlnaHQ6IDQ1cHg7XFxuICAgIHdpZHRoOiAzMDVweDtcXG4gICAgYm9yZGVyLXJhZGl1czogMTJweDtcXG4gICAgZm9udC1zaXplOiAxLjVyZW07XFxufVxcbm1haW4ge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCg0LCAxZnIpO1xcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCg0LCAxZnIpO1xcbn1cXG5cXG4jbWFpbi1jb250YWluZXIge1xcbiAgICBncmlkLWNvbHVtbjogMiAvIDQ7XFxuICAgIGdyaWQtcm93OiAxIC8gMztcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGdhcDogNnB4O1xcbn1cXG5cXG4jbWFpbi1pY29uIHtcXG4gICAgaGVpZ2h0OiAxMTVweDtcXG59XFxuXFxuXFxuI3RlbXBlcmF0dXJlIHtcXG4gICAgZm9udC1zaXplOiAxMnJlbTtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblxcbiNzdW5yaXNlLWNhcmQge1xcbiAgICBncmlkLWNvbHVtbjogNCAvIDU7XFxuICAgIGdyaWQtcm93OiAxIC8gMjtcXG4gICAgZm9udC1zaXplOiAxLjc1cmVtO1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIHRvcDogNDZweDtcXG59XFxuXFxuI3N1bnNldC1jYXJkIHtcXG4gICAgZ3JpZC1jb2x1bW46IDQgLyA1O1xcbiAgICBncmlkLXJvdzogMiAvIDM7XFxuICAgIGZvbnQtc2l6ZTogMS43NXJlbTtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICB0b3A6IDQ2cHg7XFxufVxcblxcbiNkZXNjcmlwdGlvbiB7XFxuICAgIGdyaWQtY29sdW1uOiAyIC8gNDtcXG4gICAgZ3JpZC1yb3c6IDMgLyA0O1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGZvbnQtc2l6ZTogMi41cmVtO1xcbn1cXG5cXG4jd2luZCB7XFxuICAgIGdyaWQtY29sdW1uOiAyIC8gNDtcXG4gICAgZ3JpZC1yb3c6IDQgLyA1O1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGZvbnQtc2l6ZTogMi41cmVtO1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIGJvdHRvbTogNjJweDtcXG59XFxuXFxuI2ZlZWxzLWxpa2Uge1xcbiAgICBncmlkLWNvbHVtbjogMiAvIDQ7XFxuICAgIGdyaWQtcm93OiA1IC8gNjtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBmb250LXNpemU6IDIuNXJlbTtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBib3R0b206IDEyM3B4O1xcbn1cXG5cXG4uYm90dG9tLWluZm8tY2FyZCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7IFxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgd2lkdGg6IDMwMHB4O1xcbiAgICBoZWlnaHQ6IDEwMHB4O1xcbiAgICBtYXJnaW46IDEwcHg7XFxufVxcblxcbnNlY3Rpb24ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4jbW9kZS1idXR0b24tY29udGFpbmVyIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZ2FwOiAyNTZweDtcXG4gICAgcGFkZGluZy1ib3R0b206IDE2cHg7XFxufVxcblxcblxcbi5tb2RlLWJ1dHRvbiB7XFxuICAgIGFwcGVhcmFuY2U6IG5vbmU7XFxuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICB3aWR0aDogMTUwcHg7XFxuICAgIGhlaWdodDogNTBweDtcXG4gICAgYm9yZGVyOiAycHggc29saWQgZ3JleTtcXG4gICAgYm9yZGVyLXJhZGl1czogNnB4O1xcbiAgICBmb250LXNpemU6IDEuNXJlbTtcXG4gICAgYmFja2dyb3VuZDogcmdiYSgyNTUsMjU1LDI1NSwwLjQpO1xcbiAgICBmb250LXdlaWdodDogYm9sZDtcXG59XFxuXFxuLm1vZGUtYnV0dG9uOmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZDogcmdiYSgyNTUsMjU1LDI1NSwgMC42KVxcbn1cXG5cXG4uYWN0aXZlIHtcXG4gICAgYmFja2dyb3VuZDogcmdiYSgyNTUsMjU1LDI1NSwgMC44KVxcbn1cXG5cXG4ubW9kZS1idXR0b24uYWN0aXZlOmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZDogcmdiYSgyNTUsMjU1LDI1NSwgMC44KVxcbn1cXG5cXG4uY2FyZC1jb250YWluZXIge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcXG4gICAgZ2FwOiAxMnB4O1xcbn1cXG5cXG4uY2FyZC1jb250YWluZXIgPiBpbWcge1xcbiAgICBoZWlnaHQ6IDc1cHg7XFxuICAgIHdpZHRoOiBhdXRvO1xcbn1cXG5cXG4uc2VjdGlvbi1pbmZvLWNhcmQge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGJvcmRlcjogM3B4IHNvbGlkIGdyZXk7XFxuICAgIHRyYW5zaXRpb246IGJvcmRlciAyMDBtcyBlYXNlLWluLW91dDtcXG4gICAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgICBtaW4td2lkdGg6IDgwcHg7XFxuICAgIG1heC13aWR0aDogOHZ3O1xcbiAgICBoZWlnaHQ6IDE1MHB4O1xcbiAgICBmb250LXNpemU6IDEuNXJlbTtcXG4gICAgYmFja2dyb3VuZDogcmdiYSgyNTUsMjU1LDI1NSwwLjI1KVxcbn1cXG5cXG4udG9wLXJvdyB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi50b3Atcm93ID4gaW1nIHtcXG4gICAgaGVpZ2h0OiA1MHB4O1xcbn1cXG5cXG4jcmlnaHQtYnV0dG9uLCAjbGVmdC1idXR0b24ge1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5pbmFjdGl2ZSB7XFxuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICAgIGN1cnNvcjogZGVmYXVsdDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYWRkTGVhZGluZ1plcm9zO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nWmVyb3MobnVtYmVyLCB0YXJnZXRMZW5ndGgpIHtcbiAgdmFyIHNpZ24gPSBudW1iZXIgPCAwID8gJy0nIDogJyc7XG4gIHZhciBvdXRwdXQgPSBNYXRoLmFicyhudW1iZXIpLnRvU3RyaW5nKCk7XG5cbiAgd2hpbGUgKG91dHB1dC5sZW5ndGggPCB0YXJnZXRMZW5ndGgpIHtcbiAgICBvdXRwdXQgPSAnMCcgKyBvdXRwdXQ7XG4gIH1cblxuICByZXR1cm4gc2lnbiArIG91dHB1dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBhc3NpZ247XG5cbmZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIGRpcnR5T2JqZWN0KSB7XG4gIGlmICh0YXJnZXQgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Fzc2lnbiByZXF1aXJlcyB0aGF0IGlucHV0IHBhcmFtZXRlciBub3QgYmUgbnVsbCBvciB1bmRlZmluZWQnKTtcbiAgfVxuXG4gIGRpcnR5T2JqZWN0ID0gZGlydHlPYmplY3QgfHwge307XG5cbiAgZm9yICh2YXIgcHJvcGVydHkgaW4gZGlydHlPYmplY3QpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGRpcnR5T2JqZWN0LCBwcm9wZXJ0eSkpIHtcbiAgICAgIHRhcmdldFtwcm9wZXJ0eV0gPSBkaXJ0eU9iamVjdFtwcm9wZXJ0eV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjbG9uZU9iamVjdDtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2Fzc2lnbi9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGNsb25lT2JqZWN0KGRpcnR5T2JqZWN0KSB7XG4gIHJldHVybiAoMCwgX2luZGV4LmRlZmF1bHQpKHt9LCBkaXJ0eU9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vLi4vX2xpYi9nZXRVVENEYXlPZlllYXIvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uLy4uL19saWIvZ2V0VVRDSVNPV2Vlay9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vLi4vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4NyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2xpZ2h0Rm9ybWF0dGVycy9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBkYXlQZXJpb2RFbnVtID0ge1xuICBhbTogJ2FtJyxcbiAgcG06ICdwbScsXG4gIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICBub29uOiAnbm9vbicsXG4gIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICBuaWdodDogJ25pZ2h0J1xufTtcbi8qXG4gKiB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8ICBhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBBKiB8IE1pbGxpc2Vjb25kcyBpbiBkYXkgICAgICAgICAgICB8XG4gKiB8ICBiICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICB8ICBCICB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICB8XG4gKiB8ICBjICB8IFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrICB8ICBDKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8XG4gKiB8ICBkICB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICB8ICBEICB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBlICB8IExvY2FsIGRheSBvZiB3ZWVrICAgICAgICAgICAgICB8ICBFICB8IERheSBvZiB3ZWVrICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBmICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBGKiB8IERheSBvZiB3ZWVrIGluIG1vbnRoICAgICAgICAgICB8XG4gKiB8ICBnKiB8IE1vZGlmaWVkIEp1bGlhbiBkYXkgICAgICAgICAgICB8ICBHICB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBoICB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICB8ICBIICB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBpISB8IElTTyBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgICB8ICBJISB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICB8XG4gKiB8ICBqKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8ICBKKiB8IExvY2FsaXplZCBob3VyIHcvbyBkYXkgcGVyaW9kICB8XG4gKiB8ICBrICB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICB8ICBLICB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBsKiB8IChkZXByZWNhdGVkKSAgICAgICAgICAgICAgICAgICB8ICBMICB8IFN0YW5kLWFsb25lIG1vbnRoICAgICAgICAgICAgICB8XG4gKiB8ICBtICB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBNICB8IE1vbnRoICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBuICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBOICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBvISB8IE9yZGluYWwgbnVtYmVyIG1vZGlmaWVyICAgICAgICB8ICBPICB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICB8XG4gKiB8ICBwISB8IExvbmcgbG9jYWxpemVkIHRpbWUgICAgICAgICAgICB8ICBQISB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICB8XG4gKiB8ICBxICB8IFN0YW5kLWFsb25lIHF1YXJ0ZXIgICAgICAgICAgICB8ICBRICB8IFF1YXJ0ZXIgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICByKiB8IFJlbGF0ZWQgR3JlZ29yaWFuIHllYXIgICAgICAgICB8ICBSISB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICB8XG4gKiB8ICBzICB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICB8ICBTICB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICB8XG4gKiB8ICB0ISB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICB8ICBUISB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICB8XG4gKiB8ICB1ICB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICB8ICBVKiB8IEN5Y2xpYyB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICB2KiB8IFRpbWV6b25lIChnZW5lcmljIG5vbi1sb2NhdC4pICB8ICBWKiB8IFRpbWV6b25lIChsb2NhdGlvbikgICAgICAgICAgICB8XG4gKiB8ICB3ICB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICB8ICBXKiB8IFdlZWsgb2YgbW9udGggICAgICAgICAgICAgICAgICB8XG4gKiB8ICB4ICB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICB8ICBYICB8IFRpbWV6b25lIChJU08tODYwMSkgICAgICAgICAgICB8XG4gKiB8ICB5ICB8IFllYXIgKGFicykgICAgICAgICAgICAgICAgICAgICB8ICBZICB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICB8XG4gKiB8ICB6ICB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSB8ICBaKiB8IFRpbWV6b25lIChhbGlhc2VzKSAgICAgICAgICAgICB8XG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgKiBhcmUgbm90IGltcGxlbWVudGVkIGJ1dCByZXNlcnZlZCBieSBVbmljb2RlIHN0YW5kYXJkLlxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICEgYXJlIG5vbi1zdGFuZGFyZCwgYnV0IGltcGxlbWVudGVkIGJ5IGRhdGUtZm5zOlxuICogLSBgb2AgbW9kaWZpZXMgdGhlIHByZXZpb3VzIHRva2VuIHRvIHR1cm4gaXQgaW50byBhbiBvcmRpbmFsIChzZWUgYGZvcm1hdGAgZG9jcylcbiAqIC0gYGlgIGlzIElTTyBkYXkgb2Ygd2Vlay4gRm9yIGBpYCBhbmQgYGlpYCBpcyByZXR1cm5zIG51bWVyaWMgSVNPIHdlZWsgZGF5cyxcbiAqICAgaS5lLiA3IGZvciBTdW5kYXksIDEgZm9yIE1vbmRheSwgZXRjLlxuICogLSBgSWAgaXMgSVNPIHdlZWsgb2YgeWVhciwgYXMgb3Bwb3NlZCB0byBgd2Agd2hpY2ggaXMgbG9jYWwgd2VlayBvZiB5ZWFyLlxuICogLSBgUmAgaXMgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIsIGFzIG9wcG9zZWQgdG8gYFlgIHdoaWNoIGlzIGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIuXG4gKiAgIGBSYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYElgIGFuZCBgaWBcbiAqICAgZm9yIHVuaXZlcnNhbCBJU08gd2Vlay1udW1iZXJpbmcgZGF0ZSwgd2hlcmVhc1xuICogICBgWWAgaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGB3YCBhbmQgYGVgXG4gKiAgIGZvciB3ZWVrLW51bWJlcmluZyBkYXRlIHNwZWNpZmljIHRvIHRoZSBsb2NhbGUuXG4gKiAtIGBQYCBpcyBsb25nIGxvY2FsaXplZCBkYXRlIGZvcm1hdFxuICogLSBgcGAgaXMgbG9uZyBsb2NhbGl6ZWQgdGltZSBmb3JtYXRcbiAqL1xuXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gRXJhXG4gIEc6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZXJhID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpID4gMCA/IDEgOiAwO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gQUQsIEJDXG4gICAgICBjYXNlICdHJzpcbiAgICAgIGNhc2UgJ0dHJzpcbiAgICAgIGNhc2UgJ0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBBLCBCXG5cbiAgICAgIGNhc2UgJ0dHR0dHJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdydcbiAgICAgICAgfSk7XG4gICAgICAvLyBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdFxuXG4gICAgICBjYXNlICdHR0dHJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIC8vIE9yZGluYWwgbnVtYmVyXG4gICAgaWYgKHRva2VuID09PSAneW8nKSB7XG4gICAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgICAgdmFyIHllYXIgPSBzaWduZWRZZWFyID4gMCA/IHNpZ25lZFllYXIgOiAxIC0gc2lnbmVkWWVhcjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHllYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2luZGV4Ny5kZWZhdWx0LnkoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgc2lnbmVkV2Vla1llYXIgPSAoMCwgX2luZGV4NS5kZWZhdWx0KShkYXRlLCBvcHRpb25zKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgIHZhciB3ZWVrWWVhciA9IHNpZ25lZFdlZWtZZWFyID4gMCA/IHNpZ25lZFdlZWtZZWFyIDogMSAtIHNpZ25lZFdlZWtZZWFyOyAvLyBUd28gZGlnaXQgeWVhclxuXG4gICAgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgICB2YXIgdHdvRGlnaXRZZWFyID0gd2Vla1llYXIgJSAxMDA7XG4gICAgICByZXR1cm4gKDAsIF9pbmRleDYuZGVmYXVsdCkodHdvRGlnaXRZZWFyLCAyKTtcbiAgICB9IC8vIE9yZGluYWwgbnVtYmVyXG5cblxuICAgIGlmICh0b2tlbiA9PT0gJ1lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vla1llYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9IC8vIFBhZGRpbmdcblxuXG4gICAgcmV0dXJuICgwLCBfaW5kZXg2LmRlZmF1bHQpKHdlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICBSOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgaXNvV2Vla1llYXIgPSAoMCwgX2luZGV4My5kZWZhdWx0KShkYXRlKTsgLy8gUGFkZGluZ1xuXG4gICAgcmV0dXJuICgwLCBfaW5kZXg2LmRlZmF1bHQpKGlzb1dlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBFeHRlbmRlZCB5ZWFyLiBUaGlzIGlzIGEgc2luZ2xlIG51bWJlciBkZXNpZ25hdGluZyB0aGUgeWVhciBvZiB0aGlzIGNhbGVuZGFyIHN5c3RlbS5cbiAgLy8gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIGxvY2FsaXplcnMgYXJlIEIuQy4geWVhcnM6XG4gIC8vIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gIC8vIHwtLS0tLS18LS0tLS18LS0tLS18XG4gIC8vIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gIC8vIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gIC8vIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gIC8vIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAgLy8gd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkLlxuICB1OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICByZXR1cm4gKDAsIF9pbmRleDYuZGVmYXVsdCkoeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gUXVhcnRlclxuICBROiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdRJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG5cbiAgICAgIGNhc2UgJ1FRJzpcbiAgICAgICAgcmV0dXJuICgwLCBfaW5kZXg2LmRlZmF1bHQpKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG5cbiAgICAgIGNhc2UgJ1FvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwge1xuICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG5cbiAgICAgIGNhc2UgJ1FRUSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcblxuICAgICAgY2FzZSAnUVFRUVEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG5cbiAgICAgIGNhc2UgJ1FRUVEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgcXVhcnRlclxuICBxOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdxJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG5cbiAgICAgIGNhc2UgJ3FxJzpcbiAgICAgICAgcmV0dXJuICgwLCBfaW5kZXg2LmRlZmF1bHQpKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG5cbiAgICAgIGNhc2UgJ3FvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwge1xuICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG5cbiAgICAgIGNhc2UgJ3FxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcblxuICAgICAgY2FzZSAncXFxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG5cbiAgICAgIGNhc2UgJ3FxcXEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ00nOlxuICAgICAgY2FzZSAnTU0nOlxuICAgICAgICByZXR1cm4gX2luZGV4Ny5kZWZhdWx0Lk0oZGF0ZSwgdG9rZW4pO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuXG4gICAgICBjYXNlICdNbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcblxuICAgICAgY2FzZSAnTU1NJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG5cbiAgICAgIGNhc2UgJ01NTU1NJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG5cbiAgICAgIGNhc2UgJ01NTU0nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBtb250aFxuICBMOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgLi4uLCAxMlxuICAgICAgY2FzZSAnTCc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobW9udGggKyAxKTtcbiAgICAgIC8vIDAxLCAwMiwgLi4uLCAxMlxuXG4gICAgICBjYXNlICdMTCc6XG4gICAgICAgIHJldHVybiAoMCwgX2luZGV4Ni5kZWZhdWx0KShtb250aCArIDEsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuXG4gICAgICBjYXNlICdMbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcblxuICAgICAgY2FzZSAnTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG5cbiAgICAgIGNhc2UgJ0xMTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG5cbiAgICAgIGNhc2UgJ0xMTEwnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBMb2NhbCB3ZWVrIG9mIHllYXJcbiAgdzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciB3ZWVrID0gKDAsIF9pbmRleDQuZGVmYXVsdCkoZGF0ZSwgb3B0aW9ucyk7XG5cbiAgICBpZiAodG9rZW4gPT09ICd3bycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWssIHtcbiAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gKDAsIF9pbmRleDYuZGVmYXVsdCkod2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWsgb2YgeWVhclxuICBJOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGlzb1dlZWsgPSAoMCwgX2luZGV4Mi5kZWZhdWx0KShkYXRlKTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ0lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvV2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiAoMCwgX2luZGV4Ni5kZWZhdWx0KShpc29XZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdkbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDRGF0ZSgpLCB7XG4gICAgICAgIHVuaXQ6ICdkYXRlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9pbmRleDcuZGVmYXVsdC5kKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHllYXJcbiAgRDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZlllYXIgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSAnRG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXlPZlllYXIsIHtcbiAgICAgICAgdW5pdDogJ2RheU9mWWVhcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiAoMCwgX2luZGV4Ni5kZWZhdWx0KShkYXlPZlllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIERheSBvZiB3ZWVrXG4gIEU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFR1ZVxuICAgICAgY2FzZSAnRSc6XG4gICAgICBjYXNlICdFRSc6XG4gICAgICBjYXNlICdFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdFRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnRUVFRSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgZGF5IG9mIHdlZWtcbiAgZTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChOdGggZGF5IG9mIHdlZWsgd2l0aCBjdXJyZW50IGxvY2FsZSBvciB3ZWVrU3RhcnRzT24pXG4gICAgICBjYXNlICdlJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG5cbiAgICAgIGNhc2UgJ2VlJzpcbiAgICAgICAgcmV0dXJuICgwLCBfaW5kZXg2LmRlZmF1bHQpKGxvY2FsRGF5T2ZXZWVrLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuXG4gICAgICBjYXNlICdlbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2VlZSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdlZWVlZSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2VlZWVlZSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdlZWVlJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBsb2NhbCBkYXkgb2Ygd2Vla1xuICBjOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGxvY2FsRGF5T2ZXZWVrID0gKGRheU9mV2VlayAtIG9wdGlvbnMud2Vla1N0YXJ0c09uICsgOCkgJSA3IHx8IDc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBOdW1lcmljYWwgdmFsdWUgKHNhbWUgYXMgaW4gYGVgKVxuICAgICAgY2FzZSAnYyc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobG9jYWxEYXlPZldlZWspO1xuICAgICAgLy8gUGFkZGVkIG51bWVyaWNhbCB2YWx1ZVxuXG4gICAgICBjYXNlICdjYyc6XG4gICAgICAgIHJldHVybiAoMCwgX2luZGV4Ni5kZWZhdWx0KShsb2NhbERheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuXG4gICAgICBjYXNlICdjbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2NjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdjY2NjJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBJU08gZGF5IG9mIHdlZWtcbiAgaTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBpc29EYXlPZldlZWsgPSBkYXlPZldlZWsgPT09IDAgPyA3IDogZGF5T2ZXZWVrO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMlxuICAgICAgY2FzZSAnaSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcoaXNvRGF5T2ZXZWVrKTtcbiAgICAgIC8vIDAyXG5cbiAgICAgIGNhc2UgJ2lpJzpcbiAgICAgICAgcmV0dXJuICgwLCBfaW5kZXg2LmRlZmF1bHQpKGlzb0RheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDJuZFxuXG4gICAgICBjYXNlICdpbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb0RheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlXG5cbiAgICAgIGNhc2UgJ2lpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2lpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdpaWlpJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgY2FzZSAnYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgY2FzZSAnYWFhYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEFNLCBQTSwgbWlkbmlnaHQsIG5vb25cbiAgYjogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgaWYgKGhvdXJzID09PSAxMikge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPT09IDApIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubWlkbmlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGhvdXJzIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2InOlxuICAgICAgY2FzZSAnYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgY2FzZSAnYmJiYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2JiYmInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIGluIHRoZSBtb3JuaW5nLCBpbiB0aGUgYWZ0ZXJub29uLCBpbiB0aGUgZXZlbmluZywgYXQgbmlnaHRcbiAgQjogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgaWYgKGhvdXJzID49IDE3KSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmV2ZW5pbmc7XG4gICAgfSBlbHNlIGlmIChob3VycyA+PSAxMikge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5hZnRlcm5vb247XG4gICAgfSBlbHNlIGlmIChob3VycyA+PSA0KSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1vcm5pbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubmlnaHQ7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnQic6XG4gICAgICBjYXNlICdCQic6XG4gICAgICBjYXNlICdCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnQkJCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ0JCQkInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdobycpIHtcbiAgICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyO1xuICAgICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDEyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2luZGV4Ny5kZWZhdWx0LmgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnSG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ0hvdXJzKCksIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2luZGV4Ny5kZWZhdWx0LkgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTExXVxuICBLOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG5cbiAgICBpZiAodG9rZW4gPT09ICdLbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICgwLCBfaW5kZXg2LmRlZmF1bHQpKGhvdXJzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBIb3VyIFsxLTI0XVxuICBrOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIGlmIChob3VycyA9PT0gMCkgaG91cnMgPSAyNDtcblxuICAgIGlmICh0b2tlbiA9PT0gJ2tvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gKDAsIF9pbmRleDYuZGVmYXVsdCkoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnbW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ01pbnV0ZXMoKSwge1xuICAgICAgICB1bml0OiAnbWludXRlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9pbmRleDcuZGVmYXVsdC5tKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdzbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDU2Vjb25kcygpLCB7XG4gICAgICAgIHVuaXQ6ICdzZWNvbmQnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2luZGV4Ny5kZWZhdWx0LnMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUzogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIF9pbmRleDcuZGVmYXVsdC5TKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGFsd2F5cyBgJ1onYClcbiAgWDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBpZiAodGltZXpvbmVPZmZzZXQgPT09IDApIHtcbiAgICAgIHJldHVybiAnWic7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ1gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYYFxuXG4gICAgICBjYXNlICdYWFhYJzpcbiAgICAgIGNhc2UgJ1hYJzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWFhgXG5cbiAgICAgIGNhc2UgJ1hYWFhYJzpcbiAgICAgIGNhc2UgJ1hYWCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYCcrMDA6MDAnYCBvciBlcXVpdmFsZW50KVxuICB4OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICd4JzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eGBcblxuICAgICAgY2FzZSAneHh4eCc6XG4gICAgICBjYXNlICd4eCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgeHh4YFxuXG4gICAgICBjYXNlICd4eHh4eCc6XG4gICAgICBjYXNlICd4eHgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKEdNVClcbiAgTzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAnTyc6XG4gICAgICBjYXNlICdPTyc6XG4gICAgICBjYXNlICdPT08nOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICdPT09PJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdGlvbilcbiAgejogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAneic6XG4gICAgICBjYXNlICd6eic6XG4gICAgICBjYXNlICd6enonOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICd6enp6JzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gU2Vjb25kcyB0aW1lc3RhbXBcbiAgdDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IE1hdGguZmxvb3Iob3JpZ2luYWxEYXRlLmdldFRpbWUoKSAvIDEwMDApO1xuICAgIHJldHVybiAoMCwgX2luZGV4Ni5kZWZhdWx0KSh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAgVDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCk7XG4gICAgcmV0dXJuICgwLCBfaW5kZXg2LmRlZmF1bHQpKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVTaG9ydChvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9IE1hdGguZmxvb3IoYWJzT2Zmc2V0IC8gNjApO1xuICB2YXIgbWludXRlcyA9IGFic09mZnNldCAlIDYwO1xuXG4gIGlmIChtaW51dGVzID09PSAwKSB7XG4gICAgcmV0dXJuIHNpZ24gKyBTdHJpbmcoaG91cnMpO1xuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICByZXR1cm4gc2lnbiArIFN0cmluZyhob3VycykgKyBkZWxpbWl0ZXIgKyAoMCwgX2luZGV4Ni5kZWZhdWx0KShtaW51dGVzLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgaWYgKG9mZnNldCAlIDYwID09PSAwKSB7XG4gICAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICAgIHJldHVybiBzaWduICsgKDAsIF9pbmRleDYuZGVmYXVsdCkoTWF0aC5hYnMob2Zmc2V0KSAvIDYwLCAyKTtcbiAgfVxuXG4gIHJldHVybiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9ICgwLCBfaW5kZXg2LmRlZmF1bHQpKE1hdGguZmxvb3IoYWJzT2Zmc2V0IC8gNjApLCAyKTtcbiAgdmFyIG1pbnV0ZXMgPSAoMCwgX2luZGV4Ni5kZWZhdWx0KShhYnNPZmZzZXQgJSA2MCwgMik7XG4gIHJldHVybiBzaWduICsgaG91cnMgKyBkZWxpbWl0ZXIgKyBtaW51dGVzO1xufVxuXG52YXIgX2RlZmF1bHQgPSBmb3JtYXR0ZXJzO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qXG4gKiB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8ICBhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBBKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBkICB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICB8ICBEICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBoICB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICB8ICBIICB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBtICB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBNICB8IE1vbnRoICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBzICB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICB8ICBTICB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICB8XG4gKiB8ICB5ICB8IFllYXIgKGFicykgICAgICAgICAgICAgICAgICAgICB8ICBZICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgKiBhcmUgbm90IGltcGxlbWVudGVkIGJ1dCByZXNlcnZlZCBieSBVbmljb2RlIHN0YW5kYXJkLlxuICovXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICAvLyBGcm9tIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtMzEvdHIzNS1kYXRlcy5odG1sI0RhdGVfRm9ybWF0X3Rva2Vuc1xuICAgIC8vIHwgWWVhciAgICAgfCAgICAgeSB8IHl5IHwgICB5eXkgfCAgeXl5eSB8IHl5eXl5IHxcbiAgICAvLyB8LS0tLS0tLS0tLXwtLS0tLS0tfC0tLS18LS0tLS0tLXwtLS0tLS0tfC0tLS0tLS18XG4gICAgLy8gfCBBRCAxICAgICB8ICAgICAxIHwgMDEgfCAgIDAwMSB8ICAwMDAxIHwgMDAwMDEgfFxuICAgIC8vIHwgQUQgMTIgICAgfCAgICAxMiB8IDEyIHwgICAwMTIgfCAgMDAxMiB8IDAwMDEyIHxcbiAgICAvLyB8IEFEIDEyMyAgIHwgICAxMjMgfCAyMyB8ICAgMTIzIHwgIDAxMjMgfCAwMDEyMyB8XG4gICAgLy8gfCBBRCAxMjM0ICB8ICAxMjM0IHwgMzQgfCAgMTIzNCB8ICAxMjM0IHwgMDEyMzQgfFxuICAgIC8vIHwgQUQgMTIzNDUgfCAxMjM0NSB8IDQ1IHwgMTIzNDUgfCAxMjM0NSB8IDEyMzQ1IHxcbiAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgIHZhciB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgcmV0dXJuICgwLCBfaW5kZXguZGVmYXVsdCkodG9rZW4gPT09ICd5eScgPyB5ZWFyICUgMTAwIDogeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgIHJldHVybiB0b2tlbiA9PT0gJ00nID8gU3RyaW5nKG1vbnRoICsgMSkgOiAoMCwgX2luZGV4LmRlZmF1bHQpKG1vbnRoICsgMSwgMik7XG4gIH0sXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZDogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuICgwLCBfaW5kZXguZGVmYXVsdCkoZGF0ZS5nZXRVVENEYXRlKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXRlLmdldFVUQ0hvdXJzKCkgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICBjYXNlICdhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgICBjYXNlICdhYWFhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWVbMF07XG5cbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZSA9PT0gJ2FtJyA/ICdhLm0uJyA6ICdwLm0uJztcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiAoMCwgX2luZGV4LmRlZmF1bHQpKGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyIHx8IDEyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gKDAsIF9pbmRleC5kZWZhdWx0KShkYXRlLmdldFVUQ0hvdXJzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gKDAsIF9pbmRleC5kZWZhdWx0KShkYXRlLmdldFVUQ01pbnV0ZXMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiAoMCwgX2luZGV4LmRlZmF1bHQpKGRhdGUuZ2V0VVRDU2Vjb25kcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUzogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIG51bWJlck9mRGlnaXRzID0gdG9rZW4ubGVuZ3RoO1xuICAgIHZhciBtaWxsaXNlY29uZHMgPSBkYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgIHZhciBmcmFjdGlvbmFsU2Vjb25kcyA9IE1hdGguZmxvb3IobWlsbGlzZWNvbmRzICogTWF0aC5wb3coMTAsIG51bWJlck9mRGlnaXRzIC0gMykpO1xuICAgIHJldHVybiAoMCwgX2luZGV4LmRlZmF1bHQpKGZyYWN0aW9uYWxTZWNvbmRzLCB0b2tlbi5sZW5ndGgpO1xuICB9XG59O1xudmFyIF9kZWZhdWx0ID0gZm9ybWF0dGVycztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbmZ1bmN0aW9uIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSAnUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFBQUCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0aW1lTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgJ3AnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHBwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwcHAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGF0ZVRpbWVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgdmFyIG1hdGNoUmVzdWx0ID0gcGF0dGVybi5tYXRjaCgvKFArKShwKyk/LykgfHwgW107XG4gIHZhciBkYXRlUGF0dGVybiA9IG1hdGNoUmVzdWx0WzFdO1xuICB2YXIgdGltZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsyXTtcblxuICBpZiAoIXRpbWVQYXR0ZXJuKSB7XG4gICAgcmV0dXJuIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpO1xuICB9XG5cbiAgdmFyIGRhdGVUaW1lRm9ybWF0O1xuXG4gIHN3aXRjaCAoZGF0ZVBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBkYXRlVGltZUZvcm1hdC5yZXBsYWNlKCd7e2RhdGV9fScsIGRhdGVMb25nRm9ybWF0dGVyKGRhdGVQYXR0ZXJuLCBmb3JtYXRMb25nKSkucmVwbGFjZSgne3t0aW1lfX0nLCB0aW1lTG9uZ0Zvcm1hdHRlcih0aW1lUGF0dGVybiwgZm9ybWF0TG9uZykpO1xufVxuXG52YXIgbG9uZ0Zvcm1hdHRlcnMgPSB7XG4gIHA6IHRpbWVMb25nRm9ybWF0dGVyLFxuICBQOiBkYXRlVGltZUxvbmdGb3JtYXR0ZXJcbn07XG52YXIgX2RlZmF1bHQgPSBsb25nRm9ybWF0dGVycztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzO1xuXG4vKipcbiAqIEdvb2dsZSBDaHJvbWUgYXMgb2YgNjcuMC4zMzk2Ljg3IGludHJvZHVjZWQgdGltZXpvbmVzIHdpdGggb2Zmc2V0IHRoYXQgaW5jbHVkZXMgc2Vjb25kcy5cbiAqIFRoZXkgdXN1YWxseSBhcHBlYXIgZm9yIGRhdGVzIHRoYXQgZGVub3RlIHRpbWUgYmVmb3JlIHRoZSB0aW1lem9uZXMgd2VyZSBpbnRyb2R1Y2VkXG4gKiAoZS5nLiBmb3IgJ0V1cm9wZS9QcmFndWUnIHRpbWV6b25lIHRoZSBvZmZzZXQgaXMgR01UKzAwOjU3OjQ0IGJlZm9yZSAxIE9jdG9iZXIgMTg5MVxuICogYW5kIEdNVCswMTowMDowMCBhZnRlciB0aGF0IGRhdGUpXG4gKlxuICogRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIHRoZSBvZmZzZXQgaW4gbWludXRlcyBhbmQgd291bGQgcmV0dXJuIDU3IGZvciB0aGUgZXhhbXBsZSBhYm92ZSxcbiAqIHdoaWNoIHdvdWxkIGxlYWQgdG8gaW5jb3JyZWN0IGNhbGN1bGF0aW9ucy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHRpbWV6b25lIG9mZnNldCBpbiBtaWxsaXNlY29uZHMgdGhhdCB0YWtlcyBzZWNvbmRzIGluIGFjY291bnQuXG4gKi9cbmZ1bmN0aW9uIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoZGF0ZSkge1xuICB2YXIgdXRjRGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSwgZGF0ZS5nZXRIb3VycygpLCBkYXRlLmdldE1pbnV0ZXMoKSwgZGF0ZS5nZXRTZWNvbmRzKCksIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpKTtcbiAgdXRjRGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkpO1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgLSB1dGNEYXRlLmdldFRpbWUoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRVVENEYXlPZlllYXI7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBNSUxMSVNFQ09ORFNfSU5fREFZID0gODY0MDAwMDA7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5mdW5jdGlvbiBnZXRVVENEYXlPZlllYXIoZGlydHlEYXRlKSB7XG4gICgwLCBfaW5kZXgyLmRlZmF1bHQpKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eURhdGUpO1xuICB2YXIgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mWWVhclRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICB2YXIgZGlmZmVyZW5jZSA9IHRpbWVzdGFtcCAtIHN0YXJ0T2ZZZWFyVGltZXN0YW1wO1xuICByZXR1cm4gTWF0aC5mbG9vcihkaWZmZXJlbmNlIC8gTUlMTElTRUNPTkRTX0lOX0RBWSkgKyAxO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdldFVUQ0lTT1dlZWs7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4NCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmZ1bmN0aW9uIGdldFVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gICgwLCBfaW5kZXg0LmRlZmF1bHQpKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9ICgwLCBfaW5kZXgyLmRlZmF1bHQpKGRhdGUpLmdldFRpbWUoKSAtICgwLCBfaW5kZXgzLmRlZmF1bHQpKGRhdGUpLmdldFRpbWUoKTsgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcblxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRVVENJU09XZWVrWWVhcjtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuZnVuY3Rpb24gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gICgwLCBfaW5kZXgyLmRlZmF1bHQpKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENGdWxsWWVhcih5ZWFyICsgMSwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSAoMCwgX2luZGV4My5kZWZhdWx0KShmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9ICgwLCBfaW5kZXgzLmRlZmF1bHQpKGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIpO1xuXG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRVVENXZWVrO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3RhcnRPZlVUQ1dlZWtZZWFyL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5mdW5jdGlvbiBnZXRVVENXZWVrKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICAoMCwgX2luZGV4NC5kZWZhdWx0KSgxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlEYXRlKTtcbiAgdmFyIGRpZmYgPSAoMCwgX2luZGV4Mi5kZWZhdWx0KShkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCkgLSAoMCwgX2luZGV4My5kZWZhdWx0KShkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCk7IC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0VVRDV2Vla1llYXI7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4NCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuZnVuY3Rpb24gZ2V0VVRDV2Vla1llYXIoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpIHtcbiAgKDAsIF9pbmRleDIuZGVmYXVsdCkoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlO1xuICB2YXIgbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlICYmIGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZTtcbiAgdmFyIGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IDEgOiAoMCwgX2luZGV4NC5kZWZhdWx0KShsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgOiAoMCwgX2luZGV4NC5kZWZhdWx0KShvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGZpcnN0V2Vla09mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrT2ZOZXh0WWVhci5zZXRVVENGdWxsWWVhcih5ZWFyICsgMSwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZOZXh0WWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZOZXh0WWVhciA9ICgwLCBfaW5kZXgzLmRlZmF1bHQpKGZpcnN0V2Vla09mTmV4dFllYXIsIGRpcnR5T3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWtPZlRoaXNZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9ICgwLCBfaW5kZXgzLmRlZmF1bHQpKGZpcnN0V2Vla09mVGhpc1llYXIsIGRpcnR5T3B0aW9ucyk7XG5cbiAgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbiA9IGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW47XG5leHBvcnRzLmlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbiA9IGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbjtcbmV4cG9ydHMudGhyb3dQcm90ZWN0ZWRFcnJvciA9IHRocm93UHJvdGVjdGVkRXJyb3I7XG52YXIgcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zID0gWydEJywgJ0REJ107XG52YXIgcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMgPSBbJ1lZJywgJ1lZWVknXTtcblxuZnVuY3Rpb24gaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cblxuZnVuY3Rpb24gaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiBwcm90ZWN0ZWRXZWVrWWVhclRva2Vucy5pbmRleE9mKHRva2VuKSAhPT0gLTE7XG59XG5cbmZ1bmN0aW9uIHRocm93UHJvdGVjdGVkRXJyb3IodG9rZW4sIGZvcm1hdCwgaW5wdXQpIHtcbiAgaWYgKHRva2VuID09PSAnWVlZWScpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ1lZJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdEJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnREQnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfVxufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcmVxdWlyZWRBcmdzO1xuXG5mdW5jdGlvbiByZXF1aXJlZEFyZ3MocmVxdWlyZWQsIGFyZ3MpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoIDwgcmVxdWlyZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHJlcXVpcmVkICsgJyBhcmd1bWVudCcgKyAocmVxdWlyZWQgPiAxID8gJ3MnIDogJycpICsgJyByZXF1aXJlZCwgYnV0IG9ubHkgJyArIGFyZ3MubGVuZ3RoICsgJyBwcmVzZW50Jyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBzdGFydE9mVVRDSVNPV2VlaztcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5mdW5jdGlvbiBzdGFydE9mVVRDSVNPV2VlayhkaXJ0eURhdGUpIHtcbiAgKDAsIF9pbmRleDIuZGVmYXVsdCkoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IDE7XG4gIHZhciBkYXRlID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgdmFyIGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uO1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSBkaWZmKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gc3RhcnRPZlVUQ0lTT1dlZWtZZWFyO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vZ2V0VVRDSVNPV2Vla1llYXIvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcbmZ1bmN0aW9uIHN0YXJ0T2ZVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpIHtcbiAgKDAsIF9pbmRleDMuZGVmYXVsdCkoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHllYXIgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5RGF0ZSk7XG4gIHZhciBmb3VydGhPZkphbnVhcnkgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gKDAsIF9pbmRleDIuZGVmYXVsdCkoZm91cnRoT2ZKYW51YXJ5KTtcbiAgcmV0dXJuIGRhdGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gc3RhcnRPZlVUQ1dlZWs7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5mdW5jdGlvbiBzdGFydE9mVVRDV2VlayhkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICAoMCwgX2luZGV4Mi5kZWZhdWx0KSgxLCBhcmd1bWVudHMpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlO1xuICB2YXIgbG9jYWxlV2Vla1N0YXJ0c09uID0gbG9jYWxlICYmIGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLndlZWtTdGFydHNPbjtcbiAgdmFyIGRlZmF1bHRXZWVrU3RhcnRzT24gPSBsb2NhbGVXZWVrU3RhcnRzT24gPT0gbnVsbCA/IDAgOiAoMCwgX2luZGV4My5kZWZhdWx0KShsb2NhbGVXZWVrU3RhcnRzT24pO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gb3B0aW9ucy53ZWVrU3RhcnRzT24gPT0gbnVsbCA/IGRlZmF1bHRXZWVrU3RhcnRzT24gOiAoMCwgX2luZGV4My5kZWZhdWx0KShvcHRpb25zLndlZWtTdGFydHNPbik7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGRhdGUgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBzdGFydE9mVVRDV2Vla1llYXI7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9nZXRVVENXZWVrWWVhci9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5mdW5jdGlvbiBzdGFydE9mVVRDV2Vla1llYXIoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpIHtcbiAgKDAsIF9pbmRleDIuZGVmYXVsdCkoMSwgYXJndW1lbnRzKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZSAmJiBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU7XG4gIHZhciBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyAxIDogKDAsIF9pbmRleDQuZGVmYXVsdCkobG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIDogKDAsIF9pbmRleDQuZGVmYXVsdCkob3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpO1xuICB2YXIgeWVhciA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpO1xuICB2YXIgZmlyc3RXZWVrID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vlay5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWsuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gKDAsIF9pbmRleDMuZGVmYXVsdCkoZmlyc3RXZWVrLCBkaXJ0eU9wdGlvbnMpO1xuICByZXR1cm4gZGF0ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0b0ludGVnZXI7XG5cbmZ1bmN0aW9uIHRvSW50ZWdlcihkaXJ0eU51bWJlcikge1xuICBpZiAoZGlydHlOdW1iZXIgPT09IG51bGwgfHwgZGlydHlOdW1iZXIgPT09IHRydWUgfHwgZGlydHlOdW1iZXIgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuXG4gIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuXG4gIHJldHVybiBudW1iZXIgPCAwID8gTWF0aC5jZWlsKG51bWJlcikgOiBNYXRoLmZsb29yKG51bWJlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYWRkTWlsbGlzZWNvbmRzO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RvRGF0ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIGFkZE1pbGxpc2Vjb25kc1xuICogQGNhdGVnb3J5IE1pbGxpc2Vjb25kIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBiZSBhZGRlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaWxsaXNlY29uZHMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDc1MCBtaWxsaXNlY29uZHMgdG8gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcbiAqIGNvbnN0IHJlc3VsdCA9IGFkZE1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjMwLjc1MFxuICovXG5mdW5jdGlvbiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICAoMCwgX2luZGV4My5kZWZhdWx0KSgyLCBhcmd1bWVudHMpO1xuICB2YXIgdGltZXN0YW1wID0gKDAsIF9pbmRleDIuZGVmYXVsdCkoZGlydHlEYXRlKS5nZXRUaW1lKCk7XG4gIHZhciBhbW91bnQgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIGFtb3VudCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZm9ybWF0O1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vaXNWYWxpZC9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vbG9jYWxlL2VuLVVTL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdWJNaWxsaXNlY29uZHMvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4NCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RvRGF0ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg1ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9mb3JtYXQvZm9ybWF0dGVycy9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg2ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4NyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg4ID0gcmVxdWlyZShcIi4uL19saWIvcHJvdGVjdGVkVG9rZW5zL2luZGV4LmpzXCIpO1xuXG52YXIgX2luZGV4OSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDEwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBUaGlzIFJlZ0V4cCBjb25zaXN0cyBvZiB0aHJlZSBwYXJ0cyBzZXBhcmF0ZWQgYnkgYHxgOlxuLy8gLSBbeVlRcU1Md0lkRGVjaWhIS2ttc11vIG1hdGNoZXMgYW55IGF2YWlsYWJsZSBvcmRpbmFsIG51bWJlciB0b2tlblxuLy8gICAob25lIG9mIHRoZSBjZXJ0YWluIGxldHRlcnMgZm9sbG93ZWQgYnkgYG9gKVxuLy8gLSAoXFx3KVxcMSogbWF0Y2hlcyBhbnkgc2VxdWVuY2VzIG9mIHRoZSBzYW1lIGxldHRlclxuLy8gLSAnJyBtYXRjaGVzIHR3byBxdW90ZSBjaGFyYWN0ZXJzIGluIGEgcm93XG4vLyAtICcoJyd8W14nXSkrKCd8JCkgbWF0Y2hlcyBhbnl0aGluZyBzdXJyb3VuZGVkIGJ5IHR3byBxdW90ZSBjaGFyYWN0ZXJzICgnKSxcbi8vICAgZXhjZXB0IGEgc2luZ2xlIHF1b3RlIHN5bWJvbCwgd2hpY2ggZW5kcyB0aGUgc2VxdWVuY2UuXG4vLyAgIFR3byBxdW90ZSBjaGFyYWN0ZXJzIGRvIG5vdCBlbmQgdGhlIHNlcXVlbmNlLlxuLy8gICBJZiB0aGVyZSBpcyBubyBtYXRjaGluZyBzaW5nbGUgcXVvdGVcbi8vICAgdGhlbiB0aGUgc2VxdWVuY2Ugd2lsbCBjb250aW51ZSB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcuXG4vLyAtIC4gbWF0Y2hlcyBhbnkgc2luZ2xlIGNoYXJhY3RlciB1bm1hdGNoZWQgYnkgcHJldmlvdXMgcGFydHMgb2YgdGhlIFJlZ0V4cHNcbnZhciBmb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1t5WVFxTUx3SWREZWNpaEhLa21zXW98KFxcdylcXDEqfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nOyAvLyBUaGlzIFJlZ0V4cCBjYXRjaGVzIHN5bWJvbHMgZXNjYXBlZCBieSBxdW90ZXMsIGFuZCBhbHNvXG4vLyBzZXF1ZW5jZXMgb2Ygc3ltYm9scyBQLCBwLCBhbmQgdGhlIGNvbWJpbmF0aW9ucyBsaWtlIGBQUFBQUFBQcHBwcHBgXG5cbnZhciBsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9QK3ArfFArfHArfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nO1xudmFyIGVzY2FwZWRTdHJpbmdSZWdFeHAgPSAvXicoW15dKj8pJz8kLztcbnZhciBkb3VibGVRdW90ZVJlZ0V4cCA9IC8nJy9nO1xudmFyIHVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwID0gL1thLXpBLVpdLztcbi8qKlxuICogQG5hbWUgZm9ybWF0XG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEZvcm1hdCB0aGUgZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nIGluIHRoZSBnaXZlbiBmb3JtYXQuIFRoZSByZXN1bHQgbWF5IHZhcnkgYnkgbG9jYWxlLlxuICpcbiAqID4g4pqg77iPIFBsZWFzZSBub3RlIHRoYXQgdGhlIGBmb3JtYXRgIHRva2VucyBkaWZmZXIgZnJvbSBNb21lbnQuanMgYW5kIG90aGVyIGxpYnJhcmllcy5cbiAqID4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqIFRoZSBjaGFyYWN0ZXJzIHdyYXBwZWQgYmV0d2VlbiB0d28gc2luZ2xlIHF1b3RlcyBjaGFyYWN0ZXJzICgnKSBhcmUgZXNjYXBlZC5cbiAqIFR3byBzaW5nbGUgcXVvdGVzIGluIGEgcm93LCB3aGV0aGVyIGluc2lkZSBvciBvdXRzaWRlIGEgcXVvdGVkIHNlcXVlbmNlLCByZXByZXNlbnQgYSAncmVhbCcgc2luZ2xlIHF1b3RlLlxuICogKHNlZSB0aGUgbGFzdCBleGFtcGxlKVxuICpcbiAqIEZvcm1hdCBvZiB0aGUgc3RyaW5nIGlzIGJhc2VkIG9uIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGVcbiAqIHdpdGggYSBmZXcgYWRkaXRpb25zIChzZWUgbm90ZSA3IGJlbG93IHRoZSB0YWJsZSkuXG4gKlxuICogQWNjZXB0ZWQgcGF0dGVybnM6XG4gKiB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQYXR0ZXJuIHwgUmVzdWx0IGV4YW1wbGVzICAgICAgICAgICAgICAgICAgIHwgTm90ZXMgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLXxcbiAqIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEcuLkdHRyAgfCBBRCwgQkMgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHICAgIHwgQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3QgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHR0cgICB8IEEsIEIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQ2FsZW5kYXIgeWVhciAgICAgICAgICAgICAgICAgICB8IHkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5byAgICAgIHwgNDR0aCwgMXN0LCAwdGgsIDE3dGggICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5ICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eXkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICB8IFkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZbyAgICAgIHwgNDR0aCwgMXN0LCAxOTAwdGgsIDIwMTd0aCAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWVkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgICB8IFIgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUiAgICAgIHwgLTQzLCAwMCwgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSICAgICB8IC0wNDMsIDAwMCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlIgICAgfCAtMDA0MywgMDAwMCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSUiAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1LDcgfFxuICogfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgIHwgdSAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1ICAgICAgfCAtNDMsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXUgICAgIHwgLTA0MywgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dSAgICB8IC0wMDQzLCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXV1ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IFF1YXJ0ZXIgKGZvcm1hdHRpbmcpICAgICAgICAgICAgfCBRICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVFRICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IFF1YXJ0ZXIgKHN0YW5kLWFsb25lKSAgICAgICAgICAgfCBxICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXFxICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IE1vbnRoIChmb3JtYXR0aW5nKSAgICAgICAgICAgICAgfCBNICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU0gICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTSAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU1NICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1vbnRoIChzdGFuZC1hbG9uZSkgICAgICAgICAgICAgfCBMICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTEwgICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTCAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTExMICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgfCB3ICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHd3ICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICAgfCBJICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElJICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICAgfCBkICAgICAgIHwgMSwgMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDMxc3QgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRkICAgICAgfCAwMSwgMDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICAgfCBEICAgICAgIHwgMSwgMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDM2NXRoLCAzNjZ0aCAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREICAgICAgfCAwMSwgMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREQgICAgIHwgMDAxLCAwMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRERERCAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgRGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgICAgICB8IEUuLkVFRSAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFRSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgfCBpICAgICAgIHwgMSwgMiwgMywgLi4uLCA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDd0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpICAgICAgfCAwMSwgMDIsIC4uLiwgMDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWkgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaWkgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgNyAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgIHwgZSAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZSAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWVlICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKHN0YW5kLWFsb25lKSB8IGMgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2MgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjYyAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2MgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjYyAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhLi5hYSAgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhICAgICB8IGFtLCBwbSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWEgICAgfCBhLm0uLCBwLm0uICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhYSAgIHwgYSwgcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgIHwgYi4uYmIgICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYiAgICAgfCBhbSwgcG0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmJiICAgIHwgYS5tLiwgcC5tLiwgbm9vbiwgbWlkbmlnaHQgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYmIgICB8IGEsIHAsIG4sIG1pICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgICB8IEIuLkJCQiAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBCQkJCICAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQkIgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgICB8IGggICAgICAgfCAxLCAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBobyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMTJ0aCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaGggICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgICB8IEggICAgICAgfCAwLCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBIbyAgICAgIHwgMHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSEggICAgICB8IDAwLCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgICB8IEsgICAgICAgfCAxLCAyLCAuLi4sIDExLCAwICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBLbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMHRoICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS0sgICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgICB8IGsgICAgICAgfCAyNCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBrbyAgICAgIHwgMjR0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga2sgICAgICB8IDI0LCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgICB8IG0gICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW0gICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgICB8IHMgICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc3MgICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgICB8IFMgICAgICAgfCAwLCAxLCAuLi4sIDkgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTUyAgICAgIHwgMDAsIDAxLCAuLi4sIDk5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1NTICAgICB8IDAwMCwgMDAxLCAuLi4sIDk5OSAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTU1MgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3LyBaKSAgICAgICAgfCBYICAgICAgIHwgLTA4LCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFggICAgICB8IC0wODAwLCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWCAgICAgfCAtMDg6MDAsICswNTozMCwgWiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFhYICAgIHwgLTA4MDAsICswNTMwLCBaLCArMTIzNDU2ICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWFggICB8IC0wODowMCwgKzA1OjMwLCBaLCArMTI6MzQ6NTYgICAgICB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgICB8IHggICAgICAgfCAtMDgsICswNTMwLCArMDAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eCAgICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4ICAgICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eHggICAgfCAtMDgwMCwgKzA1MzAsICswMDAwLCArMTIzNDU2ICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4eCAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCwgKzEyOjM0OjU2IHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgIHwgTy4uLk9PTyB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE9PT08gICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyICAgICB8XG4gKiB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSAgfCB6Li4uenp6IHwgR01ULTgsIEdNVCs1OjMwLCBHTVQrMCAgICAgICAgICAgIHwgNiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgenp6eiAgICB8IEdNVC0wODowMCwgR01UKzA1OjMwLCBHTVQrMDA6MDAgICB8IDIsNiAgIHxcbiAqIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgICB8IHQgICAgICAgfCA1MTI5Njk1MjAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB0dCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgIHwgVCAgICAgICB8IDUxMjk2OTUyMDkwMCAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFRUICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDcgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICAgfCBQICAgICAgIHwgMDQvMjkvMTQ1MyAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFAgICAgICB8IEFwciAyOSwgMTQ1MyAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUCAgICAgfCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQICAgIHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgIHwgMiw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgIHwgcCAgICAgICB8IDEyOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwICAgICAgfCAxMjowMDowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcHAgICAgIHwgMTI6MDA6MDAgQU0gR01UKzIgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwcCAgICB8IDEyOjAwOjAwIEFNIEdNVCswMjowMCAgICAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgQ29tYmluYXRpb24gb2YgZGF0ZSBhbmQgdGltZSAgICB8IFBwICAgICAgfCAwNC8yOS8xNDUzLCAxMjowMCBBTSAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUHBwICAgIHwgQXByIDI5LCAxNDUzLCAxMjowMDowMCBBTSAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQcHBwICB8IEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUFBwcHBwfCBGcmlkYXksIEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgfCAyLDcgICB8XG4gKiBOb3RlczpcbiAqIDEuIFwiRm9ybWF0dGluZ1wiIHVuaXRzIChlLmcuIGZvcm1hdHRpbmcgcXVhcnRlcikgaW4gdGhlIGRlZmF1bHQgZW4tVVMgbG9jYWxlXG4gKiAgICBhcmUgdGhlIHNhbWUgYXMgXCJzdGFuZC1hbG9uZVwiIHVuaXRzLCBidXQgYXJlIGRpZmZlcmVudCBpbiBzb21lIGxhbmd1YWdlcy5cbiAqICAgIFwiRm9ybWF0dGluZ1wiIHVuaXRzIGFyZSBkZWNsaW5lZCBhY2NvcmRpbmcgdG8gdGhlIHJ1bGVzIG9mIHRoZSBsYW5ndWFnZVxuICogICAgaW4gdGhlIGNvbnRleHQgb2YgYSBkYXRlLiBcIlN0YW5kLWFsb25lXCIgdW5pdHMgYXJlIGFsd2F5cyBub21pbmF0aXZlIHNpbmd1bGFyOlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTExMTCcsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWQnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTU1NTScsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWR1J2BcbiAqXG4gKiAyLiBBbnkgc2VxdWVuY2Ugb2YgdGhlIGlkZW50aWNhbCBsZXR0ZXJzIGlzIGEgcGF0dGVybiwgdW5sZXNzIGl0IGlzIGVzY2FwZWQgYnlcbiAqICAgIHRoZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyAoc2VlIGJlbG93KS5cbiAqICAgIElmIHRoZSBzZXF1ZW5jZSBpcyBsb25nZXIgdGhhbiBsaXN0ZWQgaW4gdGFibGUgKGUuZy4gYEVFRUVFRUVFRUVFYClcbiAqICAgIHRoZSBvdXRwdXQgd2lsbCBiZSB0aGUgc2FtZSBhcyBkZWZhdWx0IHBhdHRlcm4gZm9yIHRoaXMgdW5pdCwgdXN1YWxseVxuICogICAgdGhlIGxvbmdlc3Qgb25lIChpbiBjYXNlIG9mIElTTyB3ZWVrZGF5cywgYEVFRUVgKS4gRGVmYXVsdCBwYXR0ZXJucyBmb3IgdW5pdHNcbiAqICAgIGFyZSBtYXJrZWQgd2l0aCBcIjJcIiBpbiB0aGUgbGFzdCBjb2x1bW4gb2YgdGhlIHRhYmxlLlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NJykgLy89PiAnTm92J2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTScpIC8vPT4gJ04nYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAzLiBTb21lIHBhdHRlcm5zIGNvdWxkIGJlIHVubGltaXRlZCBsZW5ndGggKHN1Y2ggYXMgYHl5eXl5eXl5YCkuXG4gKiAgICBUaGUgb3V0cHV0IHdpbGwgYmUgcGFkZGVkIHdpdGggemVyb3MgdG8gbWF0Y2ggdGhlIGxlbmd0aCBvZiB0aGUgcGF0dGVybi5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ3l5eXl5eXl5JykgLy89PiAnMDAwMDIwMTcnYFxuICpcbiAqIDQuIGBRUVFRUWAgYW5kIGBxcXFxcWAgY291bGQgYmUgbm90IHN0cmljdGx5IG51bWVyaWNhbCBpbiBzb21lIGxvY2FsZXMuXG4gKiAgICBUaGVzZSB0b2tlbnMgcmVwcmVzZW50IHRoZSBzaG9ydGVzdCBmb3JtIG9mIHRoZSBxdWFydGVyLlxuICpcbiAqIDUuIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiBgeWAgYW5kIGB1YCBwYXR0ZXJucyBhcmUgQi5DLiB5ZWFyczpcbiAqXG4gKiAgICB8IFllYXIgfCBgeWAgfCBgdWAgfFxuICogICAgfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAqICAgIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gKiAgICB8IEJDIDEgfCAgIDEgfCAgIDAgfFxuICogICAgfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAqXG4gKiAgICBBbHNvIGB5eWAgYWx3YXlzIHJldHVybnMgdGhlIGxhc3QgdHdvIGRpZ2l0cyBvZiBhIHllYXIsXG4gKiAgICB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQ6XG4gKlxuICogICAgfCBZZWFyIHwgYHl5YCB8IGB1dWAgfFxuICogICAgfC0tLS0tLXwtLS0tLS18LS0tLS0tfFxuICogICAgfCAxICAgIHwgICAwMSB8ICAgMDEgfFxuICogICAgfCAxNCAgIHwgICAxNCB8ICAgMTQgfFxuICogICAgfCAzNzYgIHwgICA3NiB8ICAzNzYgfFxuICogICAgfCAxNDUzIHwgICA1MyB8IDE0NTMgfFxuICpcbiAqICAgIFRoZSBzYW1lIGRpZmZlcmVuY2UgaXMgdHJ1ZSBmb3IgbG9jYWwgYW5kIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFycyAoYFlgIGFuZCBgUmApLFxuICogICAgZXhjZXB0IGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJzIGFyZSBkZXBlbmRlbnQgb24gYG9wdGlvbnMud2Vla1N0YXJ0c09uYFxuICogICAgYW5kIGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgKGNvbXBhcmUgW2dldElTT1dlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL2dldElTT1dlZWtZZWFyfVxuICogICAgYW5kIFtnZXRXZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRXZWVrWWVhcn0pLlxuICpcbiAqIDYuIFNwZWNpZmljIG5vbi1sb2NhdGlvbiB0aW1lem9uZXMgYXJlIGN1cnJlbnRseSB1bmF2YWlsYWJsZSBpbiBgZGF0ZS1mbnNgLFxuICogICAgc28gcmlnaHQgbm93IHRoZXNlIHRva2VucyBmYWxsIGJhY2sgdG8gR01UIHRpbWV6b25lcy5cbiAqXG4gKiA3LiBUaGVzZSBwYXR0ZXJucyBhcmUgbm90IGluIHRoZSBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiAgICAtIGBpYDogSVNPIGRheSBvZiB3ZWVrXG4gKiAgICAtIGBJYDogSVNPIHdlZWsgb2YgeWVhclxuICogICAgLSBgUmA6IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKiAgICAtIGB0YDogc2Vjb25kcyB0aW1lc3RhbXBcbiAqICAgIC0gYFRgOiBtaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBvYDogb3JkaW5hbCBudW1iZXIgbW9kaWZpZXJcbiAqICAgIC0gYFBgOiBsb25nIGxvY2FsaXplZCBkYXRlXG4gKiAgICAtIGBwYDogbG9uZyBsb2NhbGl6ZWQgdGltZVxuICpcbiAqIDguIGBZWWAgYW5kIGBZWVlZYCB0b2tlbnMgcmVwcmVzZW50IHdlZWstbnVtYmVyaW5nIHllYXJzIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIHllYXJzLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqIDkuIGBEYCBhbmQgYEREYCB0b2tlbnMgcmVwcmVzZW50IGRheXMgb2YgdGhlIHllYXIgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggZGF5cyBvZiB0aGUgbW9udGguXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogLSBUaGUgc2Vjb25kIGFyZ3VtZW50IGlzIG5vdyByZXF1aXJlZCBmb3IgdGhlIHNha2Ugb2YgZXhwbGljaXRuZXNzLlxuICpcbiAqICAgYGBgamF2YXNjcmlwdFxuICogICAvLyBCZWZvcmUgdjIuMC4wXG4gKiAgIGZvcm1hdChuZXcgRGF0ZSgyMDE2LCAwLCAxKSlcbiAqXG4gKiAgIC8vIHYyLjAuMCBvbndhcmRcbiAqICAgZm9ybWF0KG5ldyBEYXRlKDIwMTYsIDAsIDEpLCBcInl5eXktTU0tZGQnVCdISDptbTpzcy5TU1N4eHhcIilcbiAqICAgYGBgXG4gKlxuICogLSBOZXcgZm9ybWF0IHN0cmluZyBBUEkgZm9yIGBmb3JtYXRgIGZ1bmN0aW9uXG4gKiAgIHdoaWNoIGlzIGJhc2VkIG9uIFtVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzVdKGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGUpLlxuICogICBTZWUgW3RoaXMgcG9zdF0oaHR0cHM6Ly9ibG9nLmRhdGUtZm5zLm9yZy9wb3N0L3VuaWNvZGUtdG9rZW5zLWluLWRhdGUtZm5zLXYyLXNyZWF0eWtpOTFqZykgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiAtIENoYXJhY3RlcnMgYXJlIG5vdyBlc2NhcGVkIHVzaW5nIHNpbmdsZSBxdW90ZSBzeW1ib2xzIChgJ2ApIGluc3RlYWQgb2Ygc3F1YXJlIGJyYWNrZXRzLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IGZvcm1hdCAtIHRoZSBzdHJpbmcgb2YgdG9rZW5zXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU9MV0gLSB0aGUgZGF5IG9mIEphbnVhcnksIHdoaWNoIGlzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIHdlZWstbnVtYmVyaW5nIHllYXIgdG9rZW5zIGBZWWAgYW5kIGBZWVlZYDtcbiAqICAgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgZGF5IG9mIHllYXIgdG9rZW5zIGBEYCBhbmQgYEREYDtcbiAqICAgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHJldHVybnMge1N0cmluZ30gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZ1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYGRhdGVgIG11c3Qgbm90IGJlIEludmFsaWQgRGF0ZVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGxvY2FsaXplYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGZvcm1hdExvbmdgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy53ZWVrU3RhcnRzT25gIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGRgIGluc3RlYWQgb2YgYEREYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gZm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAxMSBGZWJydWFyeSAyMDE0IGluIG1pZGRsZS1lbmRpYW4gZm9ybWF0OlxuICogdmFyIHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCAxLCAxMSksICdNTS9kZC95eXl5JylcbiAqIC8vPT4gJzAyLzExLzIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAyIEp1bHkgMjAxNCBpbiBFc3BlcmFudG86XG4gKiBpbXBvcnQgeyBlb0xvY2FsZSB9IGZyb20gJ2RhdGUtZm5zL2xvY2FsZS9lbydcbiAqIHZhciByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiksIFwiZG8gJ2RlJyBNTU1NIHl5eXlcIiwge1xuICogICBsb2NhbGU6IGVvTG9jYWxlXG4gKiB9KVxuICogLy89PiAnMi1hIGRlIGp1bGlvIDIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEVzY2FwZSBzdHJpbmcgYnkgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnM6XG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIsIDE1KSwgXCJoICdvJydjbG9jaydcIilcbiAqIC8vPT4gXCIzIG8nY2xvY2tcIlxuICovXG5cbmZ1bmN0aW9uIGZvcm1hdChkaXJ0eURhdGUsIGRpcnR5Rm9ybWF0U3RyLCBkaXJ0eU9wdGlvbnMpIHtcbiAgKDAsIF9pbmRleDEwLmRlZmF1bHQpKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBmb3JtYXRTdHIgPSBTdHJpbmcoZGlydHlGb3JtYXRTdHIpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlIHx8IF9pbmRleDIuZGVmYXVsdDtcbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZTtcbiAgdmFyIGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IDEgOiAoMCwgX2luZGV4OS5kZWZhdWx0KShsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgOiAoMCwgX2luZGV4OS5kZWZhdWx0KShvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGxvY2FsZVdlZWtTdGFydHNPbiA9IGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLndlZWtTdGFydHNPbjtcbiAgdmFyIGRlZmF1bHRXZWVrU3RhcnRzT24gPSBsb2NhbGVXZWVrU3RhcnRzT24gPT0gbnVsbCA/IDAgOiAoMCwgX2luZGV4OS5kZWZhdWx0KShsb2NhbGVXZWVrU3RhcnRzT24pO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gb3B0aW9ucy53ZWVrU3RhcnRzT24gPT0gbnVsbCA/IGRlZmF1bHRXZWVrU3RhcnRzT24gOiAoMCwgX2luZGV4OS5kZWZhdWx0KShvcHRpb25zLndlZWtTdGFydHNPbik7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgaWYgKCFsb2NhbGUubG9jYWxpemUpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBsb2NhbGl6ZSBwcm9wZXJ0eScpO1xuICB9XG5cbiAgaWYgKCFsb2NhbGUuZm9ybWF0TG9uZykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGZvcm1hdExvbmcgcHJvcGVydHknKTtcbiAgfVxuXG4gIHZhciBvcmlnaW5hbERhdGUgPSAoMCwgX2luZGV4NC5kZWZhdWx0KShkaXJ0eURhdGUpO1xuXG4gIGlmICghKDAsIF9pbmRleC5kZWZhdWx0KShvcmlnaW5hbERhdGUpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB9IC8vIENvbnZlcnQgdGhlIGRhdGUgaW4gc3lzdGVtIHRpbWV6b25lIHRvIHRoZSBzYW1lIGRhdGUgaW4gVVRDKzAwOjAwIHRpbWV6b25lLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdCB3aGVuIFVUQyBmdW5jdGlvbnMgd2lsbCBiZSBpbXBsZW1lbnRlZCwgbG9jYWxlcyB3aWxsIGJlIGNvbXBhdGlibGUgd2l0aCB0aGVtLlxuICAvLyBTZWUgYW4gaXNzdWUgYWJvdXQgVVRDIGZ1bmN0aW9uczogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuXG4gIHZhciB0aW1lem9uZU9mZnNldCA9ICgwLCBfaW5kZXg3LmRlZmF1bHQpKG9yaWdpbmFsRGF0ZSk7XG4gIHZhciB1dGNEYXRlID0gKDAsIF9pbmRleDMuZGVmYXVsdCkob3JpZ2luYWxEYXRlLCB0aW1lem9uZU9mZnNldCk7XG4gIHZhciBmb3JtYXR0ZXJPcHRpb25zID0ge1xuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogZmlyc3RXZWVrQ29udGFpbnNEYXRlLFxuICAgIHdlZWtTdGFydHNPbjogd2Vla1N0YXJ0c09uLFxuICAgIGxvY2FsZTogbG9jYWxlLFxuICAgIF9vcmlnaW5hbERhdGU6IG9yaWdpbmFsRGF0ZVxuICB9O1xuICB2YXIgcmVzdWx0ID0gZm9ybWF0U3RyLm1hdGNoKGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcblxuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gJ3AnIHx8IGZpcnN0Q2hhcmFjdGVyID09PSAnUCcpIHtcbiAgICAgIHZhciBsb25nRm9ybWF0dGVyID0gX2luZGV4Ni5kZWZhdWx0W2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICAgIHJldHVybiBsb25nRm9ybWF0dGVyKHN1YnN0cmluZywgbG9jYWxlLmZvcm1hdExvbmcsIGZvcm1hdHRlck9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgLy8gUmVwbGFjZSB0d28gc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgd2l0aCBvbmUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlclxuICAgIGlmIChzdWJzdHJpbmcgPT09IFwiJydcIikge1xuICAgICAgcmV0dXJuIFwiJ1wiO1xuICAgIH1cblxuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcblxuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCInXCIpIHtcbiAgICAgIHJldHVybiBjbGVhbkVzY2FwZWRTdHJpbmcoc3Vic3RyaW5nKTtcbiAgICB9XG5cbiAgICB2YXIgZm9ybWF0dGVyID0gX2luZGV4NS5kZWZhdWx0W2ZpcnN0Q2hhcmFjdGVyXTtcblxuICAgIGlmIChmb3JtYXR0ZXIpIHtcbiAgICAgIGlmICghb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnMgJiYgKDAsIF9pbmRleDguaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKShzdWJzdHJpbmcpKSB7XG4gICAgICAgICgwLCBfaW5kZXg4LnRocm93UHJvdGVjdGVkRXJyb3IpKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIGRpcnR5RGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zICYmICgwLCBfaW5kZXg4LmlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4pKHN1YnN0cmluZykpIHtcbiAgICAgICAgKDAsIF9pbmRleDgudGhyb3dQcm90ZWN0ZWRFcnJvcikoc3Vic3RyaW5nLCBkaXJ0eUZvcm1hdFN0ciwgZGlydHlEYXRlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZvcm1hdHRlcih1dGNEYXRlLCBzdWJzdHJpbmcsIGxvY2FsZS5sb2NhbGl6ZSwgZm9ybWF0dGVyT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyLm1hdGNoKHVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0Zvcm1hdCBzdHJpbmcgY29udGFpbnMgYW4gdW5lc2NhcGVkIGxhdGluIGFscGhhYmV0IGNoYXJhY3RlciBgJyArIGZpcnN0Q2hhcmFjdGVyICsgJ2AnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3Vic3RyaW5nO1xuICB9KS5qb2luKCcnKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gY2xlYW5Fc2NhcGVkU3RyaW5nKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5tYXRjaChlc2NhcGVkU3RyaW5nUmVnRXhwKVsxXS5yZXBsYWNlKGRvdWJsZVF1b3RlUmVnRXhwLCBcIidcIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNEYXRlO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIGlzRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gdmFsdWUgYSBkYXRlP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLiBUaGUgZnVuY3Rpb24gd29ya3MgZm9yIGRhdGVzIHRyYW5zZmVycmVkIGFjcm9zcyBpZnJhbWVzLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIHRoZSB2YWx1ZSB0byBjaGVja1xuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgZGF0ZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKCkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZShuZXcgRGF0ZShOYU4pKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBzb21lIHZhbHVlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKCcyMDE0LTAyLTMxJylcbiAqIC8vPT4gZmFsc2VcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIG9iamVjdDpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZSh7fSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbHVlKSB7XG4gICgwLCBfaW5kZXguZGVmYXVsdCkoMSwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSB8fCB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1ZhbGlkO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vaXNEYXRlL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSBpc1ZhbGlkXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIHZhbGlkP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBmYWxzZSBpZiBhcmd1bWVudCBpcyBJbnZhbGlkIERhdGUgYW5kIHRydWUgb3RoZXJ3aXNlLlxuICogQXJndW1lbnQgaXMgY29udmVydGVkIHRvIERhdGUgdXNpbmcgYHRvRGF0ZWAuIFNlZSBbdG9EYXRlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL3RvRGF0ZX1cbiAqIEludmFsaWQgRGF0ZSBpcyBhIERhdGUsIHdob3NlIHRpbWUgdmFsdWUgaXMgTmFOLlxuICpcbiAqIFRpbWUgdmFsdWUgb2YgRGF0ZTogaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS45LjEuMVxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogLSBOb3cgYGlzVmFsaWRgIGRvZXNuJ3QgdGhyb3cgYW4gZXhjZXB0aW9uXG4gKiAgIGlmIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqICAgSW5zdGVhZCwgYXJndW1lbnQgaXMgY29udmVydGVkIGJlZm9yZWhhbmQgdXNpbmcgYHRvRGF0ZWAuXG4gKlxuICogICBFeGFtcGxlczpcbiAqXG4gKiAgIHwgYGlzVmFsaWRgIGFyZ3VtZW50ICAgICAgICB8IEJlZm9yZSB2Mi4wLjAgfCB2Mi4wLjAgb253YXJkIHxcbiAqICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tfFxuICogICB8IGBuZXcgRGF0ZSgpYCAgICAgICAgICAgICAgfCBgdHJ1ZWAgICAgICAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKCcyMDE2LTAxLTAxJylgICB8IGB0cnVlYCAgICAgICAgfCBgdHJ1ZWAgICAgICAgIHxcbiAqICAgfCBgbmV3IERhdGUoJycpYCAgICAgICAgICAgIHwgYGZhbHNlYCAgICAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZSgxNDg4MzcwODM1MDgxKWAgfCBgdHJ1ZWAgICAgICAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKE5hTilgICAgICAgICAgICB8IGBmYWxzZWAgICAgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgJzIwMTYtMDEtMDEnYCAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGAnJ2AgICAgICAgICAgICAgICAgICAgICAgfCBgVHlwZUVycm9yYCAgIHwgYGZhbHNlYCAgICAgICB8XG4gKiAgIHwgYDE0ODgzNzA4MzUwODFgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgdHJ1ZWAgICAgICAgIHxcbiAqICAgfCBgTmFOYCAgICAgICAgICAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGBmYWxzZWAgICAgICAgfFxuICpcbiAqICAgV2UgaW50cm9kdWNlIHRoaXMgY2hhbmdlIHRvIG1ha2UgKmRhdGUtZm5zKiBjb25zaXN0ZW50IHdpdGggRUNNQVNjcmlwdCBiZWhhdmlvclxuICogICB0aGF0IHRyeSB0byBjb2VyY2UgYXJndW1lbnRzIHRvIHRoZSBleHBlY3RlZCB0eXBlXG4gKiAgICh3aGljaCBpcyBhbHNvIHRoZSBjYXNlIHdpdGggb3RoZXIgKmRhdGUtZm5zKiBmdW5jdGlvbnMpLlxuICpcbiAqIEBwYXJhbSB7Kn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGUgaXMgdmFsaWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKDIwMTQsIDEsIDMxKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbHVlLCBjb252ZXJ0YWJsZSBpbnRvIGEgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQoMTM5MzgwNDgwMDAwMClcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoJycpKVxuICogLy89PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1ZhbGlkKGRpcnR5RGF0ZSkge1xuICAoMCwgX2luZGV4My5kZWZhdWx0KSgxLCBhcmd1bWVudHMpO1xuXG4gIGlmICghKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eURhdGUpICYmIHR5cGVvZiBkaXJ0eURhdGUgIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGRhdGUgPSAoMCwgX2luZGV4Mi5kZWZhdWx0KShkaXJ0eURhdGUpO1xuICByZXR1cm4gIWlzTmFOKE51bWJlcihkYXRlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYnVpbGRGb3JtYXRMb25nRm47XG5cbmZ1bmN0aW9uIGJ1aWxkRm9ybWF0TG9uZ0ZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgLy8gVE9ETzogUmVtb3ZlIFN0cmluZygpXG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgIHZhciBmb3JtYXQgPSBhcmdzLmZvcm1hdHNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0c1thcmdzLmRlZmF1bHRXaWR0aF07XG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBidWlsZExvY2FsaXplRm47XG5cbmZ1bmN0aW9uIGJ1aWxkTG9jYWxpemVGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlydHlJbmRleCwgZGlydHlPcHRpb25zKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gICAgdmFyIGNvbnRleHQgPSBvcHRpb25zLmNvbnRleHQgPyBTdHJpbmcob3B0aW9ucy5jb250ZXh0KSA6ICdzdGFuZGFsb25lJztcbiAgICB2YXIgdmFsdWVzQXJyYXk7XG5cbiAgICBpZiAoY29udGV4dCA9PT0gJ2Zvcm1hdHRpbmcnICYmIGFyZ3MuZm9ybWF0dGluZ1ZhbHVlcykge1xuICAgICAgdmFyIGRlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCB8fCBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBkZWZhdWx0V2lkdGg7XG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1t3aWR0aF0gfHwgYXJncy5mb3JtYXR0aW5nVmFsdWVzW2RlZmF1bHRXaWR0aF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhciBfd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy52YWx1ZXNbX3dpZHRoXSB8fCBhcmdzLnZhbHVlc1tfZGVmYXVsdFdpZHRoXTtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXggPSBhcmdzLmFyZ3VtZW50Q2FsbGJhY2sgPyBhcmdzLmFyZ3VtZW50Q2FsbGJhY2soZGlydHlJbmRleCkgOiBkaXJ0eUluZGV4OyAvLyBAdHMtaWdub3JlOiBGb3Igc29tZSByZWFzb24gVHlwZVNjcmlwdCBqdXN0IGRvbid0IHdhbnQgdG8gbWF0Y2ggaXQsIG5vIG1hdHRlciBob3cgaGFyZCB3ZSB0cnkuIEkgY2hhbGxlbmdlIHlvdSB0byB0cnkgdG8gcmVtb3ZlIGl0IVxuXG4gICAgcmV0dXJuIHZhbHVlc0FycmF5W2luZGV4XTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBidWlsZE1hdGNoRm47XG5cbmZ1bmN0aW9uIGJ1aWxkTWF0Y2hGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGg7XG4gICAgdmFyIG1hdGNoUGF0dGVybiA9IHdpZHRoICYmIGFyZ3MubWF0Y2hQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5tYXRjaFBhdHRlcm5zW2FyZ3MuZGVmYXVsdE1hdGNoV2lkdGhdO1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChtYXRjaFBhdHRlcm4pO1xuXG4gICAgaWYgKCFtYXRjaFJlc3VsdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VQYXR0ZXJucyA9IHdpZHRoICYmIGFyZ3MucGFyc2VQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5wYXJzZVBhdHRlcm5zW2FyZ3MuZGVmYXVsdFBhcnNlV2lkdGhdO1xuICAgIHZhciBrZXkgPSBBcnJheS5pc0FycmF5KHBhcnNlUGF0dGVybnMpID8gZmluZEluZGV4KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpO1xuICAgIH0pIDogZmluZEtleShwYXJzZVBhdHRlcm5zLCBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICB9KTtcbiAgICB2YXIgdmFsdWU7XG4gICAgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2soa2V5KSA6IGtleTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YXIgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHJlc3RcbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KGtleSkgJiYgcHJlZGljYXRlKG9iamVjdFtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgPSAwOyBrZXkgPCBhcnJheS5sZW5ndGg7IGtleSsrKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGJ1aWxkTWF0Y2hQYXR0ZXJuRm47XG5cbmZ1bmN0aW9uIGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5tYXRjaFBhdHRlcm4pO1xuICAgIGlmICghbWF0Y2hSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtYXRjaGVkU3RyaW5nID0gbWF0Y2hSZXN1bHRbMF07XG4gICAgdmFyIHBhcnNlUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MucGFyc2VQYXR0ZXJuKTtcbiAgICBpZiAoIXBhcnNlUmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2socGFyc2VSZXN1bHRbMF0pIDogcGFyc2VSZXN1bHRbMF07XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2sgPyBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG4gICAgdmFyIHJlc3QgPSBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiByZXN0XG4gICAgfTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgZm9ybWF0RGlzdGFuY2VMb2NhbGUgPSB7XG4gIGxlc3NUaGFuWFNlY29uZHM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBzZWNvbmQnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBzZWNvbmRzJ1xuICB9LFxuICB4U2Vjb25kczoge1xuICAgIG9uZTogJzEgc2Vjb25kJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBzZWNvbmRzJ1xuICB9LFxuICBoYWxmQU1pbnV0ZTogJ2hhbGYgYSBtaW51dGUnLFxuICBsZXNzVGhhblhNaW51dGVzOiB7XG4gICAgb25lOiAnbGVzcyB0aGFuIGEgbWludXRlJyxcbiAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gbWludXRlcydcbiAgfSxcbiAgeE1pbnV0ZXM6IHtcbiAgICBvbmU6ICcxIG1pbnV0ZScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbWludXRlcydcbiAgfSxcbiAgYWJvdXRYSG91cnM6IHtcbiAgICBvbmU6ICdhYm91dCAxIGhvdXInLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IGhvdXJzJ1xuICB9LFxuICB4SG91cnM6IHtcbiAgICBvbmU6ICcxIGhvdXInLFxuICAgIG90aGVyOiAne3tjb3VudH19IGhvdXJzJ1xuICB9LFxuICB4RGF5czoge1xuICAgIG9uZTogJzEgZGF5JyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBkYXlzJ1xuICB9LFxuICBhYm91dFhXZWVrczoge1xuICAgIG9uZTogJ2Fib3V0IDEgd2VlaycsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gd2Vla3MnXG4gIH0sXG4gIHhXZWVrczoge1xuICAgIG9uZTogJzEgd2VlaycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gd2Vla3MnXG4gIH0sXG4gIGFib3V0WE1vbnRoczoge1xuICAgIG9uZTogJ2Fib3V0IDEgbW9udGgnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IG1vbnRocydcbiAgfSxcbiAgeE1vbnRoczoge1xuICAgIG9uZTogJzEgbW9udGgnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1vbnRocydcbiAgfSxcbiAgYWJvdXRYWWVhcnM6IHtcbiAgICBvbmU6ICdhYm91dCAxIHllYXInLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICB4WWVhcnM6IHtcbiAgICBvbmU6ICcxIHllYXInLFxuICAgIG90aGVyOiAne3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBvdmVyWFllYXJzOiB7XG4gICAgb25lOiAnb3ZlciAxIHllYXInLFxuICAgIG90aGVyOiAnb3ZlciB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIGFsbW9zdFhZZWFyczoge1xuICAgIG9uZTogJ2FsbW9zdCAxIHllYXInLFxuICAgIG90aGVyOiAnYWxtb3N0IHt7Y291bnR9fSB5ZWFycydcbiAgfVxufTtcblxudmFyIGZvcm1hdERpc3RhbmNlID0gZnVuY3Rpb24gKHRva2VuLCBjb3VudCwgb3B0aW9ucykge1xuICB2YXIgcmVzdWx0O1xuICB2YXIgdG9rZW5WYWx1ZSA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXTtcblxuICBpZiAodHlwZW9mIHRva2VuVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZTtcbiAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWUub25lO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWUub3RoZXIucmVwbGFjZSgne3tjb3VudH19JywgY291bnQudG9TdHJpbmcoKSk7XG4gIH1cblxuICBpZiAob3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uICYmIG9wdGlvbnMuY29tcGFyaXNvbiA+IDApIHtcbiAgICAgIHJldHVybiAnaW4gJyArIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlc3VsdCArICcgYWdvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyIF9kZWZhdWx0ID0gZm9ybWF0RGlzdGFuY2U7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0VFRUUsIE1NTU0gZG8sIHknLFxuICBsb25nOiAnTU1NTSBkbywgeScsXG4gIG1lZGl1bTogJ01NTSBkLCB5JyxcbiAgc2hvcnQ6ICdNTS9kZC95eXl5J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ2g6bW06c3MgYSB6enp6JyxcbiAgbG9uZzogJ2g6bW06c3MgYSB6JyxcbiAgbWVkaXVtOiAnaDptbTpzcyBhJyxcbiAgc2hvcnQ6ICdoOm1tIGEnXG59O1xudmFyIGRhdGVUaW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogKDAsIF9pbmRleC5kZWZhdWx0KSh7XG4gICAgZm9ybWF0czogZGF0ZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIHRpbWU6ICgwLCBfaW5kZXguZGVmYXVsdCkoe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogKDAsIF9pbmRleC5kZWZhdWx0KSh7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xudmFyIF9kZWZhdWx0ID0gZm9ybWF0TG9uZztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiBcIidsYXN0JyBlZWVlICdhdCcgcFwiLFxuICB5ZXN0ZXJkYXk6IFwiJ3llc3RlcmRheSBhdCcgcFwiLFxuICB0b2RheTogXCIndG9kYXkgYXQnIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ3RvbW9ycm93IGF0JyBwXCIsXG4gIG5leHRXZWVrOiBcImVlZWUgJ2F0JyBwXCIsXG4gIG90aGVyOiAnUCdcbn07XG5cbnZhciBmb3JtYXRSZWxhdGl2ZSA9IGZ1bmN0aW9uICh0b2tlbiwgX2RhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpIHtcbiAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcbn07XG5cbnZhciBfZGVmYXVsdCA9IGZvcm1hdFJlbGF0aXZlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0InLCAnQSddLFxuICBhYmJyZXZpYXRlZDogWydCQycsICdBRCddLFxuICB3aWRlOiBbJ0JlZm9yZSBDaHJpc3QnLCAnQW5ubyBEb21pbmknXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydRMScsICdRMicsICdRMycsICdRNCddLFxuICB3aWRlOiBbJzFzdCBxdWFydGVyJywgJzJuZCBxdWFydGVyJywgJzNyZCBxdWFydGVyJywgJzR0aCBxdWFydGVyJ11cbn07IC8vIE5vdGU6IGluIEVuZ2xpc2gsIHRoZSBuYW1lcyBvZiBkYXlzIG9mIHRoZSB3ZWVrIGFuZCBtb250aHMgYXJlIGNhcGl0YWxpemVkLlxuLy8gSWYgeW91IGFyZSBtYWtpbmcgYSBuZXcgbG9jYWxlIGJhc2VkIG9uIHRoaXMgb25lLCBjaGVjayBpZiB0aGUgc2FtZSBpcyB0cnVlIGZvciB0aGUgbGFuZ3VhZ2UgeW91J3JlIHdvcmtpbmcgb24uXG4vLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbi8vIGUuZy4gaW4gU3BhbmlzaCBsYW5ndWFnZSB0aGUgd2Vla2RheXMgYW5kIG1vbnRocyBzaG91bGQgYmUgaW4gdGhlIGxvd2VyY2FzZS5cblxudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdBJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgd2lkZTogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnUycsICdNJywgJ1QnLCAnVycsICdUJywgJ0YnLCAnUyddLFxuICBzaG9ydDogWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICBhYmJyZXZpYXRlZDogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgd2lkZTogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfVxufTtcblxudmFyIG9yZGluYWxOdW1iZXIgPSBmdW5jdGlvbiAoZGlydHlOdW1iZXIsIF9vcHRpb25zKSB7XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpOyAvLyBJZiBvcmRpbmFsIG51bWJlcnMgZGVwZW5kIG9uIGNvbnRleHQsIGZvciBleGFtcGxlLFxuICAvLyBpZiB0aGV5IGFyZSBkaWZmZXJlbnQgZm9yIGRpZmZlcmVudCBncmFtbWF0aWNhbCBnZW5kZXJzLFxuICAvLyB1c2UgYG9wdGlvbnMudW5pdGAuXG4gIC8vXG4gIC8vIGB1bml0YCBjYW4gYmUgJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RhdGUnLCAnZGF5T2ZZZWFyJyxcbiAgLy8gJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLlxuXG4gIHZhciByZW0xMDAgPSBudW1iZXIgJSAxMDA7XG5cbiAgaWYgKHJlbTEwMCA+IDIwIHx8IHJlbTEwMCA8IDEwKSB7XG4gICAgc3dpdGNoIChyZW0xMDAgJSAxMCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3N0JztcblxuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ25kJztcblxuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3JkJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVtYmVyICsgJ3RoJztcbn07XG5cbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiAoMCwgX2luZGV4LmRlZmF1bHQpKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgcXVhcnRlcjogKDAsIF9pbmRleC5kZWZhdWx0KSh7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IGZ1bmN0aW9uIChxdWFydGVyKSB7XG4gICAgICByZXR1cm4gcXVhcnRlciAtIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6ICgwLCBfaW5kZXguZGVmYXVsdCkoe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogKDAsIF9pbmRleC5kZWZhdWx0KSh7XG4gICAgdmFsdWVzOiBkYXlWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheVBlcmlvZDogKDAsIF9pbmRleC5kZWZhdWx0KSh7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG52YXIgX2RlZmF1bHQgPSBsb2NhbGl6ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXihcXGQrKSh0aHxzdHxuZHxyZCk/L2k7XG52YXIgcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9cXGQrL2k7XG52YXIgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihifGEpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihiXFwuP1xccz9jXFwuP3xiXFwuP1xccz9jXFwuP1xccz9lXFwuP3xhXFwuP1xccz9kXFwuP3xjXFwuP1xccz9lXFwuPykvaSxcbiAgd2lkZTogL14oYmVmb3JlIGNocmlzdHxiZWZvcmUgY29tbW9uIGVyYXxhbm5vIGRvbWluaXxjb21tb24gZXJhKS9pXG59O1xudmFyIHBhcnNlRXJhUGF0dGVybnMgPSB7XG4gIGFueTogWy9eYi9pLCAvXihhfGMpL2ldXG59O1xudmFyIG1hdGNoUXVhcnRlclBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eWzEyMzRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXnFbMTIzNF0vaSxcbiAgd2lkZTogL15bMTIzNF0odGh8c3R8bmR8cmQpPyBxdWFydGVyL2lcbn07XG52YXIgcGFyc2VRdWFydGVyUGF0dGVybnMgPSB7XG4gIGFueTogWy8xL2ksIC8yL2ksIC8zL2ksIC80L2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltqZm1hc29uZF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGphbnxmZWJ8bWFyfGFwcnxtYXl8anVufGp1bHxhdWd8c2VwfG9jdHxub3Z8ZGVjKS9pLFxuICB3aWRlOiAvXihqYW51YXJ5fGZlYnJ1YXJ5fG1hcmNofGFwcmlsfG1heXxqdW5lfGp1bHl8YXVndXN0fHNlcHRlbWJlcnxvY3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15qL2ksIC9eZi9pLCAvXm0vaSwgL15hL2ksIC9ebS9pLCAvXmovaSwgL15qL2ksIC9eYS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV0sXG4gIGFueTogWy9eamEvaSwgL15mL2ksIC9ebWFyL2ksIC9eYXAvaSwgL15tYXkvaSwgL15qdW4vaSwgL15qdWwvaSwgL15hdS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV1cbn07XG52YXIgbWF0Y2hEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltzbXR3Zl0vaSxcbiAgc2hvcnQ6IC9eKHN1fG1vfHR1fHdlfHRofGZyfHNhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oc3VufG1vbnx0dWV8d2VkfHRodXxmcml8c2F0KS9pLFxuICB3aWRlOiAvXihzdW5kYXl8bW9uZGF5fHR1ZXNkYXl8d2VkbmVzZGF5fHRodXJzZGF5fGZyaWRheXxzYXR1cmRheSkvaVxufTtcbnZhciBwYXJzZURheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXnMvaSwgL15tL2ksIC9edC9pLCAvXncvaSwgL150L2ksIC9eZi9pLCAvXnMvaV0sXG4gIGFueTogWy9ec3UvaSwgL15tL2ksIC9edHUvaSwgL153L2ksIC9edGgvaSwgL15mL2ksIC9ec2EvaV1cbn07XG52YXIgbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihhfHB8bWl8bnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2ksXG4gIGFueTogL14oW2FwXVxcLj9cXHM/bVxcLj98bWlkbmlnaHR8bm9vbnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2lcbn07XG52YXIgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9eYS9pLFxuICAgIHBtOiAvXnAvaSxcbiAgICBtaWRuaWdodDogL15taS9pLFxuICAgIG5vb246IC9ebm8vaSxcbiAgICBtb3JuaW5nOiAvbW9ybmluZy9pLFxuICAgIGFmdGVybm9vbjogL2FmdGVybm9vbi9pLFxuICAgIGV2ZW5pbmc6IC9ldmVuaW5nL2ksXG4gICAgbmlnaHQ6IC9uaWdodC9pXG4gIH1cbn07XG52YXIgbWF0Y2ggPSB7XG4gIG9yZGluYWxOdW1iZXI6ICgwLCBfaW5kZXgyLmRlZmF1bHQpKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9KSxcbiAgZXJhOiAoMCwgX2luZGV4LmRlZmF1bHQpKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6ICgwLCBfaW5kZXguZGVmYXVsdCkoe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogKDAsIF9pbmRleC5kZWZhdWx0KSh7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiAoMCwgX2luZGV4LmRlZmF1bHQpKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogKDAsIF9pbmRleC5kZWZhdWx0KSh7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ2FueScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSlcbn07XG52YXIgX2RlZmF1bHQgPSBtYXRjaDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4NCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg1ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9fbGliL21hdGNoL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IEVuZ2xpc2ggbG9jYWxlIChVbml0ZWQgU3RhdGVzKS5cbiAqIEBsYW5ndWFnZSBFbmdsaXNoXG4gKiBAaXNvLTYzOS0yIGVuZ1xuICogQGF1dGhvciBTYXNoYSBLb3NzIFtAa29zc25vY29ycF17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2tvc3Nub2NvcnB9XG4gKiBAYXV0aG9yIExlc2hhIEtvc3MgW0BsZXNoYWtvc3Nde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9sZXNoYWtvc3N9XG4gKi9cbnZhciBsb2NhbGUgPSB7XG4gIGNvZGU6ICdlbi1VUycsXG4gIGZvcm1hdERpc3RhbmNlOiBfaW5kZXguZGVmYXVsdCxcbiAgZm9ybWF0TG9uZzogX2luZGV4Mi5kZWZhdWx0LFxuICBmb3JtYXRSZWxhdGl2ZTogX2luZGV4My5kZWZhdWx0LFxuICBsb2NhbGl6ZTogX2luZGV4NC5kZWZhdWx0LFxuICBtYXRjaDogX2luZGV4NS5kZWZhdWx0LFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAwXG4gICAgLyogU3VuZGF5ICovXG4gICAgLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogMVxuICB9XG59O1xudmFyIF9kZWZhdWx0ID0gbG9jYWxlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHN1Yk1pbGxpc2Vjb25kcztcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9hZGRNaWxsaXNlY29uZHMvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSBzdWJNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBiZSBzdWJ0cmFjdGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBzdWJ0cmFjdGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFN1YnRyYWN0IDc1MCBtaWxsaXNlY29uZHMgZnJvbSAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogY29uc3QgcmVzdWx0ID0gc3ViTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MjkuMjUwXG4gKi9cbmZ1bmN0aW9uIHN1Yk1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gICgwLCBfaW5kZXgzLmRlZmF1bHQpKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBhbW91bnQgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuICgwLCBfaW5kZXgyLmRlZmF1bHQpKGRpcnR5RGF0ZSwgLWFtb3VudCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdG9EYXRlO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIHRvRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgaXRzIGNsb25lLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhIG51bWJlciwgaXQgaXMgdHJlYXRlZCBhcyBhIHRpbWVzdGFtcC5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgbm9uZSBvZiB0aGUgYWJvdmUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIEludmFsaWQgRGF0ZS5cbiAqXG4gKiAqKk5vdGUqKjogKmFsbCogRGF0ZSBhcmd1bWVudHMgcGFzc2VkIHRvIGFueSAqZGF0ZS1mbnMqIGZ1bmN0aW9uIGlzIHByb2Nlc3NlZCBieSBgdG9EYXRlYC5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBhcmd1bWVudCAtIHRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDbG9uZSB0aGUgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZShuZXcgRGF0ZSgyMDE0LCAxLCAxMSwgMTEsIDMwLCAzMCkpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHRoZSB0aW1lc3RhbXAgdG8gZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZSgxMzkyMDk4NDMwMDAwKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqL1xuZnVuY3Rpb24gdG9EYXRlKGFyZ3VtZW50KSB7XG4gICgwLCBfaW5kZXguZGVmYXVsdCkoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGFyZ1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCk7IC8vIENsb25lIHRoZSBkYXRlXG5cbiAgaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZSB8fCB0eXBlb2YgYXJndW1lbnQgPT09ICdvYmplY3QnICYmIGFyZ1N0ciA9PT0gJ1tvYmplY3QgRGF0ZV0nKSB7XG4gICAgLy8gUHJldmVudCB0aGUgZGF0ZSB0byBsb3NlIHRoZSBtaWxsaXNlY29uZHMgd2hlbiBwYXNzZWQgdG8gbmV3IERhdGUoKSBpbiBJRTEwXG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50LmdldFRpbWUoKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnbnVtYmVyJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IE51bWJlcl0nKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoKHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N0cmluZycgfHwgYXJnU3RyID09PSAnW29iamVjdCBTdHJpbmddJykgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFwiU3RhcnRpbmcgd2l0aCB2Mi4wLjAtYmV0YS4xIGRhdGUtZm5zIGRvZXNuJ3QgYWNjZXB0IHN0cmluZ3MgYXMgZGF0ZSBhcmd1bWVudHMuIFBsZWFzZSB1c2UgYHBhcnNlSVNPYCB0byBwYXJzZSBzdHJpbmdzLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2ZqdWxlXCIpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuXG4gICAgICBjb25zb2xlLndhcm4obmV3IEVycm9yKCkuc3RhY2spO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IG5ld0RhdGVVVEM7XG5cbi8qKlxuICogVXNlIGluc3RlYWQgb2YgYG5ldyBEYXRlKERhdGUuVVRDKC4uLikpYCB0byBzdXBwb3J0IHllYXJzIGJlbG93IDEwMCB3aGljaCBkb2Vzbid0IHdvcmtcbiAqIG90aGVyd2lzZSBkdWUgdG8gdGhlIG5hdHVyZSBvZiB0aGVcbiAqIFtgRGF0ZWAgY29uc3RydWN0b3JdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0RhdGUjaW50ZXJwcmV0YXRpb25fb2ZfdHdvLWRpZ2l0X3llYXJzLlxuICpcbiAqIEZvciBgRGF0ZS5VVEMoLi4uKWAsIHVzZSBgbmV3RGF0ZVVUQyguLi4pLmdldFRpbWUoKWAuXG4gKi9cbmZ1bmN0aW9uIG5ld0RhdGVVVEMoZnVsbFllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZCkge1xuICB2YXIgdXRjRGF0ZSA9IG5ldyBEYXRlKDApO1xuICB1dGNEYXRlLnNldFVUQ0Z1bGxZZWFyKGZ1bGxZZWFyLCBtb250aCwgZGF5KTtcbiAgdXRjRGF0ZS5zZXRVVENIb3Vycyhob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQpO1xuICByZXR1cm4gdXRjRGF0ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0ekludGxUaW1lWm9uZU5hbWU7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZm9ybWF0dGVkIHRpbWUgem9uZSBuYW1lIG9mIHRoZSBwcm92aWRlZCBgdGltZVpvbmVgIG9yIHRoZSBjdXJyZW50XG4gKiBzeXN0ZW0gdGltZSB6b25lIGlmIG9taXR0ZWQsIGFjY291bnRpbmcgZm9yIERTVCBhY2NvcmRpbmcgdG8gdGhlIFVUQyB2YWx1ZSBvZlxuICogdGhlIGRhdGUuXG4gKi9cbmZ1bmN0aW9uIHR6SW50bFRpbWVab25lTmFtZShsZW5ndGgsIGRhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIGR0ZiA9IGdldERURihsZW5ndGgsIG9wdGlvbnMudGltZVpvbmUsIG9wdGlvbnMubG9jYWxlKTtcbiAgcmV0dXJuIGR0Zi5mb3JtYXRUb1BhcnRzID8gcGFydHNUaW1lWm9uZShkdGYsIGRhdGUpIDogaGFja3lUaW1lWm9uZShkdGYsIGRhdGUpO1xufVxuXG5mdW5jdGlvbiBwYXJ0c1RpbWVab25lKGR0ZiwgZGF0ZSkge1xuICB2YXIgZm9ybWF0dGVkID0gZHRmLmZvcm1hdFRvUGFydHMoZGF0ZSk7XG4gIHJldHVybiBmb3JtYXR0ZWRbZm9ybWF0dGVkLmxlbmd0aCAtIDFdLnZhbHVlO1xufVxuXG5mdW5jdGlvbiBoYWNreVRpbWVab25lKGR0ZiwgZGF0ZSkge1xuICB2YXIgZm9ybWF0dGVkID0gZHRmLmZvcm1hdChkYXRlKS5yZXBsYWNlKC9cXHUyMDBFL2csICcnKTtcbiAgdmFyIHR6TmFtZU1hdGNoID0gLyBbXFx3LSsgXSskLy5leGVjKGZvcm1hdHRlZCk7XG4gIHJldHVybiB0ek5hbWVNYXRjaCA/IHR6TmFtZU1hdGNoWzBdLnN1YnN0cigxKSA6ICcnO1xufSAvLyBJZiBhIGxvY2FsZSBoYXMgYmVlbiBwcm92aWRlZCBgZW4tVVNgIGlzIHVzZWQgYXMgYSBmYWxsYmFjayBpbiBjYXNlIGl0IGlzIGFuXG4vLyBpbnZhbGlkIGxvY2FsZSwgb3RoZXJ3aXNlIHRoZSBsb2NhbGUgaXMgbGVmdCB1bmRlZmluZWQgdG8gdXNlIHRoZSBzeXN0ZW0gbG9jYWxlLlxuXG5cbmZ1bmN0aW9uIGdldERURihsZW5ndGgsIHRpbWVab25lLCBsb2NhbGUpIHtcbiAgaWYgKGxvY2FsZSAmJiAhbG9jYWxlLmNvZGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJkYXRlLWZucy10eiBlcnJvcjogUGxlYXNlIHNldCBhIGxhbmd1YWdlIGNvZGUgb24gdGhlIGxvY2FsZSBvYmplY3QgaW1wb3J0ZWQgZnJvbSBkYXRlLWZucywgZS5nLiBgbG9jYWxlLmNvZGUgPSAnZW4tVVMnYFwiKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUgPyBbbG9jYWxlLmNvZGUsICdlbi1VUyddIDogdW5kZWZpbmVkLCB7XG4gICAgdGltZVpvbmU6IHRpbWVab25lLFxuICAgIHRpbWVab25lTmFtZTogbGVuZ3RoXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHR6UGFyc2VUaW1lem9uZTtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3R6VG9rZW5pemVEYXRlL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9uZXdEYXRlVVRDL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIE1JTExJU0VDT05EU19JTl9IT1VSID0gMzYwMDAwMDtcbnZhciBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFID0gNjAwMDA7XG52YXIgcGF0dGVybnMgPSB7XG4gIHRpbWV6b25lOiAvKFtaKy1dLiopJC8sXG4gIHRpbWV6b25lWjogL14oWikkLyxcbiAgdGltZXpvbmVISDogL14oWystXVxcZHsyfSkkLyxcbiAgdGltZXpvbmVISE1NOiAvXihbKy1dXFxkezJ9KTo/KFxcZHsyfSkkL1xufTsgLy8gUGFyc2UgdmFyaW91cyB0aW1lIHpvbmUgb2Zmc2V0IGZvcm1hdHMgdG8gYW4gb2Zmc2V0IGluIG1pbGxpc2Vjb25kc1xuXG5mdW5jdGlvbiB0elBhcnNlVGltZXpvbmUodGltZXpvbmVTdHJpbmcsIGRhdGUsIGlzVXRjRGF0ZSkge1xuICB2YXIgdG9rZW47XG4gIHZhciBhYnNvbHV0ZU9mZnNldDsgLy8gRW1wdHkgc3RyaW5nXG5cbiAgaWYgKHRpbWV6b25lU3RyaW5nID09PSAnJykge1xuICAgIHJldHVybiAwO1xuICB9IC8vIFpcblxuXG4gIHRva2VuID0gcGF0dGVybnMudGltZXpvbmVaLmV4ZWModGltZXpvbmVTdHJpbmcpO1xuXG4gIGlmICh0b2tlbikge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgdmFyIGhvdXJzOyAvLyDCsWhoXG5cbiAgdG9rZW4gPSBwYXR0ZXJucy50aW1lem9uZUhILmV4ZWModGltZXpvbmVTdHJpbmcpO1xuXG4gIGlmICh0b2tlbikge1xuICAgIGhvdXJzID0gcGFyc2VJbnQodG9rZW5bMV0sIDEwKTtcblxuICAgIGlmICghdmFsaWRhdGVUaW1lem9uZShob3VycykpIHtcbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuXG4gICAgcmV0dXJuIC0oaG91cnMgKiBNSUxMSVNFQ09ORFNfSU5fSE9VUik7XG4gIH0gLy8gwrFoaDptbSBvciDCsWhobW1cblxuXG4gIHRva2VuID0gcGF0dGVybnMudGltZXpvbmVISE1NLmV4ZWModGltZXpvbmVTdHJpbmcpO1xuXG4gIGlmICh0b2tlbikge1xuICAgIGhvdXJzID0gcGFyc2VJbnQodG9rZW5bMV0sIDEwKTtcbiAgICB2YXIgbWludXRlcyA9IHBhcnNlSW50KHRva2VuWzJdLCAxMCk7XG5cbiAgICBpZiAoIXZhbGlkYXRlVGltZXpvbmUoaG91cnMsIG1pbnV0ZXMpKSB7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cblxuICAgIGFic29sdXRlT2Zmc2V0ID0gTWF0aC5hYnMoaG91cnMpICogTUlMTElTRUNPTkRTX0lOX0hPVVIgKyBtaW51dGVzICogTUlMTElTRUNPTkRTX0lOX01JTlVURTtcbiAgICByZXR1cm4gaG91cnMgPiAwID8gLWFic29sdXRlT2Zmc2V0IDogYWJzb2x1dGVPZmZzZXQ7XG4gIH0gLy8gSUFOQSB0aW1lIHpvbmVcblxuXG4gIGlmIChpc1ZhbGlkVGltZXpvbmVJQU5BU3RyaW5nKHRpbWV6b25lU3RyaW5nKSkge1xuICAgIGRhdGUgPSBuZXcgRGF0ZShkYXRlIHx8IERhdGUubm93KCkpO1xuICAgIHZhciB1dGNEYXRlID0gaXNVdGNEYXRlID8gZGF0ZSA6IHRvVXRjRGF0ZShkYXRlKTtcbiAgICB2YXIgb2Zmc2V0ID0gY2FsY09mZnNldCh1dGNEYXRlLCB0aW1lem9uZVN0cmluZyk7XG4gICAgdmFyIGZpeGVkT2Zmc2V0ID0gaXNVdGNEYXRlID8gb2Zmc2V0IDogZml4T2Zmc2V0KGRhdGUsIG9mZnNldCwgdGltZXpvbmVTdHJpbmcpO1xuICAgIHJldHVybiAtZml4ZWRPZmZzZXQ7XG4gIH1cblxuICByZXR1cm4gTmFOO1xufVxuXG5mdW5jdGlvbiB0b1V0Y0RhdGUoZGF0ZSkge1xuICByZXR1cm4gKDAsIF9pbmRleDIuZGVmYXVsdCkoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpLCBkYXRlLmdldEhvdXJzKCksIGRhdGUuZ2V0TWludXRlcygpLCBkYXRlLmdldFNlY29uZHMoKSwgZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSk7XG59XG5cbmZ1bmN0aW9uIGNhbGNPZmZzZXQoZGF0ZSwgdGltZXpvbmVTdHJpbmcpIHtcbiAgdmFyIHRva2VucyA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGF0ZSwgdGltZXpvbmVTdHJpbmcpOyAvLyBtcyBkcm9wcGVkIGJlY2F1c2UgaXQncyBub3QgcHJvdmlkZWQgYnkgdHpUb2tlbml6ZURhdGVcblxuICB2YXIgYXNVVEMgPSAoMCwgX2luZGV4Mi5kZWZhdWx0KSh0b2tlbnNbMF0sIHRva2Vuc1sxXSAtIDEsIHRva2Vuc1syXSwgdG9rZW5zWzNdICUgMjQsIHRva2Vuc1s0XSwgdG9rZW5zWzVdLCAwKS5nZXRUaW1lKCk7XG4gIHZhciBhc1RTID0gZGF0ZS5nZXRUaW1lKCk7XG4gIHZhciBvdmVyID0gYXNUUyAlIDEwMDA7XG4gIGFzVFMgLT0gb3ZlciA+PSAwID8gb3ZlciA6IDEwMDAgKyBvdmVyO1xuICByZXR1cm4gYXNVVEMgLSBhc1RTO1xufVxuXG5mdW5jdGlvbiBmaXhPZmZzZXQoZGF0ZSwgb2Zmc2V0LCB0aW1lem9uZVN0cmluZykge1xuICB2YXIgbG9jYWxUUyA9IGRhdGUuZ2V0VGltZSgpOyAvLyBPdXIgVVRDIHRpbWUgaXMganVzdCBhIGd1ZXNzIGJlY2F1c2Ugb3VyIG9mZnNldCBpcyBqdXN0IGEgZ3Vlc3NcblxuICB2YXIgdXRjR3Vlc3MgPSBsb2NhbFRTIC0gb2Zmc2V0OyAvLyBUZXN0IHdoZXRoZXIgdGhlIHpvbmUgbWF0Y2hlcyB0aGUgb2Zmc2V0IGZvciB0aGlzIHRzXG5cbiAgdmFyIG8yID0gY2FsY09mZnNldChuZXcgRGF0ZSh1dGNHdWVzcyksIHRpbWV6b25lU3RyaW5nKTsgLy8gSWYgc28sIG9mZnNldCBkaWRuJ3QgY2hhbmdlLCBhbmQgd2UncmUgZG9uZVxuXG4gIGlmIChvZmZzZXQgPT09IG8yKSB7XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfSAvLyBJZiBub3QsIGNoYW5nZSB0aGUgdHMgYnkgdGhlIGRpZmZlcmVuY2UgaW4gdGhlIG9mZnNldFxuXG5cbiAgdXRjR3Vlc3MgLT0gbzIgLSBvZmZzZXQ7IC8vIElmIHRoYXQgZ2l2ZXMgdXMgdGhlIGxvY2FsIHRpbWUgd2Ugd2FudCwgd2UncmUgZG9uZVxuXG4gIHZhciBvMyA9IGNhbGNPZmZzZXQobmV3IERhdGUodXRjR3Vlc3MpLCB0aW1lem9uZVN0cmluZyk7XG5cbiAgaWYgKG8yID09PSBvMykge1xuICAgIHJldHVybiBvMjtcbiAgfSAvLyBJZiBpdCdzIGRpZmZlcmVudCwgd2UncmUgaW4gYSBob2xlIHRpbWUuIFRoZSBvZmZzZXQgaGFzIGNoYW5nZWQsIGJ1dCB3ZSBkb24ndCBhZGp1c3QgdGhlIHRpbWVcblxuXG4gIHJldHVybiBNYXRoLm1heChvMiwgbzMpO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVRpbWV6b25lKGhvdXJzLCBtaW51dGVzKSB7XG4gIHJldHVybiAtMjMgPD0gaG91cnMgJiYgaG91cnMgPD0gMjMgJiYgKG1pbnV0ZXMgPT0gbnVsbCB8fCAwIDw9IG1pbnV0ZXMgJiYgbWludXRlcyA8PSA1OSk7XG59XG5cbnZhciB2YWxpZElBTkFUaW1lem9uZUNhY2hlID0ge307XG5cbmZ1bmN0aW9uIGlzVmFsaWRUaW1lem9uZUlBTkFTdHJpbmcodGltZVpvbmVTdHJpbmcpIHtcbiAgaWYgKHZhbGlkSUFOQVRpbWV6b25lQ2FjaGVbdGltZVpvbmVTdHJpbmddKSByZXR1cm4gdHJ1ZTtcblxuICB0cnkge1xuICAgIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KHVuZGVmaW5lZCwge1xuICAgICAgdGltZVpvbmU6IHRpbWVab25lU3RyaW5nXG4gICAgfSk7XG4gICAgdmFsaWRJQU5BVGltZXpvbmVDYWNoZVt0aW1lWm9uZVN0cmluZ10gPSB0cnVlO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuLyoqIFJlZ2V4IHRvIGlkZW50aWZ5IHRoZSBwcmVzZW5jZSBvZiBhIHRpbWUgem9uZSBzcGVjaWZpZXIgaW4gYSBkYXRlIHN0cmluZyAqL1xudmFyIHR6UGF0dGVybiA9IC8oWnxbKy1dXFxkezJ9KD86Oj9cXGR7Mn0pP3wgVVRDfCBbYS16QS1aXStcXC9bYS16QS1aX10rKD86XFwvW2EtekEtWl9dKyk/KSQvO1xudmFyIF9kZWZhdWx0ID0gdHpQYXR0ZXJuO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHR6VG9rZW5pemVEYXRlO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIFt5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZHNdIHRva2VucyBvZiB0aGUgcHJvdmlkZWRcbiAqIGBkYXRlYCBhcyBpdCB3aWxsIGJlIHJlbmRlcmVkIGluIHRoZSBgdGltZVpvbmVgLlxuICovXG5mdW5jdGlvbiB0elRva2VuaXplRGF0ZShkYXRlLCB0aW1lWm9uZSkge1xuICB2YXIgZHRmID0gZ2V0RGF0ZVRpbWVGb3JtYXQodGltZVpvbmUpO1xuICByZXR1cm4gZHRmLmZvcm1hdFRvUGFydHMgPyBwYXJ0c09mZnNldChkdGYsIGRhdGUpIDogaGFja3lPZmZzZXQoZHRmLCBkYXRlKTtcbn1cblxudmFyIHR5cGVUb1BvcyA9IHtcbiAgeWVhcjogMCxcbiAgbW9udGg6IDEsXG4gIGRheTogMixcbiAgaG91cjogMyxcbiAgbWludXRlOiA0LFxuICBzZWNvbmQ6IDVcbn07XG5cbmZ1bmN0aW9uIHBhcnRzT2Zmc2V0KGR0ZiwgZGF0ZSkge1xuICB0cnkge1xuICAgIHZhciBmb3JtYXR0ZWQgPSBkdGYuZm9ybWF0VG9QYXJ0cyhkYXRlKTtcbiAgICB2YXIgZmlsbGVkID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZvcm1hdHRlZC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHBvcyA9IHR5cGVUb1Bvc1tmb3JtYXR0ZWRbaV0udHlwZV07XG5cbiAgICAgIGlmIChwb3MgPj0gMCkge1xuICAgICAgICBmaWxsZWRbcG9zXSA9IHBhcnNlSW50KGZvcm1hdHRlZFtpXS52YWx1ZSwgMTApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmaWxsZWQ7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgUmFuZ2VFcnJvcikge1xuICAgICAgcmV0dXJuIFtOYU5dO1xuICAgIH1cblxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhY2t5T2Zmc2V0KGR0ZiwgZGF0ZSkge1xuICB2YXIgZm9ybWF0dGVkID0gZHRmLmZvcm1hdChkYXRlKS5yZXBsYWNlKC9cXHUyMDBFL2csICcnKTtcbiAgdmFyIHBhcnNlZCA9IC8oXFxkKylcXC8oXFxkKylcXC8oXFxkKyksPyAoXFxkKyk6KFxcZCspOihcXGQrKS8uZXhlYyhmb3JtYXR0ZWQpOyAvLyB2YXIgWywgZk1vbnRoLCBmRGF5LCBmWWVhciwgZkhvdXIsIGZNaW51dGUsIGZTZWNvbmRdID0gcGFyc2VkXG4gIC8vIHJldHVybiBbZlllYXIsIGZNb250aCwgZkRheSwgZkhvdXIsIGZNaW51dGUsIGZTZWNvbmRdXG5cbiAgcmV0dXJuIFtwYXJzZWRbM10sIHBhcnNlZFsxXSwgcGFyc2VkWzJdLCBwYXJzZWRbNF0sIHBhcnNlZFs1XSwgcGFyc2VkWzZdXTtcbn0gLy8gR2V0IGEgY2FjaGVkIEludGwuRGF0ZVRpbWVGb3JtYXQgaW5zdGFuY2UgZm9yIHRoZSBJQU5BIGB0aW1lWm9uZWAuIFRoaXMgY2FuIGJlIHVzZWRcbi8vIHRvIGdldCBkZXRlcm1pbmlzdGljIGxvY2FsIGRhdGUvdGltZSBvdXRwdXQgYWNjb3JkaW5nIHRvIHRoZSBgZW4tVVNgIGxvY2FsZSB3aGljaFxuLy8gY2FuIGJlIHVzZWQgdG8gZXh0cmFjdCBsb2NhbCB0aW1lIHBhcnRzIGFzIG5lY2Vzc2FyeS5cblxuXG52YXIgZHRmQ2FjaGUgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGF0ZVRpbWVGb3JtYXQodGltZVpvbmUpIHtcbiAgaWYgKCFkdGZDYWNoZVt0aW1lWm9uZV0pIHtcbiAgICAvLyBOZXcgYnJvd3NlcnMgdXNlIGBob3VyQ3ljbGVgLCBJRSBhbmQgQ2hyb21lIDw3MyBkb2VzIG5vdCBzdXBwb3J0IGl0IGFuZCB1c2VzIGBob3VyMTJgXG4gICAgdmFyIHRlc3REYXRlRm9ybWF0dGVkID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoJ2VuLVVTJywge1xuICAgICAgaG91cjEyOiBmYWxzZSxcbiAgICAgIHRpbWVab25lOiAnQW1lcmljYS9OZXdfWW9yaycsXG4gICAgICB5ZWFyOiAnbnVtZXJpYycsXG4gICAgICBtb250aDogJzItZGlnaXQnLFxuICAgICAgZGF5OiAnMi1kaWdpdCcsXG4gICAgICBob3VyOiAnMi1kaWdpdCcsXG4gICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcbiAgICAgIHNlY29uZDogJzItZGlnaXQnXG4gICAgfSkuZm9ybWF0KG5ldyBEYXRlKCcyMDE0LTA2LTI1VDA0OjAwOjAwLjEyM1onKSk7XG4gICAgdmFyIGhvdXJDeWNsZVN1cHBvcnRlZCA9IHRlc3REYXRlRm9ybWF0dGVkID09PSAnMDYvMjUvMjAxNCwgMDA6MDA6MDAnIHx8IHRlc3REYXRlRm9ybWF0dGVkID09PSAn4oCOMDbigI4v4oCOMjXigI4v4oCOMjAxNOKAjiDigI4wMOKAjjrigI4wMOKAjjrigI4wMCc7XG4gICAgZHRmQ2FjaGVbdGltZVpvbmVdID0gaG91ckN5Y2xlU3VwcG9ydGVkID8gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoJ2VuLVVTJywge1xuICAgICAgaG91cjEyOiBmYWxzZSxcbiAgICAgIHRpbWVab25lOiB0aW1lWm9uZSxcbiAgICAgIHllYXI6ICdudW1lcmljJyxcbiAgICAgIG1vbnRoOiAnMi1kaWdpdCcsXG4gICAgICBkYXk6ICcyLWRpZ2l0JyxcbiAgICAgIGhvdXI6ICcyLWRpZ2l0JyxcbiAgICAgIG1pbnV0ZTogJzItZGlnaXQnLFxuICAgICAgc2Vjb25kOiAnMi1kaWdpdCdcbiAgICB9KSA6IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KCdlbi1VUycsIHtcbiAgICAgIGhvdXJDeWNsZTogJ2gyMycsXG4gICAgICB0aW1lWm9uZTogdGltZVpvbmUsXG4gICAgICB5ZWFyOiAnbnVtZXJpYycsXG4gICAgICBtb250aDogJzItZGlnaXQnLFxuICAgICAgZGF5OiAnMi1kaWdpdCcsXG4gICAgICBob3VyOiAnMi1kaWdpdCcsXG4gICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcbiAgICAgIHNlY29uZDogJzItZGlnaXQnXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZHRmQ2FjaGVbdGltZVpvbmVdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL19saWIvdHpJbnRsVGltZVpvbmVOYW1lL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9fbGliL3R6UGFyc2VUaW1lem9uZS9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFID0gNjAgKiAxMDAwO1xudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gSWYgb2Zmc2V0IGlzIDAsIG91dHB1dCBpcyBhbHdheXMgYCdaJ2ApXG4gIFg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBnZXRUaW1lWm9uZU9mZnNldChvcHRpb25zLnRpbWVab25lLCBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZSk7XG5cbiAgICBpZiAodGltZXpvbmVPZmZzZXQgPT09IDApIHtcbiAgICAgIHJldHVybiAnWic7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ1gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltZXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYYFxuXG4gICAgICBjYXNlICdYWFhYJzpcbiAgICAgIGNhc2UgJ1hYJzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1ldGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWV0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWFhgXG5cbiAgICAgIGNhc2UgJ1hYWFhYJzpcbiAgICAgIGNhc2UgJ1hYWCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltZXRlclxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYCcrMDA6MDAnYCBvciBlcXVpdmFsZW50KVxuICB4OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gZ2V0VGltZVpvbmVPZmZzZXQob3B0aW9ucy50aW1lWm9uZSwgb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGUpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ3gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltZXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4YFxuXG4gICAgICBjYXNlICd4eHh4JzpcbiAgICAgIGNhc2UgJ3h4JzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1ldGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWV0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eHhgXG5cbiAgICAgIGNhc2UgJ3h4eHh4JzpcbiAgICAgIGNhc2UgJ3h4eCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltZXRlclxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoR01UKVxuICBPOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gZ2V0VGltZVpvbmVPZmZzZXQob3B0aW9ucy50aW1lWm9uZSwgb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGUpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gU2hvcnRcbiAgICAgIGNhc2UgJ08nOlxuICAgICAgY2FzZSAnT08nOlxuICAgICAgY2FzZSAnT09PJzpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmVTaG9ydCh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICAgIC8vIExvbmdcblxuICAgICAgY2FzZSAnT09PTyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXRpb24pXG4gIHo6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAneic6XG4gICAgICBjYXNlICd6eic6XG4gICAgICBjYXNlICd6enonOlxuICAgICAgICByZXR1cm4gKDAsIF9pbmRleC5kZWZhdWx0KSgnc2hvcnQnLCBvcmlnaW5hbERhdGUsIG9wdGlvbnMpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICd6enp6JzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAoMCwgX2luZGV4LmRlZmF1bHQpKCdsb25nJywgb3JpZ2luYWxEYXRlLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldFRpbWVab25lT2Zmc2V0KHRpbWVab25lLCBvcmlnaW5hbERhdGUpIHtcbiAgdmFyIHRpbWVab25lT2Zmc2V0ID0gdGltZVpvbmUgPyAoMCwgX2luZGV4Mi5kZWZhdWx0KSh0aW1lWm9uZSwgb3JpZ2luYWxEYXRlLCB0cnVlKSAvIE1JTExJU0VDT05EU19JTl9NSU5VVEUgOiBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICBpZiAoTnVtYmVyLmlzTmFOKHRpbWVab25lT2Zmc2V0KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgem9uZSBzcGVjaWZpZWQ6ICcgKyB0aW1lWm9uZSk7XG4gIH1cblxuICByZXR1cm4gdGltZVpvbmVPZmZzZXQ7XG59XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdaZXJvcyhudW1iZXIsIHRhcmdldExlbmd0aCkge1xuICB2YXIgc2lnbiA9IG51bWJlciA8IDAgPyAnLScgOiAnJztcbiAgdmFyIG91dHB1dCA9IE1hdGguYWJzKG51bWJlcikudG9TdHJpbmcoKTtcblxuICB3aGlsZSAob3V0cHV0Lmxlbmd0aCA8IHRhcmdldExlbmd0aCkge1xuICAgIG91dHB1dCA9ICcwJyArIG91dHB1dDtcbiAgfVxuXG4gIHJldHVybiBzaWduICsgb3V0cHV0O1xufVxuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRpcnR5RGVsaW1ldGVyKSB7XG4gIHZhciBkZWxpbWV0ZXIgPSBkaXJ0eURlbGltZXRlciB8fCAnJztcbiAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICB2YXIgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgdmFyIGhvdXJzID0gYWRkTGVhZGluZ1plcm9zKE1hdGguZmxvb3IoYWJzT2Zmc2V0IC8gNjApLCAyKTtcbiAgdmFyIG1pbnV0ZXMgPSBhZGRMZWFkaW5nWmVyb3MoTWF0aC5mbG9vcihhYnNPZmZzZXQgJSA2MCksIDIpO1xuICByZXR1cm4gc2lnbiArIGhvdXJzICsgZGVsaW1ldGVyICsgbWludXRlcztcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKG9mZnNldCwgZGlydHlEZWxpbWV0ZXIpIHtcbiAgaWYgKG9mZnNldCAlIDYwID09PSAwKSB7XG4gICAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICAgIHJldHVybiBzaWduICsgYWRkTGVhZGluZ1plcm9zKE1hdGguYWJzKG9mZnNldCkgLyA2MCwgMik7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltZXRlcik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lU2hvcnQob2Zmc2V0LCBkaXJ0eURlbGltZXRlcikge1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKTtcbiAgdmFyIG1pbnV0ZXMgPSBhYnNPZmZzZXQgJSA2MDtcblxuICBpZiAobWludXRlcyA9PT0gMCkge1xuICAgIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKTtcbiAgfVxuXG4gIHZhciBkZWxpbWV0ZXIgPSBkaXJ0eURlbGltZXRlciB8fCAnJztcbiAgcmV0dXJuIHNpZ24gKyBTdHJpbmcoaG91cnMpICsgZGVsaW1ldGVyICsgYWRkTGVhZGluZ1plcm9zKG1pbnV0ZXMsIDIpO1xufVxuXG52YXIgX2RlZmF1bHQgPSBmb3JtYXR0ZXJzO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGZvcm1hdDtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRhdGUtZm5zL2Zvcm1hdC9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9mb3JtYXR0ZXJzL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgdHpGb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gLyhbeFhPel0rKXwnJ3wnKCcnfFteJ10pKygnfCQpL2c7XG4vKipcbiAqIEBuYW1lIGZvcm1hdFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBGb3JtYXQgdGhlIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZyBpbiB0aGUgZ2l2ZW4gZm9ybWF0LiBUaGUgcmVzdWx0IG1heSB2YXJ5IGJ5IGxvY2FsZS5cbiAqXG4gKiA+IOKaoO+4jyBQbGVhc2Ugbm90ZSB0aGF0IHRoZSBgZm9ybWF0YCB0b2tlbnMgZGlmZmVyIGZyb20gTW9tZW50LmpzIGFuZCBvdGhlciBsaWJyYXJpZXMuXG4gKiA+IFNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqXG4gKiBUaGUgY2hhcmFjdGVycyB3cmFwcGVkIGJldHdlZW4gdHdvIHNpbmdsZSBxdW90ZXMgY2hhcmFjdGVycyAoJykgYXJlIGVzY2FwZWQuXG4gKiBUd28gc2luZ2xlIHF1b3RlcyBpbiBhIHJvdywgd2hldGhlciBpbnNpZGUgb3Igb3V0c2lkZSBhIHF1b3RlZCBzZXF1ZW5jZSwgcmVwcmVzZW50IGEgJ3JlYWwnIHNpbmdsZSBxdW90ZS5cbiAqIChzZWUgdGhlIGxhc3QgZXhhbXBsZSlcbiAqXG4gKiBGb3JtYXQgb2YgdGhlIHN0cmluZyBpcyBiYXNlZCBvbiBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiBodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlXG4gKiB3aXRoIGEgZmV3IGFkZGl0aW9ucyAoc2VlIG5vdGUgNyBiZWxvdyB0aGUgdGFibGUpLlxuICpcbiAqIEFjY2VwdGVkIHBhdHRlcm5zOlxuICogfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUGF0dGVybiB8IFJlc3VsdCBleGFtcGxlcyAgICAgICAgICAgICAgICAgICB8IE5vdGVzIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS18XG4gKiB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHLi5HR0cgIHwgQUQsIEJDICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHRyAgICB8IEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0dHICAgfCBBLCBCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IENhbGVuZGFyIHllYXIgICAgICAgICAgICAgICAgICAgfCB5ICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeW8gICAgICB8IDQ0dGgsIDFzdCwgMHRoLCAxN3RoICAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5ICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXl5ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgfCBZICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWW8gICAgICB8IDQ0dGgsIDFzdCwgMTkwMHRoLCAyMDE3dGggICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVlZICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICAgfCBSICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlIgICAgICB8IC00MywgMDAsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUiAgICAgfCAtMDQzLCAwMDAsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSICAgIHwgLTAwNDMsIDAwMDAsIDAwMDEsIDE5MDAsIDIwMTcgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUlIgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSw3IHxcbiAqIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgICB8IHUgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dSAgICAgIHwgLTQzLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1ICAgICB8IC0wNDMsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXUgICAgfCAtMDA0MywgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1dSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBRdWFydGVyIChmb3JtYXR0aW5nKSAgICAgICAgICAgIHwgUSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRUSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBRdWFydGVyIChzdGFuZC1hbG9uZSkgICAgICAgICAgIHwgcSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxcSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBNb250aCAoZm9ybWF0dGluZykgICAgICAgICAgICAgIHwgTSAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1vICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTSAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU0gICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NTSAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNb250aCAoc3RhbmQtYWxvbmUpICAgICAgICAgICAgIHwgTCAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTCAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTEwgICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMTCAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgIHwgdyAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHdvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3dyAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgIHwgSSAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJSSAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgIHwgZCAgICAgICB8IDEsIDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzMXN0ICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkZCAgICAgIHwgMDEsIDAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgIHwgRCAgICAgICB8IDEsIDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgICB8IDggICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzNjV0aCwgMzY2dGggICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBERCAgICAgIHwgMDEsIDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgIHwgOCAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREREICAgICB8IDAwMSwgMDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREREQgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IERheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICAgICAgfCBFLi5FRUUgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdSAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRUUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTdSwgU2EgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgIHwgaSAgICAgICB8IDEsIDIsIDMsIC4uLiwgNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA3dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaSAgICAgIHwgMDEsIDAyLCAuLi4sIDA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3UgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWkgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyLDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWlpICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU3UsIFNhICAgICAgICB8IDcgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICB8IGUgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWUgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlZSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFN1LCBTYSAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChzdGFuZC1hbG9uZSkgfCBjICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY28gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2MgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdSAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjYyAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjY2MgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTdSwgU2EgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgYS4uYWFhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWEgICAgfCBhLm0uLCBwLm0uICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhYSAgIHwgYSwgcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgIHwgYi4uYmJiICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmIgICAgfCBhLm0uLCBwLm0uLCBub29uLCBtaWRuaWdodCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmJiYiAgIHwgYSwgcCwgbiwgbWkgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgIHwgQi4uQkJCICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkIgICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBCQkJCQiAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgIHwgaCAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAxMnRoICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBoaCAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgIHwgSCAgICAgICB8IDAsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhvICAgICAgfCAwdGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBISCAgICAgIHwgMDAsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgIHwgSyAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAwdGggICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBLSyAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMCAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgIHwgayAgICAgICB8IDI0LCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtvICAgICAgfCAyNHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBrayAgICAgIHwgMjQsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbSAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1vICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbSAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcyAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNvICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzcyAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgIHwgUyAgICAgICB8IDAsIDEsIC4uLiwgOSAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTICAgICAgfCAwMCwgMDEsIC4uLiwgOTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1MgICAgIHwgMDAwLCAwMDAxLCAuLi4sIDk5OSAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1NTUyAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvIFopICAgICAgICB8IFggICAgICAgfCAtMDgsICswNTMwLCBaICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWCAgICAgIHwgLTA4MDAsICswNTMwLCBaICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYICAgICB8IC0wODowMCwgKzA1OjMwLCBaICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFggICAgfCAtMDgwMCwgKzA1MzAsIFosICsxMjM0NTYgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFhYWCAgIHwgLTA4OjAwLCArMDU6MzAsIFosICsxMjozNDo1NiAgICAgIHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgIHwgeCAgICAgICB8IC0wOCwgKzA1MzAsICswMCAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4ICAgICAgfCAtMDgwMCwgKzA1MzAsICswMDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHggICAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eCAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAsICsxMjM0NTYgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eHh4ICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwLCArMTI6MzQ6NTYgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICAgfCBPLi4uT09PIHwgR01ULTgsIEdNVCs1OjMwLCBHTVQrMCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgT09PTyAgICB8IEdNVC0wODowMCwgR01UKzA1OjMwLCBHTVQrMDA6MDAgICB8IDIgICAgIHxcbiAqIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pICB8IHouLi56enogfCBQRFQsIEVTVCwgQ0VTVCAgICAgICAgICAgICAgICAgICAgfCA2ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB6enp6ICAgIHwgUGFjaWZpYyBEYXlsaWdodCBUaW1lICAgICAgICAgICAgIHwgMiw2ICAgfFxuICogfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgIHwgdCAgICAgICB8IDUxMjk2OTUyMCAgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHR0ICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDcgICB8XG4gKiB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgfCBUICAgICAgIHwgNTEyOTY5NTIwOTAwICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgVFQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgICB8IFAgICAgICAgfCAwNS8yOS8xNDUzICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUCAgICAgIHwgTWF5IDI5LCAxNDUzICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQICAgICB8IE1heSAyOXRoLCAxNDUzICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUFAgICAgfCBTdW5kYXksIE1heSAyOXRoLCAxNDUzICAgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIHRpbWUgICAgICAgICAgICAgfCBwICAgICAgIHwgMTI6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHAgICAgICB8IDEyOjAwOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcCAgICAgfCAxMjowMDowMCBBTSBHTVQrMiAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcHBwICAgIHwgMTI6MDA6MDAgQU0gR01UKzAyOjAwICAgICAgICAgICAgIHwgMiw3ICAgfFxuICogfCBDb21iaW5hdGlvbiBvZiBkYXRlIGFuZCB0aW1lICAgIHwgUHAgICAgICB8IDA1LzI5LzE0NTMsIDEyOjAwIEFNICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQcHAgICAgfCBNYXkgMjksIDE0NTMsIDEyOjAwOjAwIEFNICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBwcHAgIHwgTWF5IDI5dGgsIDE0NTMgYXQgLi4uICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUHBwcHB8IFN1bmRheSwgTWF5IDI5dGgsIDE0NTMgYXQgLi4uICAgICB8IDIsNyAgIHxcbiAqIE5vdGVzOlxuICogMS4gXCJGb3JtYXR0aW5nXCIgdW5pdHMgKGUuZy4gZm9ybWF0dGluZyBxdWFydGVyKSBpbiB0aGUgZGVmYXVsdCBlbi1VUyBsb2NhbGVcbiAqICAgIGFyZSB0aGUgc2FtZSBhcyBcInN0YW5kLWFsb25lXCIgdW5pdHMsIGJ1dCBhcmUgZGlmZmVyZW50IGluIHNvbWUgbGFuZ3VhZ2VzLlxuICogICAgXCJGb3JtYXR0aW5nXCIgdW5pdHMgYXJlIGRlY2xpbmVkIGFjY29yZGluZyB0byB0aGUgcnVsZXMgb2YgdGhlIGxhbmd1YWdlXG4gKiAgICBpbiB0aGUgY29udGV4dCBvZiBhIGRhdGUuIFwiU3RhbmQtYWxvbmVcIiB1bml0cyBhcmUgYWx3YXlzIG5vbWluYXRpdmUgc2luZ3VsYXI6XG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdkbyBMTExMJywge2xvY2FsZTogY3N9KSAvLz0+ICc2LiBsaXN0b3BhZCdgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdkbyBNTU1NJywge2xvY2FsZTogY3N9KSAvLz0+ICc2LiBsaXN0b3BhZHUnYFxuICpcbiAqIDIuIEFueSBzZXF1ZW5jZSBvZiB0aGUgaWRlbnRpY2FsIGxldHRlcnMgaXMgYSBwYXR0ZXJuLCB1bmxlc3MgaXQgaXMgZXNjYXBlZCBieVxuICogICAgdGhlIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIChzZWUgYmVsb3cpLlxuICogICAgSWYgdGhlIHNlcXVlbmNlIGlzIGxvbmdlciB0aGFuIGxpc3RlZCBpbiB0YWJsZSAoZS5nLiBgRUVFRUVFRUVFRUVgKVxuICogICAgdGhlIG91dHB1dCB3aWxsIGJlIHRoZSBzYW1lIGFzIGRlZmF1bHQgcGF0dGVybiBmb3IgdGhpcyB1bml0LCB1c3VhbGx5XG4gKiAgICB0aGUgbG9uZ2VzdCBvbmUgKGluIGNhc2Ugb2YgSVNPIHdlZWtkYXlzLCBgRUVFRWApLiBEZWZhdWx0IHBhdHRlcm5zIGZvciB1bml0c1xuICogICAgYXJlIG1hcmtlZCB3aXRoIFwiMlwiIGluIHRoZSBsYXN0IGNvbHVtbiBvZiB0aGUgdGFibGUuXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU0nKSAvLz0+ICdOb3YnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NJykgLy89PiAnTidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqIDMuIFNvbWUgcGF0dGVybnMgY291bGQgYmUgdW5saW1pdGVkIGxlbmd0aCAoc3VjaCBhcyBgeXl5eXl5eXlgKS5cbiAqICAgIFRoZSBvdXRwdXQgd2lsbCBiZSBwYWRkZWQgd2l0aCB6ZXJvcyB0byBtYXRjaCB0aGUgbGVuZ3RoIG9mIHRoZSBwYXR0ZXJuLlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAneXl5eXl5eXknKSAvLz0+ICcwMDAwMjAxNydgXG4gKlxuICogNC4gYFFRUVFRYCBhbmQgYHFxcXFxYCBjb3VsZCBiZSBub3Qgc3RyaWN0bHkgbnVtZXJpY2FsIGluIHNvbWUgbG9jYWxlcy5cbiAqICAgIFRoZXNlIHRva2VucyByZXByZXNlbnQgdGhlIHNob3J0ZXN0IGZvcm0gb2YgdGhlIHF1YXJ0ZXIuXG4gKlxuICogNS4gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIHBhdHRlcm5zIGFyZSBCLkMuIHllYXJzOlxuICpcbiAqICAgIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gKiAgICB8LS0tLS0tfC0tLS0tfC0tLS0tfFxuICogICAgfCBBQyAxIHwgICAxIHwgICAxIHxcbiAqICAgIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gKiAgICB8IEJDIDIgfCAgIDIgfCAgLTEgfFxuICpcbiAqICAgIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAqICAgIHdoaWxlIGB1dWAgcGFkcyBzaW5nbGUgZGlnaXQgeWVhcnMgdG8gMiBjaGFyYWN0ZXJzIGFuZCByZXR1cm5zIG90aGVyIHllYXJzIHVuY2hhbmdlZDpcbiAqXG4gKiAgICB8IFllYXIgfCBgeXlgIHwgYHV1YCB8XG4gKiAgICB8LS0tLS0tfC0tLS0tLXwtLS0tLS18XG4gKiAgICB8IDEgICAgfCAgIDAxIHwgICAwMSB8XG4gKiAgICB8IDE0ICAgfCAgIDE0IHwgICAxNCB8XG4gKiAgICB8IDM3NiAgfCAgIDc2IHwgIDM3NiB8XG4gKiAgICB8IDE0NTMgfCAgIDUzIHwgMTQ1MyB8XG4gKlxuICogICAgVGhlIHNhbWUgZGlmZmVyZW5jZSBpcyB0cnVlIGZvciBsb2NhbCBhbmQgSVNPIHdlZWstbnVtYmVyaW5nIHllYXJzIChgWWAgYW5kIGBSYCksXG4gKiAgICBleGNlcHQgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhcnMgYXJlIGRlcGVuZGVudCBvbiBgb3B0aW9ucy53ZWVrU3RhcnRzT25gXG4gKiAgICBhbmQgYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCAoY29tcGFyZSBbZ2V0SVNPV2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0SVNPV2Vla1llYXJ9XG4gKiAgICBhbmQgW2dldFdlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL2dldFdlZWtZZWFyfSkuXG4gKlxuICogNi4gU3BlY2lmaWMgbm9uLWxvY2F0aW9uIHRpbWV6b25lcyBhcmUgY3JlYXRlZCB1c2luZyB0aGUgSW50bCBicm93c2VyIEFQSS4gVGhlIG91dHB1dCBpcyBkZXRlcm1pbmVkIGJ5IHRoZVxuICogICAgcHJlZmVycmVkIHN0YW5kYXJkIG9mIHRoZSBjdXJyZW50IGxvY2FsZSAoZW4tVVMgYnkgZGVmYXVsdCkgd2hpY2ggbWF5IG5vdCBhbHdheXMgZ2l2ZSB0aGUgZXhwZWN0ZWQgcmVzdWx0LlxuICogICAgRm9yIHRoaXMgcmVhc29uIGl0IGlzIHJlY29tbWVuZGVkIHRvIHN1cHBseSBhIGBsb2NhbGVgIGluIHRoZSBmb3JtYXQgb3B0aW9ucyB3aGVuIGZvcm1hdHRpbmcgYSB0aW1lIHpvbmUgbmFtZS5cbiAqXG4gKiA3LiBUaGVzZSBwYXR0ZXJucyBhcmUgbm90IGluIHRoZSBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiAgICAtIGBpYDogSVNPIGRheSBvZiB3ZWVrXG4gKiAgICAtIGBJYDogSVNPIHdlZWsgb2YgeWVhclxuICogICAgLSBgUmA6IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKiAgICAtIGB0YDogc2Vjb25kcyB0aW1lc3RhbXBcbiAqICAgIC0gYFRgOiBtaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBvYDogb3JkaW5hbCBudW1iZXIgbW9kaWZpZXJcbiAqICAgIC0gYFBgOiBsb25nIGxvY2FsaXplZCBkYXRlXG4gKiAgICAtIGBwYDogbG9uZyBsb2NhbGl6ZWQgdGltZVxuICpcbiAqIDguIFRoZXNlIHRva2VucyBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCBvdGhlcnMuIFNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGVcbiAqICAgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiAtIFRoZSBzZWNvbmQgYXJndW1lbnQgaXMgbm93IHJlcXVpcmVkIGZvciB0aGUgc2FrZSBvZiBleHBsaWNpdG5lc3MuXG4gKlxuICogICBgYGBqYXZhc2NyaXB0XG4gKiAgIC8vIEJlZm9yZSB2Mi4wLjBcbiAqICAgZm9ybWF0KG5ldyBEYXRlKDIwMTYsIDAsIDEpKVxuICpcbiAqICAgLy8gdjIuMC4wIG9ud2FyZFxuICogICBmb3JtYXQobmV3IERhdGUoMjAxNiwgMCwgMSksIFwieXl5eS1NTS1kZCdUJ0hIOm1tOnNzLlNTU3h4eFwiKVxuICogICBgYGBcbiAqXG4gKiAtIE5ldyBmb3JtYXQgc3RyaW5nIEFQSSBmb3IgYGZvcm1hdGAgZnVuY3Rpb25cbiAqICAgd2hpY2ggaXMgYmFzZWQgb24gW1VuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkXG4gKiAgICMzNV0oaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0ZpZWxkX1N5bWJvbF9UYWJsZSkuIFNlZSBbdGhpc1xuICogICBwb3N0XShodHRwczovL2Jsb2cuZGF0ZS1mbnMub3JnL3Bvc3QvdW5pY29kZS10b2tlbnMtaW4tZGF0ZS1mbnMtdjItc3JlYXR5a2k5MWpnKSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIC0gQ2hhcmFjdGVycyBhcmUgbm93IGVzY2FwZWQgdXNpbmcgc2luZ2xlIHF1b3RlIHN5bWJvbHMgKGAnYCkgaW5zdGVhZCBvZiBzcXVhcmUgYnJhY2tldHMuXG4gKlxuICogQHBhcmFtIHtEYXRlfFN0cmluZ3xOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IGZvcm1hdCAtIHRoZSBzdHJpbmcgb2YgdG9rZW5zXG4gKiBAcGFyYW0ge09wdGlvbnNXaXRoVFp9IFtvcHRpb25zXSAtIHRoZSBvYmplY3Qgd2l0aCBvcHRpb25zLiBTZWUgW09wdGlvbnNde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvT3B0aW9uc31cbiAqIEBwYXJhbSB7MHwxfDJ9IFtvcHRpb25zLmFkZGl0aW9uYWxEaWdpdHM9Ml0gLSBwYXNzZWQgdG8gYHRvRGF0ZWAuIFNlZSBbdG9EYXRlXXtAbGlua1xuICogICBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL3RvRGF0ZX1cbiAqIEBwYXJhbSB7MHwxfDJ8M3w0fDV8Nn0gW29wdGlvbnMud2Vla1N0YXJ0c09uPTBdIC0gdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsgKDAgLSBTdW5kYXkpXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlPTFdIC0gdGhlIGRheSBvZiBKYW51YXJ5LCB3aGljaCBpc1xuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWVcbiAqICAgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmF3YXJlT2ZVbmljb2RlVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiBVbmljb2RlIHRva2VucyBjYXVzZXMgY29uZnVzaW9uOlxuICogICAtIFNvbWUgb2YgdGhlIGRheSBvZiB5ZWFyIHRva2VucyAoYERgLCBgRERgKSB0aGF0IGFyZSBjb25mdXNlZCB3aXRoIHRoZSBkYXkgb2YgbW9udGggdG9rZW5zIChgZGAsIGBkZGApLlxuICogICAtIFNvbWUgb2YgdGhlIGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgdG9rZW5zIChgWVlgLCBgWVlZWWApIHRoYXQgYXJlIGNvbmZ1c2VkIHdpdGggdGhlIGNhbGVuZGFyIHllYXIgdG9rZW5zXG4gKiAgIChgeXlgLCBgeXl5eWApLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMudGltZVpvbmU9JyddIC0gdXNlZCB0byBzcGVjaWZ5IHRoZSBJQU5BIHRpbWUgem9uZSBvZmZzZXQgb2YgYSBkYXRlIFN0cmluZy5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmdcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmFkZGl0aW9uYWxEaWdpdHNgIG11c3QgYmUgMCwgMSBvciAyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgbG9jYWxpemVgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgZm9ybWF0TG9uZ2AgcHJvcGVydHlcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDdcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmF3YXJlT2ZVbmljb2RlVG9rZW5zYCBtdXN0IGJlIHNldCB0byBgdHJ1ZWAgdG8gdXNlIGBYWGAgdG9rZW47IHNlZTpcbiAqICAgaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDExIEZlYnJ1YXJ5IDIwMTQgaW4gbWlkZGxlLWVuZGlhbiBmb3JtYXQ6XG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDEsIDExKSwgJ01NL2RkL3l5eXknKVxuICogLy89PiAnMDIvMTEvMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDIgSnVseSAyMDE0IGluIEVzcGVyYW50bzpcbiAqIGltcG9ydCB7IGVvTG9jYWxlIH0gZnJvbSAnZGF0ZS1mbnMvbG9jYWxlL2VvJ1xuICogdmFyIHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyKSwgXCJkbyAnZGUnIE1NTU0geXl5eVwiLCB7XG4gKiAgIGxvY2FsZTogZW9Mb2NhbGVcbiAqIH0pXG4gKiAvLz0+ICcyLWEgZGUganVsaW8gMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRXNjYXBlIHN0cmluZyBieSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyczpcbiAqIHZhciByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiwgMTUpLCBcImggJ28nJ2Nsb2NrJ1wiKVxuICogLy89PiBcIjMgbydjbG9ja1wiXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0KGRpcnR5RGF0ZSwgZGlydHlGb3JtYXRTdHIsIGRpcnR5T3B0aW9ucykge1xuICB2YXIgZm9ybWF0U3RyID0gU3RyaW5nKGRpcnR5Rm9ybWF0U3RyKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBtYXRjaGVzID0gZm9ybWF0U3RyLm1hdGNoKHR6Rm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCk7XG5cbiAgaWYgKG1hdGNoZXMpIHtcbiAgICB2YXIgZGF0ZSA9ICgwLCBfaW5kZXgzLmRlZmF1bHQpKGRpcnR5RGF0ZSwgb3B0aW9ucyk7IC8vIFdvcmsgdGhyb3VnaCBlYWNoIG1hdGNoIGFuZCByZXBsYWNlIHRoZSB0eiB0b2tlbiBpbiB0aGUgZm9ybWF0IHN0cmluZyB3aXRoIHRoZSBxdW90ZWRcbiAgICAvLyBmb3JtYXR0ZWQgdGltZSB6b25lIHNvIHRoZSByZW1haW5pbmcgdG9rZW5zIGNhbiBiZSBmaWxsZWQgaW4gYnkgZGF0ZS1mbnMjZm9ybWF0LlxuXG4gICAgZm9ybWF0U3RyID0gbWF0Y2hlcy5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwgdG9rZW4pIHtcbiAgICAgIGlmICh0b2tlblswXSA9PT0gXCInXCIpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDsgLy8gVGhpcyBpcyBhIHF1b3RlZCBwb3J0aW9uLCBtYXRjaGVkIG9ubHkgdG8gZW5zdXJlIHdlIGRvbid0IG1hdGNoIGluc2lkZSBpdFxuICAgICAgfVxuXG4gICAgICB2YXIgcG9zID0gcmVzdWx0LmluZGV4T2YodG9rZW4pO1xuICAgICAgdmFyIHByZWNlZGVkQnlRdW90ZWRTZWN0aW9uID0gcmVzdWx0W3BvcyAtIDFdID09PSBcIidcIjtcbiAgICAgIHZhciByZXBsYWNlZCA9IHJlc3VsdC5yZXBsYWNlKHRva2VuLCBcIidcIiArIF9pbmRleDIuZGVmYXVsdFt0b2tlblswXV0oZGF0ZSwgdG9rZW4sIG51bGwsIG9wdGlvbnMpICsgXCInXCIpOyAvLyBJZiB0aGUgcmVwbGFjZW1lbnQgcmVzdWx0cyBpbiB0d28gYWRqb2luaW5nIHF1b3RlZCBzdHJpbmdzLCB0aGUgYmFjayB0byBiYWNrIHF1b3Rlc1xuICAgICAgLy8gYXJlIHJlbW92ZWQgc28gaXQgZG9lc24ndCBsb29rIGxpa2UgYW4gZXNjYXBlZCBxdW90ZS5cblxuICAgICAgcmV0dXJuIHByZWNlZGVkQnlRdW90ZWRTZWN0aW9uID8gcmVwbGFjZWQuc3Vic3RyaW5nKDAsIHBvcyAtIDEpICsgcmVwbGFjZWQuc3Vic3RyaW5nKHBvcyArIDEpIDogcmVwbGFjZWQ7XG4gICAgfSwgZm9ybWF0U3RyKTtcbiAgfVxuXG4gIHJldHVybiAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5RGF0ZSwgZm9ybWF0U3RyLCBvcHRpb25zKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBmb3JtYXRJblRpbWVab25lO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZGF0ZS1mbnMvX2xpYi9jbG9uZU9iamVjdC9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vZm9ybWF0L2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGNUb1pvbmVkVGltZS9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQG5hbWUgZm9ybWF0SW5UaW1lWm9uZVxuICogQGNhdGVnb3J5IFRpbWUgWm9uZSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXRzIHRoZSBvZmZzZXQgaW4gbWlsbGlzZWNvbmRzIGJldHdlZW4gdGhlIHRpbWUgem9uZSBhbmQgVW5pdmVyc2FsIENvb3JkaW5hdGVkIFRpbWUgKFVUQylcbiAqXG4gKiBAcGFyYW0ge0RhdGV8U3RyaW5nfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHJlcHJlc2VudGluZyB0aGUgbG9jYWwgdGltZSAvIHJlYWwgVVRDIHRpbWVcbiAqIEBwYXJhbSB7U3RyaW5nfSB0aW1lWm9uZSAtIHRoZSB0aW1lIHpvbmUgdGhpcyBkYXRlIHNob3VsZCBiZSBmb3JtYXR0ZWQgZm9yOyBjYW4gYmUgYW4gb2Zmc2V0IG9yIElBTkEgdGltZSB6b25lXG4gKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0U3RyIC0gdGhlIHN0cmluZyBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7T3B0aW9uc1dpdGhUWn0gW29wdGlvbnNdIC0gdGhlIG9iamVjdCB3aXRoIG9wdGlvbnMuIFNlZSBbT3B0aW9uc117QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9PcHRpb25zfVxuICogQHBhcmFtIHswfDF8Mn0gW29wdGlvbnMuYWRkaXRpb25hbERpZ2l0cz0yXSAtIHBhc3NlZCB0byBgdG9EYXRlYC4gU2VlIFt0b0RhdGVde0BsaW5rXG4gKiAgIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvdG9EYXRlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU9MV0gLSB0aGUgZGF5IG9mIEphbnVhcnksIHdoaWNoIGlzXG4gKiBAcGFyYW0ge0xvY2FsZX0gW29wdGlvbnMubG9jYWxlPWRlZmF1bHRMb2NhbGVdIC0gdGhlIGxvY2FsZSBvYmplY3QuIFNlZVxuICogICBbTG9jYWxlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL0xvY2FsZX1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuYXdhcmVPZlVuaWNvZGVUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIFVuaWNvZGUgdG9rZW5zIGNhdXNlcyBjb25mdXNpb246XG4gKiAgIC0gU29tZSBvZiB0aGUgZGF5IG9mIHllYXIgdG9rZW5zIChgRGAsIGBERGApIHRoYXQgYXJlIGNvbmZ1c2VkIHdpdGggdGhlIGRheSBvZiBtb250aCB0b2tlbnMgKGBkYCwgYGRkYCkuXG4gKiAgIC0gU29tZSBvZiB0aGUgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciB0b2tlbnMgKGBZWWAsIGBZWVlZYCkgdGhhdCBhcmUgY29uZnVzZWQgd2l0aCB0aGUgY2FsZW5kYXIgeWVhciB0b2tlbnNcbiAqICAgKGB5eWAsIGB5eXl5YCkuIFNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy50aW1lWm9uZT0nJ10gLSB1c2VkIHRvIHNwZWNpZnkgdGhlIElBTkEgdGltZSB6b25lIG9mZnNldCBvZiBhIGRhdGUgU3RyaW5nLlxuICogQHJldHVybnMge1N0cmluZ30gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZ1xuICovXG5mdW5jdGlvbiBmb3JtYXRJblRpbWVab25lKGRhdGUsIHRpbWVab25lLCBmb3JtYXRTdHIsIG9wdGlvbnMpIHtcbiAgdmFyIGV4dGVuZGVkT3B0aW9ucyA9ICgwLCBfaW5kZXguZGVmYXVsdCkob3B0aW9ucyk7XG4gIGV4dGVuZGVkT3B0aW9ucy50aW1lWm9uZSA9IHRpbWVab25lO1xuICByZXR1cm4gKDAsIF9pbmRleDIuZGVmYXVsdCkoKDAsIF9pbmRleDMuZGVmYXVsdCkoZGF0ZSwgdGltZVpvbmUpLCBmb3JtYXRTdHIsIGV4dGVuZGVkT3B0aW9ucyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0VGltZXpvbmVPZmZzZXQ7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3R6UGFyc2VUaW1lem9uZS9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQG5hbWUgZ2V0VGltZXpvbmVPZmZzZXRcbiAqIEBjYXRlZ29yeSBUaW1lIFpvbmUgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0cyB0aGUgb2Zmc2V0IGluIG1pbGxpc2Vjb25kcyBiZXR3ZWVuIHRoZSB0aW1lIHpvbmUgYW5kIFVuaXZlcnNhbCBDb29yZGluYXRlZCBUaW1lIChVVEMpXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIHRoZSB0aW1lIHpvbmUgb2Zmc2V0IGZyb20gVVRDIHRpbWUgaW4gbWlsbGlzZWNvbmRzIGZvciBJQU5BIHRpbWUgem9uZXMgYXMgd2VsbFxuICogYXMgb3RoZXIgdGltZSB6b25lIG9mZnNldCBzdHJpbmcgZm9ybWF0cy5cbiAqXG4gKiBGb3IgdGltZSB6b25lcyB3aGVyZSBkYXlsaWdodCBzYXZpbmdzIHRpbWUgaXMgYXBwbGljYWJsZSBhIGBEYXRlYCBzaG91bGQgYmUgcGFzc2VkIG9uXG4gKiB0aGUgc2Vjb25kIHBhcmFtZXRlciB0byBlbnN1cmUgdGhlIG9mZnNldCBjb3JyZWN0bHkgYWNjb3VudHMgZm9yIERTVCBhdCB0aGF0IHRpbWUgb2ZcbiAqIHllYXIuIFdoZW4gb21pdHRlZCwgdGhlIGN1cnJlbnQgZGF0ZSBpcyB1c2VkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0aW1lWm9uZSAtIHRoZSB0aW1lIHpvbmUgb2YgdGhpcyBsb2NhbCB0aW1lLCBjYW4gYmUgYW4gb2Zmc2V0IG9yIElBTkEgdGltZSB6b25lXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBbZGF0ZV0gLSB0aGUgZGF0ZSB3aXRoIHZhbHVlcyByZXByZXNlbnRpbmcgdGhlIGxvY2FsIHRpbWVcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHRoZSB0aW1lIHpvbmUgb2Zmc2V0IGluIG1pbGxpc2Vjb25kc1xuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCByZXN1bHQgPSBnZXRUaW1lem9uZU9mZnNldCgnLTA3OjAwJylcbiAqICAgLy89PiAtMTgwMDAwMDAgKC03ICogNjAgKiA2MCAqIDEwMDApXG4gKiBjb25zdCByZXN1bHQgPSBnZXRUaW1lem9uZU9mZnNldCgnQWZyaWNhL0pvaGFubmVzYnVyZycpXG4gKiAgIC8vPT4gNzIwMDAwMCAoMiAqIDYwICogNjAgKiAxMDAwKVxuICogY29uc3QgcmVzdWx0ID0gZ2V0VGltZXpvbmVPZmZzZXQoJ0FtZXJpY2EvTmV3X1lvcmsnLCBuZXcgRGF0ZSgyMDE2LCAwLCAxKSlcbiAqICAgLy89PiAtMTgwMDAwMDAgKC01ICogNjAgKiA2MCAqIDEwMDApXG4gKiBjb25zdCByZXN1bHQgPSBnZXRUaW1lem9uZU9mZnNldCgnQW1lcmljYS9OZXdfWW9yaycsIG5ldyBEYXRlKDIwMTYsIDYsIDEpKVxuICogICAvLz0+IC0xNDQwMDAwMCAoLTQgKiA2MCAqIDYwICogMTAwMClcbiAqL1xuZnVuY3Rpb24gZ2V0VGltZXpvbmVPZmZzZXQodGltZVpvbmUsIGRhdGUpIHtcbiAgcmV0dXJuIC0oMCwgX2luZGV4LmRlZmF1bHQpKHRpbWVab25lLCBkYXRlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIFRoaXMgZmlsZSBpcyBnZW5lcmF0ZWQgYXV0b21hdGljYWxseSBieSBgc2NyaXB0cy9idWlsZC9pbmRpY2VzLmpzYC4gUGxlYXNlLCBkb24ndCBjaGFuZ2UgaXQuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZm9ybWF0OiByZXF1aXJlKCcuL2Zvcm1hdC9pbmRleC5qcycpLFxuICBmb3JtYXRJblRpbWVab25lOiByZXF1aXJlKCcuL2Zvcm1hdEluVGltZVpvbmUvaW5kZXguanMnKSxcbiAgZ2V0VGltZXpvbmVPZmZzZXQ6IHJlcXVpcmUoJy4vZ2V0VGltZXpvbmVPZmZzZXQvaW5kZXguanMnKSxcbiAgdG9EYXRlOiByZXF1aXJlKCcuL3RvRGF0ZS9pbmRleC5qcycpLFxuICB1dGNUb1pvbmVkVGltZTogcmVxdWlyZSgnLi91dGNUb1pvbmVkVGltZS9pbmRleC5qcycpLFxuICB6b25lZFRpbWVUb1V0YzogcmVxdWlyZSgnLi96b25lZFRpbWVUb1V0Yy9pbmRleC5qcycpXG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdG9EYXRlO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZGF0ZS1mbnMvX2xpYi90b0ludGVnZXIvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRhdGUtZm5zL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi90elBhcnNlVGltZXpvbmUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4NCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvdHpQYXR0ZXJuL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIE1JTExJU0VDT05EU19JTl9IT1VSID0gMzYwMDAwMDtcbnZhciBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFID0gNjAwMDA7XG52YXIgREVGQVVMVF9BRERJVElPTkFMX0RJR0lUUyA9IDI7XG52YXIgcGF0dGVybnMgPSB7XG4gIGRhdGVUaW1lUGF0dGVybjogL14oWzAtOVcrLV0rKShUfCApKC4qKS8sXG4gIGRhdGVQYXR0ZXJuOiAvXihbMC05VystXSspKC4qKS8sXG4gIHBsYWluVGltZTogLzovLFxuICAvLyB5ZWFyIHRva2Vuc1xuICBZWTogL14oXFxkezJ9KSQvLFxuICBZWVk6IFsvXihbKy1dXFxkezJ9KSQvLCAvLyAwIGFkZGl0aW9uYWwgZGlnaXRzXG4gIC9eKFsrLV1cXGR7M30pJC8sIC8vIDEgYWRkaXRpb25hbCBkaWdpdFxuICAvXihbKy1dXFxkezR9KSQvIC8vIDIgYWRkaXRpb25hbCBkaWdpdHNcbiAgXSxcbiAgWVlZWTogL14oXFxkezR9KS8sXG4gIFlZWVlZOiBbL14oWystXVxcZHs0fSkvLCAvLyAwIGFkZGl0aW9uYWwgZGlnaXRzXG4gIC9eKFsrLV1cXGR7NX0pLywgLy8gMSBhZGRpdGlvbmFsIGRpZ2l0XG4gIC9eKFsrLV1cXGR7Nn0pLyAvLyAyIGFkZGl0aW9uYWwgZGlnaXRzXG4gIF0sXG4gIC8vIGRhdGUgdG9rZW5zXG4gIE1NOiAvXi0oXFxkezJ9KSQvLFxuICBEREQ6IC9eLT8oXFxkezN9KSQvLFxuICBNTUREOiAvXi0/KFxcZHsyfSktPyhcXGR7Mn0pJC8sXG4gIFd3dzogL14tP1coXFxkezJ9KSQvLFxuICBXd3dEOiAvXi0/VyhcXGR7Mn0pLT8oXFxkezF9KSQvLFxuICBISDogL14oXFxkezJ9KFsuLF1cXGQqKT8pJC8sXG4gIEhITU06IC9eKFxcZHsyfSk6PyhcXGR7Mn0oWy4sXVxcZCopPykkLyxcbiAgSEhNTVNTOiAvXihcXGR7Mn0pOj8oXFxkezJ9KTo/KFxcZHsyfShbLixdXFxkKik/KSQvLFxuICAvLyB0aW1lIHpvbmUgdG9rZW5zICh0byBpZGVudGlmeSB0aGUgcHJlc2VuY2Ugb2YgYSB0eilcbiAgdGltZVpvbmU6IF9pbmRleDQuZGVmYXVsdFxufTtcbi8qKlxuICogQG5hbWUgdG9EYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIGFuIGFyZ3VtZW50IGlzIGEgc3RyaW5nLCB0aGUgZnVuY3Rpb24gdHJpZXMgdG8gcGFyc2UgaXQuXG4gKiBGdW5jdGlvbiBhY2NlcHRzIGNvbXBsZXRlIElTTyA4NjAxIGZvcm1hdHMgYXMgd2VsbCBhcyBwYXJ0aWFsIGltcGxlbWVudGF0aW9ucy5cbiAqIElTTyA4NjAxOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxXG4gKiBJZiB0aGUgZnVuY3Rpb24gY2Fubm90IHBhcnNlIHRoZSBzdHJpbmcgb3IgdGhlIHZhbHVlcyBhcmUgaW52YWxpZCwgaXQgcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIG5vbmUgb2YgdGhlIGFib3ZlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogKipOb3RlKio6ICphbGwqIERhdGUgYXJndW1lbnRzIHBhc3NlZCB0byBhbnkgKmRhdGUtZm5zKiBmdW5jdGlvbiBpcyBwcm9jZXNzZWQgYnkgYHRvRGF0ZWAuXG4gKiBBbGwgKmRhdGUtZm5zKiBmdW5jdGlvbnMgd2lsbCB0aHJvdyBgUmFuZ2VFcnJvcmAgaWYgYG9wdGlvbnMuYWRkaXRpb25hbERpZ2l0c2AgaXMgbm90IDAsIDEsIDIgb3IgdW5kZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxTdHJpbmd8TnVtYmVyfSBhcmd1bWVudCAtIHRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcGFyYW0ge09wdGlvbnNXaXRoVFp9IFtvcHRpb25zXSAtIHRoZSBvYmplY3Qgd2l0aCBvcHRpb25zLiBTZWUgW09wdGlvbnNde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvT3B0aW9uc31cbiAqIEBwYXJhbSB7MHwxfDJ9IFtvcHRpb25zLmFkZGl0aW9uYWxEaWdpdHM9Ml0gLSB0aGUgYWRkaXRpb25hbCBudW1iZXIgb2YgZGlnaXRzIGluIHRoZSBleHRlbmRlZCB5ZWFyIGZvcm1hdFxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLnRpbWVab25lPScnXSAtIHVzZWQgdG8gc3BlY2lmeSB0aGUgSUFOQSB0aW1lIHpvbmUgb2Zmc2V0IG9mIGEgZGF0ZSBTdHJpbmcuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMuYWRkaXRpb25hbERpZ2l0c2AgbXVzdCBiZSAwLCAxIG9yIDJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCBzdHJpbmcgJzIwMTQtMDItMTFUMTE6MzA6MzAnIHRvIGRhdGU6XG4gKiB2YXIgcmVzdWx0ID0gdG9EYXRlKCcyMDE0LTAyLTExVDExOjMwOjMwJylcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgc3RyaW5nICcrMDIwMTQxMDEnIHRvIGRhdGUsXG4gKiAvLyBpZiB0aGUgYWRkaXRpb25hbCBudW1iZXIgb2YgZGlnaXRzIGluIHRoZSBleHRlbmRlZCB5ZWFyIGZvcm1hdCBpcyAxOlxuICogdmFyIHJlc3VsdCA9IHRvRGF0ZSgnKzAyMDE0MTAxJywge2FkZGl0aW9uYWxEaWdpdHM6IDF9KVxuICogLy89PiBGcmkgQXByIDExIDIwMTQgMDA6MDA6MDBcbiAqL1xuXG5mdW5jdGlvbiB0b0RhdGUoYXJndW1lbnQsIGRpcnR5T3B0aW9ucykge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCcxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAnICsgYXJndW1lbnRzLmxlbmd0aCArICcgcHJlc2VudCcpO1xuICB9XG5cbiAgaWYgKGFyZ3VtZW50ID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGFkZGl0aW9uYWxEaWdpdHMgPSBvcHRpb25zLmFkZGl0aW9uYWxEaWdpdHMgPT0gbnVsbCA/IERFRkFVTFRfQURESVRJT05BTF9ESUdJVFMgOiAoMCwgX2luZGV4LmRlZmF1bHQpKG9wdGlvbnMuYWRkaXRpb25hbERpZ2l0cyk7XG5cbiAgaWYgKGFkZGl0aW9uYWxEaWdpdHMgIT09IDIgJiYgYWRkaXRpb25hbERpZ2l0cyAhPT0gMSAmJiBhZGRpdGlvbmFsRGlnaXRzICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2FkZGl0aW9uYWxEaWdpdHMgbXVzdCBiZSAwLCAxIG9yIDInKTtcbiAgfSAvLyBDbG9uZSB0aGUgZGF0ZVxuXG5cbiAgaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZSB8fCB0eXBlb2YgYXJndW1lbnQgPT09ICdvYmplY3QnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCkgPT09ICdbb2JqZWN0IERhdGVdJykge1xuICAgIC8vIFByZXZlbnQgdGhlIGRhdGUgdG8gbG9zZSB0aGUgbWlsbGlzZWNvbmRzIHdoZW4gcGFzc2VkIHRvIG5ldyBEYXRlKCkgaW4gSUUxMFxuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudC5nZXRUaW1lKCkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhcmd1bWVudCA9PT0gJ251bWJlcicgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KSA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xuICB9IGVsc2UgaWYgKCEodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnQpID09PSAnW29iamVjdCBTdHJpbmddJykpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxuXG4gIHZhciBkYXRlU3RyaW5ncyA9IHNwbGl0RGF0ZVN0cmluZyhhcmd1bWVudCk7XG4gIHZhciBwYXJzZVllYXJSZXN1bHQgPSBwYXJzZVllYXIoZGF0ZVN0cmluZ3MuZGF0ZSwgYWRkaXRpb25hbERpZ2l0cyk7XG4gIHZhciB5ZWFyID0gcGFyc2VZZWFyUmVzdWx0LnllYXI7XG4gIHZhciByZXN0RGF0ZVN0cmluZyA9IHBhcnNlWWVhclJlc3VsdC5yZXN0RGF0ZVN0cmluZztcbiAgdmFyIGRhdGUgPSBwYXJzZURhdGUocmVzdERhdGVTdHJpbmcsIHllYXIpO1xuXG4gIGlmIChpc05hTihkYXRlKSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG5cbiAgaWYgKGRhdGUpIHtcbiAgICB2YXIgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gICAgdmFyIHRpbWUgPSAwO1xuICAgIHZhciBvZmZzZXQ7XG5cbiAgICBpZiAoZGF0ZVN0cmluZ3MudGltZSkge1xuICAgICAgdGltZSA9IHBhcnNlVGltZShkYXRlU3RyaW5ncy50aW1lKTtcblxuICAgICAgaWYgKGlzTmFOKHRpbWUpKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkYXRlU3RyaW5ncy50aW1lWm9uZSB8fCBvcHRpb25zLnRpbWVab25lKSB7XG4gICAgICBvZmZzZXQgPSAoMCwgX2luZGV4My5kZWZhdWx0KShkYXRlU3RyaW5ncy50aW1lWm9uZSB8fCBvcHRpb25zLnRpbWVab25lLCBuZXcgRGF0ZSh0aW1lc3RhbXAgKyB0aW1lKSk7XG5cbiAgICAgIGlmIChpc05hTihvZmZzZXQpKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBnZXQgb2Zmc2V0IGFjY3VyYXRlIHRvIGhvdXIgaW4gdGltZSB6b25lcyB0aGF0IGNoYW5nZSBvZmZzZXRcbiAgICAgIG9mZnNldCA9ICgwLCBfaW5kZXgyLmRlZmF1bHQpKG5ldyBEYXRlKHRpbWVzdGFtcCArIHRpbWUpKTtcbiAgICAgIG9mZnNldCA9ICgwLCBfaW5kZXgyLmRlZmF1bHQpKG5ldyBEYXRlKHRpbWVzdGFtcCArIHRpbWUgKyBvZmZzZXQpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wICsgdGltZSArIG9mZnNldCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3BsaXREYXRlU3RyaW5nKGRhdGVTdHJpbmcpIHtcbiAgdmFyIGRhdGVTdHJpbmdzID0ge307XG4gIHZhciBwYXJ0cyA9IHBhdHRlcm5zLmRhdGVUaW1lUGF0dGVybi5leGVjKGRhdGVTdHJpbmcpO1xuICB2YXIgdGltZVN0cmluZztcblxuICBpZiAoIXBhcnRzKSB7XG4gICAgcGFydHMgPSBwYXR0ZXJucy5kYXRlUGF0dGVybi5leGVjKGRhdGVTdHJpbmcpO1xuXG4gICAgaWYgKHBhcnRzKSB7XG4gICAgICBkYXRlU3RyaW5ncy5kYXRlID0gcGFydHNbMV07XG4gICAgICB0aW1lU3RyaW5nID0gcGFydHNbMl07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGVTdHJpbmdzLmRhdGUgPSBudWxsO1xuICAgICAgdGltZVN0cmluZyA9IGRhdGVTdHJpbmc7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGRhdGVTdHJpbmdzLmRhdGUgPSBwYXJ0c1sxXTtcbiAgICB0aW1lU3RyaW5nID0gcGFydHNbM107XG4gIH1cblxuICBpZiAodGltZVN0cmluZykge1xuICAgIHZhciB0b2tlbiA9IHBhdHRlcm5zLnRpbWVab25lLmV4ZWModGltZVN0cmluZyk7XG5cbiAgICBpZiAodG9rZW4pIHtcbiAgICAgIGRhdGVTdHJpbmdzLnRpbWUgPSB0aW1lU3RyaW5nLnJlcGxhY2UodG9rZW5bMV0sICcnKTtcbiAgICAgIGRhdGVTdHJpbmdzLnRpbWVab25lID0gdG9rZW5bMV0udHJpbSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRlU3RyaW5ncy50aW1lID0gdGltZVN0cmluZztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0ZVN0cmluZ3M7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWWVhcihkYXRlU3RyaW5nLCBhZGRpdGlvbmFsRGlnaXRzKSB7XG4gIHZhciBwYXR0ZXJuWVlZID0gcGF0dGVybnMuWVlZW2FkZGl0aW9uYWxEaWdpdHNdO1xuICB2YXIgcGF0dGVybllZWVlZID0gcGF0dGVybnMuWVlZWVlbYWRkaXRpb25hbERpZ2l0c107XG4gIHZhciB0b2tlbjsgLy8gWVlZWSBvciDCsVlZWVlZXG5cbiAgdG9rZW4gPSBwYXR0ZXJucy5ZWVlZLmV4ZWMoZGF0ZVN0cmluZykgfHwgcGF0dGVybllZWVlZLmV4ZWMoZGF0ZVN0cmluZyk7XG5cbiAgaWYgKHRva2VuKSB7XG4gICAgdmFyIHllYXJTdHJpbmcgPSB0b2tlblsxXTtcbiAgICByZXR1cm4ge1xuICAgICAgeWVhcjogcGFyc2VJbnQoeWVhclN0cmluZywgMTApLFxuICAgICAgcmVzdERhdGVTdHJpbmc6IGRhdGVTdHJpbmcuc2xpY2UoeWVhclN0cmluZy5sZW5ndGgpXG4gICAgfTtcbiAgfSAvLyBZWSBvciDCsVlZWVxuXG5cbiAgdG9rZW4gPSBwYXR0ZXJucy5ZWS5leGVjKGRhdGVTdHJpbmcpIHx8IHBhdHRlcm5ZWVkuZXhlYyhkYXRlU3RyaW5nKTtcblxuICBpZiAodG9rZW4pIHtcbiAgICB2YXIgY2VudHVyeVN0cmluZyA9IHRva2VuWzFdO1xuICAgIHJldHVybiB7XG4gICAgICB5ZWFyOiBwYXJzZUludChjZW50dXJ5U3RyaW5nLCAxMCkgKiAxMDAsXG4gICAgICByZXN0RGF0ZVN0cmluZzogZGF0ZVN0cmluZy5zbGljZShjZW50dXJ5U3RyaW5nLmxlbmd0aClcbiAgICB9O1xuICB9IC8vIEludmFsaWQgSVNPLWZvcm1hdHRlZCB5ZWFyXG5cblxuICByZXR1cm4ge1xuICAgIHllYXI6IG51bGxcbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXRlKGRhdGVTdHJpbmcsIHllYXIpIHtcbiAgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIHllYXJcbiAgaWYgKHllYXIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciB0b2tlbjtcbiAgdmFyIGRhdGU7XG4gIHZhciBtb250aDtcbiAgdmFyIHdlZWs7IC8vIFlZWVlcblxuICBpZiAoZGF0ZVN0cmluZy5sZW5ndGggPT09IDApIHtcbiAgICBkYXRlID0gbmV3IERhdGUoMCk7XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5ZWFyKTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfSAvLyBZWVlZLU1NXG5cblxuICB0b2tlbiA9IHBhdHRlcm5zLk1NLmV4ZWMoZGF0ZVN0cmluZyk7XG5cbiAgaWYgKHRva2VuKSB7XG4gICAgZGF0ZSA9IG5ldyBEYXRlKDApO1xuICAgIG1vbnRoID0gcGFyc2VJbnQodG9rZW5bMV0sIDEwKSAtIDE7XG5cbiAgICBpZiAoIXZhbGlkYXRlRGF0ZSh5ZWFyLCBtb250aCkpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgIH1cblxuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeWVhciwgbW9udGgpO1xuICAgIHJldHVybiBkYXRlO1xuICB9IC8vIFlZWVktREREIG9yIFlZWVlERERcblxuXG4gIHRva2VuID0gcGF0dGVybnMuRERELmV4ZWMoZGF0ZVN0cmluZyk7XG5cbiAgaWYgKHRva2VuKSB7XG4gICAgZGF0ZSA9IG5ldyBEYXRlKDApO1xuICAgIHZhciBkYXlPZlllYXIgPSBwYXJzZUludCh0b2tlblsxXSwgMTApO1xuXG4gICAgaWYgKCF2YWxpZGF0ZURheU9mWWVhckRhdGUoeWVhciwgZGF5T2ZZZWFyKSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgfVxuXG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBkYXlPZlllYXIpO1xuICAgIHJldHVybiBkYXRlO1xuICB9IC8vIHl5eXktTU0tZGQgb3IgWVlZWU1NRERcblxuXG4gIHRva2VuID0gcGF0dGVybnMuTU1ERC5leGVjKGRhdGVTdHJpbmcpO1xuXG4gIGlmICh0b2tlbikge1xuICAgIGRhdGUgPSBuZXcgRGF0ZSgwKTtcbiAgICBtb250aCA9IHBhcnNlSW50KHRva2VuWzFdLCAxMCkgLSAxO1xuICAgIHZhciBkYXkgPSBwYXJzZUludCh0b2tlblsyXSwgMTApO1xuXG4gICAgaWYgKCF2YWxpZGF0ZURhdGUoeWVhciwgbW9udGgsIGRheSkpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgIH1cblxuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeWVhciwgbW9udGgsIGRheSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH0gLy8gWVlZWS1Xd3cgb3IgWVlZWVd3d1xuXG5cbiAgdG9rZW4gPSBwYXR0ZXJucy5Xd3cuZXhlYyhkYXRlU3RyaW5nKTtcblxuICBpZiAodG9rZW4pIHtcbiAgICB3ZWVrID0gcGFyc2VJbnQodG9rZW5bMV0sIDEwKSAtIDE7XG5cbiAgICBpZiAoIXZhbGlkYXRlV2Vla0RhdGUoeWVhciwgd2VlaykpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgIH1cblxuICAgIHJldHVybiBkYXlPZklTT1dlZWtZZWFyKHllYXIsIHdlZWspO1xuICB9IC8vIFlZWVktV3d3LUQgb3IgWVlZWVd3d0RcblxuXG4gIHRva2VuID0gcGF0dGVybnMuV3d3RC5leGVjKGRhdGVTdHJpbmcpO1xuXG4gIGlmICh0b2tlbikge1xuICAgIHdlZWsgPSBwYXJzZUludCh0b2tlblsxXSwgMTApIC0gMTtcbiAgICB2YXIgZGF5T2ZXZWVrID0gcGFyc2VJbnQodG9rZW5bMl0sIDEwKSAtIDE7XG5cbiAgICBpZiAoIXZhbGlkYXRlV2Vla0RhdGUoeWVhciwgd2VlaywgZGF5T2ZXZWVrKSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRheU9mSVNPV2Vla1llYXIoeWVhciwgd2VlaywgZGF5T2ZXZWVrKTtcbiAgfSAvLyBJbnZhbGlkIElTTy1mb3JtYXR0ZWQgZGF0ZVxuXG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVGltZSh0aW1lU3RyaW5nKSB7XG4gIHZhciB0b2tlbjtcbiAgdmFyIGhvdXJzO1xuICB2YXIgbWludXRlczsgLy8gaGhcblxuICB0b2tlbiA9IHBhdHRlcm5zLkhILmV4ZWModGltZVN0cmluZyk7XG5cbiAgaWYgKHRva2VuKSB7XG4gICAgaG91cnMgPSBwYXJzZUZsb2F0KHRva2VuWzFdLnJlcGxhY2UoJywnLCAnLicpKTtcblxuICAgIGlmICghdmFsaWRhdGVUaW1lKGhvdXJzKSkge1xuICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG5cbiAgICByZXR1cm4gaG91cnMgJSAyNCAqIE1JTExJU0VDT05EU19JTl9IT1VSO1xuICB9IC8vIGhoOm1tIG9yIGhobW1cblxuXG4gIHRva2VuID0gcGF0dGVybnMuSEhNTS5leGVjKHRpbWVTdHJpbmcpO1xuXG4gIGlmICh0b2tlbikge1xuICAgIGhvdXJzID0gcGFyc2VJbnQodG9rZW5bMV0sIDEwKTtcbiAgICBtaW51dGVzID0gcGFyc2VGbG9hdCh0b2tlblsyXS5yZXBsYWNlKCcsJywgJy4nKSk7XG5cbiAgICBpZiAoIXZhbGlkYXRlVGltZShob3VycywgbWludXRlcykpIHtcbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuXG4gICAgcmV0dXJuIGhvdXJzICUgMjQgKiBNSUxMSVNFQ09ORFNfSU5fSE9VUiArIG1pbnV0ZXMgKiBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFO1xuICB9IC8vIGhoOm1tOnNzIG9yIGhobW1zc1xuXG5cbiAgdG9rZW4gPSBwYXR0ZXJucy5ISE1NU1MuZXhlYyh0aW1lU3RyaW5nKTtcblxuICBpZiAodG9rZW4pIHtcbiAgICBob3VycyA9IHBhcnNlSW50KHRva2VuWzFdLCAxMCk7XG4gICAgbWludXRlcyA9IHBhcnNlSW50KHRva2VuWzJdLCAxMCk7XG4gICAgdmFyIHNlY29uZHMgPSBwYXJzZUZsb2F0KHRva2VuWzNdLnJlcGxhY2UoJywnLCAnLicpKTtcblxuICAgIGlmICghdmFsaWRhdGVUaW1lKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKSkge1xuICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG5cbiAgICByZXR1cm4gaG91cnMgJSAyNCAqIE1JTExJU0VDT05EU19JTl9IT1VSICsgbWludXRlcyAqIE1JTExJU0VDT05EU19JTl9NSU5VVEUgKyBzZWNvbmRzICogMTAwMDtcbiAgfSAvLyBJbnZhbGlkIElTTy1mb3JtYXR0ZWQgdGltZVxuXG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGRheU9mSVNPV2Vla1llYXIoaXNvV2Vla1llYXIsIHdlZWssIGRheSkge1xuICB3ZWVrID0gd2VlayB8fCAwO1xuICBkYXkgPSBkYXkgfHwgMDtcbiAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgwKTtcbiAgZGF0ZS5zZXRVVENGdWxsWWVhcihpc29XZWVrWWVhciwgMCwgNCk7XG4gIHZhciBmb3VydGhPZkphbnVhcnlEYXkgPSBkYXRlLmdldFVUQ0RheSgpIHx8IDc7XG4gIHZhciBkaWZmID0gd2VlayAqIDcgKyBkYXkgKyAxIC0gZm91cnRoT2ZKYW51YXJ5RGF5O1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBkaWZmKTtcbiAgcmV0dXJuIGRhdGU7XG59IC8vIFZhbGlkYXRpb24gZnVuY3Rpb25zXG5cblxudmFyIERBWVNfSU5fTU9OVEggPSBbMzEsIDI4LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV07XG52YXIgREFZU19JTl9NT05USF9MRUFQX1lFQVIgPSBbMzEsIDI5LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV07XG5cbmZ1bmN0aW9uIGlzTGVhcFllYXJJbmRleCh5ZWFyKSB7XG4gIHJldHVybiB5ZWFyICUgNDAwID09PSAwIHx8IHllYXIgJSA0ID09PSAwICYmIHllYXIgJSAxMDAgIT09IDA7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRGF0ZSh5ZWFyLCBtb250aCwgZGF0ZSkge1xuICBpZiAobW9udGggPCAwIHx8IG1vbnRoID4gMTEpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoZGF0ZSAhPSBudWxsKSB7XG4gICAgaWYgKGRhdGUgPCAxKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGlzTGVhcFllYXIgPSBpc0xlYXBZZWFySW5kZXgoeWVhcik7XG5cbiAgICBpZiAoaXNMZWFwWWVhciAmJiBkYXRlID4gREFZU19JTl9NT05USF9MRUFQX1lFQVJbbW9udGhdKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFpc0xlYXBZZWFyICYmIGRhdGUgPiBEQVlTX0lOX01PTlRIW21vbnRoXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZURheU9mWWVhckRhdGUoeWVhciwgZGF5T2ZZZWFyKSB7XG4gIGlmIChkYXlPZlllYXIgPCAxKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGlzTGVhcFllYXIgPSBpc0xlYXBZZWFySW5kZXgoeWVhcik7XG5cbiAgaWYgKGlzTGVhcFllYXIgJiYgZGF5T2ZZZWFyID4gMzY2KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCFpc0xlYXBZZWFyICYmIGRheU9mWWVhciA+IDM2NSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVdlZWtEYXRlKHllYXIsIHdlZWssIGRheSkge1xuICBpZiAod2VlayA8IDAgfHwgd2VlayA+IDUyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGRheSAhPSBudWxsICYmIChkYXkgPCAwIHx8IGRheSA+IDYpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVGltZShob3VycywgbWludXRlcywgc2Vjb25kcykge1xuICBpZiAoaG91cnMgIT0gbnVsbCAmJiAoaG91cnMgPCAwIHx8IGhvdXJzID49IDI1KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChtaW51dGVzICE9IG51bGwgJiYgKG1pbnV0ZXMgPCAwIHx8IG1pbnV0ZXMgPj0gNjApKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHNlY29uZHMgIT0gbnVsbCAmJiAoc2Vjb25kcyA8IDAgfHwgc2Vjb25kcyA+PSA2MCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB1dGNUb1pvbmVkVGltZTtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvdHpQYXJzZVRpbWV6b25lL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIHV0Y1RvWm9uZWRUaW1lXG4gKiBAY2F0ZWdvcnkgVGltZSBab25lIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCBhIGRhdGUvdGltZSByZXByZXNlbnRpbmcgbG9jYWwgdGltZSBpbiBhIGdpdmVuIHRpbWUgem9uZSBmcm9tIHRoZSBVVEMgZGF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBhIGRhdGUgaW5zdGFuY2Ugd2l0aCB2YWx1ZXMgcmVwcmVzZW50aW5nIHRoZSBsb2NhbCB0aW1lIGluIHRoZSB0aW1lIHpvbmVcbiAqIHNwZWNpZmllZCBvZiB0aGUgVVRDIHRpbWUgZnJvbSB0aGUgZGF0ZSBwcm92aWRlZC4gSW4gb3RoZXIgd29yZHMsIHdoZW4gdGhlIG5ldyBkYXRlXG4gKiBpcyBmb3JtYXR0ZWQgaXQgd2lsbCBzaG93IHRoZSBlcXVpdmFsZW50IGhvdXJzIGluIHRoZSB0YXJnZXQgdGltZSB6b25lIHJlZ2FyZGxlc3NcbiAqIG9mIHRoZSBjdXJyZW50IHN5c3RlbSB0aW1lIHpvbmUuXG4gKlxuICogQHBhcmFtIHtEYXRlfFN0cmluZ3xOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB3aXRoIHRoZSByZWxldmFudCBVVEMgdGltZVxuICogQHBhcmFtIHtTdHJpbmd9IHRpbWVab25lIC0gdGhlIHRpbWUgem9uZSB0byBnZXQgbG9jYWwgdGltZSBmb3IsIGNhbiBiZSBhbiBvZmZzZXQgb3IgSUFOQSB0aW1lIHpvbmVcbiAqIEBwYXJhbSB7T3B0aW9uc1dpdGhUWn0gW29wdGlvbnNdIC0gdGhlIG9iamVjdCB3aXRoIG9wdGlvbnMuIFNlZSBbT3B0aW9uc117QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9PcHRpb25zfVxuICogQHBhcmFtIHswfDF8Mn0gW29wdGlvbnMuYWRkaXRpb25hbERpZ2l0cz0yXSAtIHBhc3NlZCB0byBgdG9EYXRlYC4gU2VlIFt0b0RhdGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvdG9EYXRlfVxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBlcXVpdmFsZW50IHRpbWUgaW4gdGhlIHRpbWUgem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMuYWRkaXRpb25hbERpZ2l0c2AgbXVzdCBiZSAwLCAxIG9yIDJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSW4gSnVuZSAxMGFtIFVUQyBpcyA2YW0gaW4gTmV3IFlvcmsgKC0wNDowMClcbiAqIGNvbnN0IHJlc3VsdCA9IHV0Y1RvWm9uZWRUaW1lKCcyMDE0LTA2LTI1VDEwOjAwOjAwLjAwMFonLCAnQW1lcmljYS9OZXdfWW9yaycpXG4gKiAvLz0+IEp1biAyNSAyMDE0IDA2OjAwOjAwXG4gKi9cbmZ1bmN0aW9uIHV0Y1RvWm9uZWRUaW1lKGRpcnR5RGF0ZSwgdGltZVpvbmUsIG9wdGlvbnMpIHtcbiAgdmFyIGRhdGUgPSAoMCwgX2luZGV4Mi5kZWZhdWx0KShkaXJ0eURhdGUsIG9wdGlvbnMpO1xuICB2YXIgb2Zmc2V0TWlsbGlzZWNvbmRzID0gKDAsIF9pbmRleC5kZWZhdWx0KSh0aW1lWm9uZSwgZGF0ZSwgdHJ1ZSk7XG4gIHZhciBkID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkgLSBvZmZzZXRNaWxsaXNlY29uZHMpO1xuICByZXR1cm4gbmV3IERhdGUoZC5nZXRVVENGdWxsWWVhcigpLCBkLmdldFVUQ01vbnRoKCksIGQuZ2V0VVRDRGF0ZSgpLCBkLmdldFVUQ0hvdXJzKCksIGQuZ2V0VVRDTWludXRlcygpLCBkLmdldFVUQ1NlY29uZHMoKSwgZC5nZXRVVENNaWxsaXNlY29uZHMoKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gem9uZWRUaW1lVG9VdGM7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkYXRlLWZucy9fbGliL2Nsb25lT2JqZWN0L2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvdHpQYXR0ZXJuL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3R6UGFyc2VUaW1lem9uZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg1ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9uZXdEYXRlVVRDL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSB6b25lZFRpbWVUb1V0Y1xuICogQGNhdGVnb3J5IFRpbWUgWm9uZSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIFVUQyBkYXRlL3RpbWUgZnJvbSBhIGRhdGUgcmVwcmVzZW50aW5nIGxvY2FsIHRpbWUgaW4gYSBnaXZlbiB0aW1lIHpvbmVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgYSBkYXRlIGluc3RhbmNlIHdpdGggdGhlIFVUQyB0aW1lIG9mIHRoZSBwcm92aWRlZCBkYXRlIG9mIHdoaWNoIHRoZSB2YWx1ZXNcbiAqIHJlcHJlc2VudGVkIHRoZSBsb2NhbCB0aW1lIGluIHRoZSB0aW1lIHpvbmUgc3BlY2lmaWVkLiBJbiBvdGhlciB3b3JkcywgaWYgdGhlIGlucHV0XG4gKiBkYXRlIHJlcHJlc2VudGVkIGxvY2FsIHRpbWUgaW4gdGltZSB0aW1lIHpvbmUsIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG91dHB1dCBkYXRlIHdpbGxcbiAqIGdpdmUgdGhlIGVxdWl2YWxlbnQgVVRDIG9mIHRoYXQgbG9jYWwgdGltZSByZWdhcmRsZXNzIG9mIHRoZSBjdXJyZW50IHN5c3RlbSB0aW1lIHpvbmUuXG4gKlxuICogQHBhcmFtIHtEYXRlfFN0cmluZ3xOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB3aXRoIHZhbHVlcyByZXByZXNlbnRpbmcgdGhlIGxvY2FsIHRpbWVcbiAqIEBwYXJhbSB7U3RyaW5nfSB0aW1lWm9uZSAtIHRoZSB0aW1lIHpvbmUgb2YgdGhpcyBsb2NhbCB0aW1lLCBjYW4gYmUgYW4gb2Zmc2V0IG9yIElBTkEgdGltZSB6b25lXG4gKiBAcGFyYW0ge09wdGlvbnNXaXRoVFp9IFtvcHRpb25zXSAtIHRoZSBvYmplY3Qgd2l0aCBvcHRpb25zLiBTZWUgW09wdGlvbnNde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvT3B0aW9uc31cbiAqIEBwYXJhbSB7MHwxfDJ9IFtvcHRpb25zLmFkZGl0aW9uYWxEaWdpdHM9Ml0gLSBwYXNzZWQgdG8gYHRvRGF0ZWAuIFNlZSBbdG9EYXRlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL3RvRGF0ZX1cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgZXF1aXZhbGVudCB0aW1lIGluIHRoZSB0aW1lIHpvbmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmFkZGl0aW9uYWxEaWdpdHNgIG11c3QgYmUgMCwgMSBvciAyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEluIEp1bmUgMTBhbSBpbiBMb3MgQW5nZWxlcyBpcyA1cG0gVVRDXG4gKiBjb25zdCByZXN1bHQgPSB6b25lZFRpbWVUb1V0YyhuZXcgRGF0ZSgyMDE0LCA1LCAyNSwgMTAsIDAsIDApLCAnQW1lcmljYS9Mb3NfQW5nZWxlcycpXG4gKiAvLz0+IDIwMTQtMDYtMjVUMTc6MDA6MDAuMDAwWlxuICovXG5mdW5jdGlvbiB6b25lZFRpbWVUb1V0YyhkYXRlLCB0aW1lWm9uZSwgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRhdGUgPT09ICdzdHJpbmcnICYmICFkYXRlLm1hdGNoKF9pbmRleDMuZGVmYXVsdCkpIHtcbiAgICB2YXIgZXh0ZW5kZWRPcHRpb25zID0gKDAsIF9pbmRleC5kZWZhdWx0KShvcHRpb25zKTtcbiAgICBleHRlbmRlZE9wdGlvbnMudGltZVpvbmUgPSB0aW1lWm9uZTtcbiAgICByZXR1cm4gKDAsIF9pbmRleDIuZGVmYXVsdCkoZGF0ZSwgZXh0ZW5kZWRPcHRpb25zKTtcbiAgfVxuXG4gIHZhciBkID0gKDAsIF9pbmRleDIuZGVmYXVsdCkoZGF0ZSwgb3B0aW9ucyk7XG4gIHZhciB1dGMgPSAoMCwgX2luZGV4NS5kZWZhdWx0KShkLmdldEZ1bGxZZWFyKCksIGQuZ2V0TW9udGgoKSwgZC5nZXREYXRlKCksIGQuZ2V0SG91cnMoKSwgZC5nZXRNaW51dGVzKCksIGQuZ2V0U2Vjb25kcygpLCBkLmdldE1pbGxpc2Vjb25kcygpKS5nZXRUaW1lKCk7XG4gIHZhciBvZmZzZXRNaWxsaXNlY29uZHMgPSAoMCwgX2luZGV4NC5kZWZhdWx0KSh0aW1lWm9uZSwgbmV3IERhdGUodXRjKSk7XG4gIHJldHVybiBuZXcgRGF0ZSh1dGMgKyBvZmZzZXRNaWxsaXNlY29uZHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXF1aXJlZEFyZ3MocmVxdWlyZWQsIGFyZ3MpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoIDwgcmVxdWlyZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHJlcXVpcmVkICsgJyBhcmd1bWVudCcgKyAocmVxdWlyZWQgPiAxID8gJ3MnIDogJycpICsgJyByZXF1aXJlZCwgYnV0IG9ubHkgJyArIGFyZ3MubGVuZ3RoICsgJyBwcmVzZW50Jyk7XG4gIH1cbn0iLCJpbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSB0b0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0cyBjbG9uZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXAuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIG5vbmUgb2YgdGhlIGFib3ZlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogKipOb3RlKio6ICphbGwqIERhdGUgYXJndW1lbnRzIHBhc3NlZCB0byBhbnkgKmRhdGUtZm5zKiBmdW5jdGlvbiBpcyBwcm9jZXNzZWQgYnkgYHRvRGF0ZWAuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gYXJndW1lbnQgLSB0aGUgdmFsdWUgdG8gY29udmVydFxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ2xvbmUgdGhlIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUobmV3IERhdGUoMjAxNCwgMSwgMTEsIDExLCAzMCwgMzApKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCB0aGUgdGltZXN0YW1wIHRvIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUoMTM5MjA5ODQzMDAwMClcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9EYXRlKGFyZ3VtZW50KSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgYXJnU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KTsgLy8gQ2xvbmUgdGhlIGRhdGVcblxuICBpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiBhcmd1bWVudCA9PT0gJ29iamVjdCcgJiYgYXJnU3RyID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQuZ2V0VGltZSgpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdudW1iZXInIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IFN0cmluZ10nKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJTdGFydGluZyB3aXRoIHYyLjAuMC1iZXRhLjEgZGF0ZS1mbnMgZG9lc24ndCBhY2NlcHQgc3RyaW5ncyBhcyBkYXRlIGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBgcGFyc2VJU09gIHRvIHBhcnNlIHN0cmluZ3MuIFNlZTogaHR0cHM6Ly9naXQuaW8vZmp1bGVcIik7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cbiAgICAgIGNvbnNvbGUud2FybihuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0ludGVnZXIoZGlydHlOdW1iZXIpIHtcbiAgaWYgKGRpcnR5TnVtYmVyID09PSBudWxsIHx8IGRpcnR5TnVtYmVyID09PSB0cnVlIHx8IGRpcnR5TnVtYmVyID09PSBmYWxzZSkge1xuICAgIHJldHVybiBOYU47XG4gIH1cblxuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTtcblxuICBpZiAoaXNOYU4obnVtYmVyKSkge1xuICAgIHJldHVybiBudW1iZXI7XG4gIH1cblxuICByZXR1cm4gbnVtYmVyIDwgMCA/IE1hdGguY2VpbChudW1iZXIpIDogTWF0aC5mbG9vcihudW1iZXIpO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGZyb21Vbml4VGltZVxuICogQGNhdGVnb3J5IFRpbWVzdGFtcCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBDcmVhdGUgYSBkYXRlIGZyb20gYSBVbml4IHRpbWVzdGFtcC5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZSBhIGRhdGUgZnJvbSBhIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKS4gRGVjaW1hbCB2YWx1ZXMgd2lsbCBiZSBkaXNjYXJkZWQuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gdW5peFRpbWUgLSB0aGUgZ2l2ZW4gVW5peCB0aW1lc3RhbXAgKGluIHNlY29uZHMpXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIGRhdGVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDcmVhdGUgdGhlIGRhdGUgMjkgRmVicnVhcnkgMjAxMiAxMTo0NTowNTpcbiAqIGNvbnN0IHJlc3VsdCA9IGZyb21Vbml4VGltZSgxMzMwNTE1OTA1KVxuICogLy89PiBXZWQgRmViIDI5IDIwMTIgMTE6NDU6MDVcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmcm9tVW5peFRpbWUoZGlydHlVbml4VGltZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHVuaXhUaW1lID0gdG9JbnRlZ2VyKGRpcnR5VW5peFRpbWUpO1xuICByZXR1cm4gdG9EYXRlKHVuaXhUaW1lICogMTAwMCk7XG59IiwiaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNEYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiB2YWx1ZSBhIGRhdGU/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGFuIGluc3RhbmNlIG9mIERhdGUuIFRoZSBmdW5jdGlvbiB3b3JrcyBmb3IgZGF0ZXMgdHJhbnNmZXJyZWQgYWNyb3NzIGlmcmFtZXMuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gdGhlIHZhbHVlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBkYXRlXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUobmV3IERhdGUoKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gaW52YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKE5hTikpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHNvbWUgdmFsdWU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUoJzIwMTQtMDItMzEnKVxuICogLy89PiBmYWxzZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gb2JqZWN0OlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKHt9KVxuICogLy89PiBmYWxzZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzRGF0ZSh2YWx1ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSB8fCB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IERhdGVdJztcbn0iLCJpbXBvcnQgaXNEYXRlIGZyb20gXCIuLi9pc0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNWYWxpZFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB2YWxpZD9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgZmFsc2UgaWYgYXJndW1lbnQgaXMgSW52YWxpZCBEYXRlIGFuZCB0cnVlIG90aGVyd2lzZS5cbiAqIEFyZ3VtZW50IGlzIGNvbnZlcnRlZCB0byBEYXRlIHVzaW5nIGB0b0RhdGVgLiBTZWUgW3RvRGF0ZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy90b0RhdGV9XG4gKiBJbnZhbGlkIERhdGUgaXMgYSBEYXRlLCB3aG9zZSB0aW1lIHZhbHVlIGlzIE5hTi5cbiAqXG4gKiBUaW1lIHZhbHVlIG9mIERhdGU6IGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuOS4xLjFcbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIC0gTm93IGBpc1ZhbGlkYCBkb2Vzbid0IHRocm93IGFuIGV4Y2VwdGlvblxuICogICBpZiB0aGUgZmlyc3QgYXJndW1lbnQgaXMgbm90IGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKiAgIEluc3RlYWQsIGFyZ3VtZW50IGlzIGNvbnZlcnRlZCBiZWZvcmVoYW5kIHVzaW5nIGB0b0RhdGVgLlxuICpcbiAqICAgRXhhbXBsZXM6XG4gKlxuICogICB8IGBpc1ZhbGlkYCBhcmd1bWVudCAgICAgICAgfCBCZWZvcmUgdjIuMC4wIHwgdjIuMC4wIG9ud2FyZCB8XG4gKiAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLXxcbiAqICAgfCBgbmV3IERhdGUoKWAgICAgICAgICAgICAgIHwgYHRydWVgICAgICAgICB8IGB0cnVlYCAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZSgnMjAxNi0wMS0wMScpYCAgfCBgdHJ1ZWAgICAgICAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKCcnKWAgICAgICAgICAgICB8IGBmYWxzZWAgICAgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgbmV3IERhdGUoMTQ4ODM3MDgzNTA4MSlgIHwgYHRydWVgICAgICAgICB8IGB0cnVlYCAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZShOYU4pYCAgICAgICAgICAgfCBgZmFsc2VgICAgICAgIHwgYGZhbHNlYCAgICAgICB8XG4gKiAgIHwgYCcyMDE2LTAxLTAxJ2AgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgJydgICAgICAgICAgICAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGAxNDg4MzcwODM1MDgxYCAgICAgICAgICAgfCBgVHlwZUVycm9yYCAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYE5hTmAgICAgICAgICAgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqXG4gKiAgIFdlIGludHJvZHVjZSB0aGlzIGNoYW5nZSB0byBtYWtlICpkYXRlLWZucyogY29uc2lzdGVudCB3aXRoIEVDTUFTY3JpcHQgYmVoYXZpb3JcbiAqICAgdGhhdCB0cnkgdG8gY29lcmNlIGFyZ3VtZW50cyB0byB0aGUgZXhwZWN0ZWQgdHlwZVxuICogICAod2hpY2ggaXMgYWxzbyB0aGUgY2FzZSB3aXRoIG90aGVyICpkYXRlLWZucyogZnVuY3Rpb25zKS5cbiAqXG4gKiBAcGFyYW0geyp9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlIGlzIHZhbGlkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgyMDE0LCAxLCAzMSkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWx1ZSwgY29udmVydGFibGUgaW50byBhIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKDEzOTM4MDQ4MDAwMDApXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSBpbnZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKCcnKSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1ZhbGlkKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcblxuICBpZiAoIWlzRGF0ZShkaXJ0eURhdGUpICYmIHR5cGVvZiBkaXJ0eURhdGUgIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgcmV0dXJuICFpc05hTihOdW1iZXIoZGF0ZSkpO1xufSIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIHNlY29uZCcsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiAnMSBzZWNvbmQnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIGhhbGZBTWludXRlOiAnaGFsZiBhIG1pbnV0ZScsXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBtaW51dGUnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJzEgbWludXRlJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgaG91cicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIG9uZTogJzEgaG91cicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSBkYXknLFxuICAgIG90aGVyOiAne3tjb3VudH19IGRheXMnXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB3ZWVrJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMSB3ZWVrJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBtb250aCcsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICB4TW9udGhzOiB7XG4gICAgb25lOiAnMSBtb250aCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICBhYm91dFhZZWFyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJzEgeWVhcicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICdvdmVyIDEgeWVhcicsXG4gICAgb3RoZXI6ICdvdmVyIHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgYWxtb3N0WFllYXJzOiB7XG4gICAgb25lOiAnYWxtb3N0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhbG1vc3Qge3tjb3VudH19IHllYXJzJ1xuICB9XG59O1xuXG52YXIgZm9ybWF0RGlzdGFuY2UgPSBmdW5jdGlvbiAodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gIHZhciByZXN1bHQ7XG4gIHZhciB0b2tlblZhbHVlID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuXG4gIGlmICh0eXBlb2YgdG9rZW5WYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vbmU7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudC50b1N0cmluZygpKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLmFkZFN1ZmZpeCkge1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gJiYgb3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuICdpbiAnICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJyBhZ28nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXREaXN0YW5jZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZEZvcm1hdExvbmdGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIC8vIFRPRE86IFJlbW92ZSBTdHJpbmcoKVxuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICB2YXIgZm9ybWF0ID0gYXJncy5mb3JtYXRzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHNbYXJncy5kZWZhdWx0V2lkdGhdO1xuICAgIHJldHVybiBmb3JtYXQ7XG4gIH07XG59IiwiaW1wb3J0IGJ1aWxkRm9ybWF0TG9uZ0ZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzXCI7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdFRUVFLCBNTU1NIGRvLCB5JyxcbiAgbG9uZzogJ01NTU0gZG8sIHknLFxuICBtZWRpdW06ICdNTU0gZCwgeScsXG4gIHNob3J0OiAnTU0vZGQveXl5eSdcbn07XG52YXIgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdoOm1tOnNzIGEgenp6eicsXG4gIGxvbmc6ICdoOm1tOnNzIGEgeicsXG4gIG1lZGl1bTogJ2g6bW06c3MgYScsXG4gIHNob3J0OiAnaDptbSBhJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBsb25nOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbWVkaXVtOiAne3tkYXRlfX0sIHt7dGltZX19JyxcbiAgc2hvcnQ6ICd7e2RhdGV9fSwge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwidmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogXCInbGFzdCcgZWVlZSAnYXQnIHBcIixcbiAgeWVzdGVyZGF5OiBcIid5ZXN0ZXJkYXkgYXQnIHBcIixcbiAgdG9kYXk6IFwiJ3RvZGF5IGF0JyBwXCIsXG4gIHRvbW9ycm93OiBcIid0b21vcnJvdyBhdCcgcFwiLFxuICBuZXh0V2VlazogXCJlZWVlICdhdCcgcFwiLFxuICBvdGhlcjogJ1AnXG59O1xuXG52YXIgZm9ybWF0UmVsYXRpdmUgPSBmdW5jdGlvbiAodG9rZW4sIF9kYXRlLCBfYmFzZURhdGUsIF9vcHRpb25zKSB7XG4gIHJldHVybiBmb3JtYXRSZWxhdGl2ZUxvY2FsZVt0b2tlbl07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXRSZWxhdGl2ZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZExvY2FsaXplRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpcnR5SW5kZXgsIGRpcnR5T3B0aW9ucykge1xuICAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICAgIHZhciBjb250ZXh0ID0gb3B0aW9ucy5jb250ZXh0ID8gU3RyaW5nKG9wdGlvbnMuY29udGV4dCkgOiAnc3RhbmRhbG9uZSc7XG4gICAgdmFyIHZhbHVlc0FycmF5O1xuXG4gICAgaWYgKGNvbnRleHQgPT09ICdmb3JtYXR0aW5nJyAmJiBhcmdzLmZvcm1hdHRpbmdWYWx1ZXMpIHtcbiAgICAgIHZhciBkZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRGb3JtYXR0aW5nV2lkdGggfHwgYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogZGVmYXVsdFdpZHRoO1xuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1tkZWZhdWx0V2lkdGhdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX2RlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdFdpZHRoO1xuXG4gICAgICB2YXIgX3dpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuXG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MudmFsdWVzW193aWR0aF0gfHwgYXJncy52YWx1ZXNbX2RlZmF1bHRXaWR0aF07XG4gICAgfVxuXG4gICAgdmFyIGluZGV4ID0gYXJncy5hcmd1bWVudENhbGxiYWNrID8gYXJncy5hcmd1bWVudENhbGxiYWNrKGRpcnR5SW5kZXgpIDogZGlydHlJbmRleDsgLy8gQHRzLWlnbm9yZTogRm9yIHNvbWUgcmVhc29uIFR5cGVTY3JpcHQganVzdCBkb24ndCB3YW50IHRvIG1hdGNoIGl0LCBubyBtYXR0ZXIgaG93IGhhcmQgd2UgdHJ5LiBJIGNoYWxsZW5nZSB5b3UgdG8gdHJ5IHRvIHJlbW92ZSBpdCFcblxuICAgIHJldHVybiB2YWx1ZXNBcnJheVtpbmRleF07XG4gIH07XG59IiwiaW1wb3J0IGJ1aWxkTG9jYWxpemVGbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanNcIjtcbnZhciBlcmFWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydCJywgJ0EnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnQkMnLCAnQUQnXSxcbiAgd2lkZTogWydCZWZvcmUgQ2hyaXN0JywgJ0Fubm8gRG9taW5pJ11cbn07XG52YXIgcXVhcnRlclZhbHVlcyA9IHtcbiAgbmFycm93OiBbJzEnLCAnMicsICczJywgJzQnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnUTEnLCAnUTInLCAnUTMnLCAnUTQnXSxcbiAgd2lkZTogWycxc3QgcXVhcnRlcicsICcybmQgcXVhcnRlcicsICczcmQgcXVhcnRlcicsICc0dGggcXVhcnRlciddXG59OyAvLyBOb3RlOiBpbiBFbmdsaXNoLCB0aGUgbmFtZXMgb2YgZGF5cyBvZiB0aGUgd2VlayBhbmQgbW9udGhzIGFyZSBjYXBpdGFsaXplZC5cbi8vIElmIHlvdSBhcmUgbWFraW5nIGEgbmV3IGxvY2FsZSBiYXNlZCBvbiB0aGlzIG9uZSwgY2hlY2sgaWYgdGhlIHNhbWUgaXMgdHJ1ZSBmb3IgdGhlIGxhbmd1YWdlIHlvdSdyZSB3b3JraW5nIG9uLlxuLy8gR2VuZXJhbGx5LCBmb3JtYXR0ZWQgZGF0ZXMgc2hvdWxkIGxvb2sgbGlrZSB0aGV5IGFyZSBpbiB0aGUgbWlkZGxlIG9mIGEgc2VudGVuY2UsXG4vLyBlLmcuIGluIFNwYW5pc2ggbGFuZ3VhZ2UgdGhlIHdlZWtkYXlzIGFuZCBtb250aHMgc2hvdWxkIGJlIGluIHRoZSBsb3dlcmNhc2UuXG5cbnZhciBtb250aFZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0onLCAnRicsICdNJywgJ0EnLCAnTScsICdKJywgJ0onLCAnQScsICdTJywgJ08nLCAnTicsICdEJ10sXG4gIGFiYnJldmlhdGVkOiBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09jdCcsICdOb3YnLCAnRGVjJ10sXG4gIHdpZGU6IFsnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLCAnSnVuZScsICdKdWx5JywgJ0F1Z3VzdCcsICdTZXB0ZW1iZXInLCAnT2N0b2JlcicsICdOb3ZlbWJlcicsICdEZWNlbWJlciddXG59O1xudmFyIGRheVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ1MnLCAnTScsICdUJywgJ1cnLCAnVCcsICdGJywgJ1MnXSxcbiAgc2hvcnQ6IFsnU3UnLCAnTW8nLCAnVHUnLCAnV2UnLCAnVGgnLCAnRnInLCAnU2EnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnU3VuJywgJ01vbicsICdUdWUnLCAnV2VkJywgJ1RodScsICdGcmknLCAnU2F0J10sXG4gIHdpZGU6IFsnU3VuZGF5JywgJ01vbmRheScsICdUdWVzZGF5JywgJ1dlZG5lc2RheScsICdUaHVyc2RheScsICdGcmlkYXknLCAnU2F0dXJkYXknXVxufTtcbnZhciBkYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfVxufTtcbnZhciBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ2EnLFxuICAgIHBtOiAncCcsXG4gICAgbWlkbmlnaHQ6ICdtaScsXG4gICAgbm9vbjogJ24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnYS5tLicsXG4gICAgcG06ICdwLm0uJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH1cbn07XG5cbnZhciBvcmRpbmFsTnVtYmVyID0gZnVuY3Rpb24gKGRpcnR5TnVtYmVyLCBfb3B0aW9ucykge1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTsgLy8gSWYgb3JkaW5hbCBudW1iZXJzIGRlcGVuZCBvbiBjb250ZXh0LCBmb3IgZXhhbXBsZSxcbiAgLy8gaWYgdGhleSBhcmUgZGlmZmVyZW50IGZvciBkaWZmZXJlbnQgZ3JhbW1hdGljYWwgZ2VuZGVycyxcbiAgLy8gdXNlIGBvcHRpb25zLnVuaXRgLlxuICAvL1xuICAvLyBgdW5pdGAgY2FuIGJlICd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXRlJywgJ2RheU9mWWVhcicsXG4gIC8vICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJy5cblxuICB2YXIgcmVtMTAwID0gbnVtYmVyICUgMTAwO1xuXG4gIGlmIChyZW0xMDAgPiAyMCB8fCByZW0xMDAgPCAxMCkge1xuICAgIHN3aXRjaCAocmVtMTAwICUgMTApIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdzdCc7XG5cbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICduZCc7XG5cbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdyZCc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bWJlciArICd0aCc7XG59O1xuXG52YXIgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXI6IG9yZGluYWxOdW1iZXIsXG4gIGVyYTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgYXJndW1lbnRDYWxsYmFjazogZnVuY3Rpb24gKHF1YXJ0ZXIpIHtcbiAgICAgIHJldHVybiBxdWFydGVyIC0gMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IG1vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXk6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBmb3JtYXR0aW5nVmFsdWVzOiBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRGb3JtYXR0aW5nV2lkdGg6ICd3aWRlJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsaXplOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGg7XG4gICAgdmFyIG1hdGNoUGF0dGVybiA9IHdpZHRoICYmIGFyZ3MubWF0Y2hQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5tYXRjaFBhdHRlcm5zW2FyZ3MuZGVmYXVsdE1hdGNoV2lkdGhdO1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChtYXRjaFBhdHRlcm4pO1xuXG4gICAgaWYgKCFtYXRjaFJlc3VsdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VQYXR0ZXJucyA9IHdpZHRoICYmIGFyZ3MucGFyc2VQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5wYXJzZVBhdHRlcm5zW2FyZ3MuZGVmYXVsdFBhcnNlV2lkdGhdO1xuICAgIHZhciBrZXkgPSBBcnJheS5pc0FycmF5KHBhcnNlUGF0dGVybnMpID8gZmluZEluZGV4KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpO1xuICAgIH0pIDogZmluZEtleShwYXJzZVBhdHRlcm5zLCBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICB9KTtcbiAgICB2YXIgdmFsdWU7XG4gICAgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2soa2V5KSA6IGtleTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YXIgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHJlc3RcbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KGtleSkgJiYgcHJlZGljYXRlKG9iamVjdFtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgPSAwOyBrZXkgPCBhcnJheS5sZW5ndGg7IGtleSsrKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufSIsImltcG9ydCBidWlsZE1hdGNoRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzXCI7XG5pbXBvcnQgYnVpbGRNYXRjaFBhdHRlcm5GbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzXCI7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKHRofHN0fG5kfHJkKT8vaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcbnZhciBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGJ8YSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGJcXC4/XFxzP2NcXC4/fGJcXC4/XFxzP2NcXC4/XFxzP2VcXC4/fGFcXC4/XFxzP2RcXC4/fGNcXC4/XFxzP2VcXC4/KS9pLFxuICB3aWRlOiAvXihiZWZvcmUgY2hyaXN0fGJlZm9yZSBjb21tb24gZXJhfGFubm8gZG9taW5pfGNvbW1vbiBlcmEpL2lcbn07XG52YXIgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL15iL2ksIC9eKGF8YykvaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9ecVsxMjM0XS9pLFxuICB3aWRlOiAvXlsxMjM0XSh0aHxzdHxuZHxyZCk/IHF1YXJ0ZXIvaVxufTtcbnZhciBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbLzEvaSwgLzIvaSwgLzMvaSwgLzQvaV1cbn07XG52YXIgbWF0Y2hNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW2pmbWFzb25kXS9pLFxuICBhYmJyZXZpYXRlZDogL14oamFufGZlYnxtYXJ8YXByfG1heXxqdW58anVsfGF1Z3xzZXB8b2N0fG5vdnxkZWMpL2ksXG4gIHdpZGU6IC9eKGphbnVhcnl8ZmVicnVhcnl8bWFyY2h8YXByaWx8bWF5fGp1bmV8anVseXxhdWd1c3R8c2VwdGVtYmVyfG9jdG9iZXJ8bm92ZW1iZXJ8ZGVjZW1iZXIpL2lcbn07XG52YXIgcGFyc2VNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXmovaSwgL15mL2ksIC9ebS9pLCAvXmEvaSwgL15tL2ksIC9eai9pLCAvXmovaSwgL15hL2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXSxcbiAgYW55OiBbL15qYS9pLCAvXmYvaSwgL15tYXIvaSwgL15hcC9pLCAvXm1heS9pLCAvXmp1bi9pLCAvXmp1bC9pLCAvXmF1L2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXVxufTtcbnZhciBtYXRjaERheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW3NtdHdmXS9pLFxuICBzaG9ydDogL14oc3V8bW98dHV8d2V8dGh8ZnJ8c2EpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihzdW58bW9ufHR1ZXx3ZWR8dGh1fGZyaXxzYXQpL2ksXG4gIHdpZGU6IC9eKHN1bmRheXxtb25kYXl8dHVlc2RheXx3ZWRuZXNkYXl8dGh1cnNkYXl8ZnJpZGF5fHNhdHVyZGF5KS9pXG59O1xudmFyIHBhcnNlRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9ecy9pLCAvXm0vaSwgL150L2ksIC9edy9pLCAvXnQvaSwgL15mL2ksIC9ecy9pXSxcbiAgYW55OiBbL15zdS9pLCAvXm0vaSwgL150dS9pLCAvXncvaSwgL150aC9pLCAvXmYvaSwgL15zYS9pXVxufTtcbnZhciBtYXRjaERheVBlcmlvZFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGF8cHxtaXxufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaSxcbiAgYW55OiAvXihbYXBdXFwuP1xccz9tXFwuP3xtaWRuaWdodHxub29ufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaVxufTtcbnZhciBwYXJzZURheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IHtcbiAgICBhbTogL15hL2ksXG4gICAgcG06IC9ecC9pLFxuICAgIG1pZG5pZ2h0OiAvXm1pL2ksXG4gICAgbm9vbjogL15uby9pLFxuICAgIG1vcm5pbmc6IC9tb3JuaW5nL2ksXG4gICAgYWZ0ZXJub29uOiAvYWZ0ZXJub29uL2ksXG4gICAgZXZlbmluZzogL2V2ZW5pbmcvaSxcbiAgICBuaWdodDogL25pZ2h0L2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5tYXRjaFBhdHRlcm4pO1xuICAgIGlmICghbWF0Y2hSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtYXRjaGVkU3RyaW5nID0gbWF0Y2hSZXN1bHRbMF07XG4gICAgdmFyIHBhcnNlUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MucGFyc2VQYXR0ZXJuKTtcbiAgICBpZiAoIXBhcnNlUmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2socGFyc2VSZXN1bHRbMF0pIDogcGFyc2VSZXN1bHRbMF07XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2sgPyBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG4gICAgdmFyIHJlc3QgPSBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiByZXN0XG4gICAgfTtcbiAgfTtcbn0iLCJpbXBvcnQgZm9ybWF0RGlzdGFuY2UgZnJvbSBcIi4vX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSBcIi4vX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0UmVsYXRpdmUgZnJvbSBcIi4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGxvY2FsaXplIGZyb20gXCIuL19saWIvbG9jYWxpemUvaW5kZXguanNcIjtcbmltcG9ydCBtYXRjaCBmcm9tIFwiLi9fbGliL21hdGNoL2luZGV4LmpzXCI7XG5cbi8qKlxuICogQHR5cGUge0xvY2FsZX1cbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBFbmdsaXNoIGxvY2FsZSAoVW5pdGVkIFN0YXRlcykuXG4gKiBAbGFuZ3VhZ2UgRW5nbGlzaFxuICogQGlzby02MzktMiBlbmdcbiAqIEBhdXRob3IgU2FzaGEgS29zcyBbQGtvc3Nub2NvcnBde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9rb3Nzbm9jb3JwfVxuICogQGF1dGhvciBMZXNoYSBLb3NzIFtAbGVzaGFrb3NzXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbGVzaGFrb3NzfVxuICovXG52YXIgbG9jYWxlID0ge1xuICBjb2RlOiAnZW4tVVMnLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDBcbiAgICAvKiBTdW5kYXkgKi9cbiAgICAsXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiAxXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgYWRkTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBhZGRlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBZGQgNzUwIG1pbGxpc2Vjb25kcyB0byAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogY29uc3QgcmVzdWx0ID0gYWRkTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MzAuNzUwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciB0aW1lc3RhbXAgPSB0b0RhdGUoZGlydHlEYXRlKS5nZXRUaW1lKCk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wICsgYW1vdW50KTtcbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IGFkZE1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBzdWJNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBiZSBzdWJ0cmFjdGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBzdWJ0cmFjdGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFN1YnRyYWN0IDc1MCBtaWxsaXNlY29uZHMgZnJvbSAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogY29uc3QgcmVzdWx0ID0gc3ViTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MjkuMjUwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ViTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gYWRkTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgLWFtb3VudCk7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fREFZID0gODY0MDAwMDA7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENEYXlPZlllYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mWWVhclRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICB2YXIgZGlmZmVyZW5jZSA9IHRpbWVzdGFtcCAtIHN0YXJ0T2ZZZWFyVGltZXN0YW1wO1xuICByZXR1cm4gTWF0aC5mbG9vcihkaWZmZXJlbmNlIC8gTUlMTElTRUNPTkRTX0lOX0RBWSkgKyAxO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2VlayhkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSAxO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgdmFyIGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uO1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSBkaWZmKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0VVRDRnVsbFllYXIoeWVhciArIDEsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhcik7XG4gIHZhciBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyKTtcblxuICBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59IiwiaW1wb3J0IGdldFVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgeWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSk7XG4gIHZhciBmb3VydGhPZkphbnVhcnkgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2VlayhkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkaWZmID0gc3RhcnRPZlVUQ0lTT1dlZWsoZGF0ZSkuZ2V0VGltZSgpIC0gc3RhcnRPZlVUQ0lTT1dlZWtZZWFyKGRhdGUpLmdldFRpbWUoKTsgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcblxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDV2VlayhkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgdmFyIGxvY2FsZVdlZWtTdGFydHNPbiA9IGxvY2FsZSAmJiBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy53ZWVrU3RhcnRzT247XG4gIHZhciBkZWZhdWx0V2Vla1N0YXJ0c09uID0gbG9jYWxlV2Vla1N0YXJ0c09uID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGxvY2FsZVdlZWtTdGFydHNPbik7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSBvcHRpb25zLndlZWtTdGFydHNPbiA9PSBudWxsID8gZGVmYXVsdFdlZWtTdGFydHNPbiA6IHRvSW50ZWdlcihvcHRpb25zLndlZWtTdGFydHNPbik7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZSAmJiBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU7XG4gIHZhciBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyAxIDogdG9JbnRlZ2VyKGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA6IHRvSW50ZWdlcihvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGZpcnN0V2Vla09mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrT2ZOZXh0WWVhci5zZXRVVENGdWxsWWVhcih5ZWFyICsgMSwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZOZXh0WWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZOZXh0WWVhciA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2Vla09mTmV4dFllYXIsIGRpcnR5T3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWtPZlRoaXNZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2Vla09mVGhpc1llYXIsIGRpcnR5T3B0aW9ucyk7XG5cbiAgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufSIsImltcG9ydCBnZXRVVENXZWVrWWVhciBmcm9tIFwiLi4vZ2V0VVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDV2Vla1llYXIoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGU7XG4gIHZhciBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGUgJiYgbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlO1xuICB2YXIgZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gMSA6IHRvSW50ZWdlcihsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgOiB0b0ludGVnZXIob3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpO1xuICB2YXIgeWVhciA9IGdldFVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgZGlydHlPcHRpb25zKTtcbiAgdmFyIGZpcnN0V2VlayA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWsuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgZGF0ZSA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2VlaywgZGlydHlPcHRpb25zKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWtZZWFyIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDV2VlayhkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkaWZmID0gc3RhcnRPZlVUQ1dlZWsoZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpIC0gc3RhcnRPZlVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpLmdldFRpbWUoKTsgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcblxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRMZWFkaW5nWmVyb3MobnVtYmVyLCB0YXJnZXRMZW5ndGgpIHtcbiAgdmFyIHNpZ24gPSBudW1iZXIgPCAwID8gJy0nIDogJyc7XG4gIHZhciBvdXRwdXQgPSBNYXRoLmFicyhudW1iZXIpLnRvU3RyaW5nKCk7XG5cbiAgd2hpbGUgKG91dHB1dC5sZW5ndGggPCB0YXJnZXRMZW5ndGgpIHtcbiAgICBvdXRwdXQgPSAnMCcgKyBvdXRwdXQ7XG4gIH1cblxuICByZXR1cm4gc2lnbiArIG91dHB1dDtcbn0iLCJpbXBvcnQgYWRkTGVhZGluZ1plcm9zIGZyb20gXCIuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanNcIjtcbi8qXG4gKiB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8ICBhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBBKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBkICB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICB8ICBEICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBoICB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICB8ICBIICB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBtICB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBNICB8IE1vbnRoICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBzICB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICB8ICBTICB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICB8XG4gKiB8ICB5ICB8IFllYXIgKGFicykgICAgICAgICAgICAgICAgICAgICB8ICBZICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgKiBhcmUgbm90IGltcGxlbWVudGVkIGJ1dCByZXNlcnZlZCBieSBVbmljb2RlIHN0YW5kYXJkLlxuICovXG5cbnZhciBmb3JtYXR0ZXJzID0ge1xuICAvLyBZZWFyXG4gIHk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIC8vIEZyb20gaHR0cDovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS0zMS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9Gb3JtYXRfdG9rZW5zXG4gICAgLy8gfCBZZWFyICAgICB8ICAgICB5IHwgeXkgfCAgIHl5eSB8ICB5eXl5IHwgeXl5eXkgfFxuICAgIC8vIHwtLS0tLS0tLS0tfC0tLS0tLS18LS0tLXwtLS0tLS0tfC0tLS0tLS18LS0tLS0tLXxcbiAgICAvLyB8IEFEIDEgICAgIHwgICAgIDEgfCAwMSB8ICAgMDAxIHwgIDAwMDEgfCAwMDAwMSB8XG4gICAgLy8gfCBBRCAxMiAgICB8ICAgIDEyIHwgMTIgfCAgIDAxMiB8ICAwMDEyIHwgMDAwMTIgfFxuICAgIC8vIHwgQUQgMTIzICAgfCAgIDEyMyB8IDIzIHwgICAxMjMgfCAgMDEyMyB8IDAwMTIzIHxcbiAgICAvLyB8IEFEIDEyMzQgIHwgIDEyMzQgfCAzNCB8ICAxMjM0IHwgIDEyMzQgfCAwMTIzNCB8XG4gICAgLy8gfCBBRCAxMjM0NSB8IDEyMzQ1IHwgNDUgfCAxMjM0NSB8IDEyMzQ1IHwgMTIzNDUgfFxuICAgIHZhciBzaWduZWRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgdmFyIHllYXIgPSBzaWduZWRZZWFyID4gMCA/IHNpZ25lZFllYXIgOiAxIC0gc2lnbmVkWWVhcjtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRva2VuID09PSAneXknID8geWVhciAlIDEwMCA6IHllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1vbnRoXG4gIE06IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICByZXR1cm4gdG9rZW4gPT09ICdNJyA/IFN0cmluZyhtb250aCArIDEpIDogYWRkTGVhZGluZ1plcm9zKG1vbnRoICsgMSwgMik7XG4gIH0sXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZDogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ0RhdGUoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gQU0gb3IgUE1cbiAgYTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRhdGUuZ2V0VVRDSG91cnMoKSAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgY2FzZSAnYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2FhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWU7XG5cbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZVswXTtcblxuICAgICAgY2FzZSAnYWFhYSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlID09PSAnYW0nID8gJ2EubS4nIDogJ3AubS4nO1xuICAgIH1cbiAgfSxcbiAgLy8gSG91ciBbMS0xMl1cbiAgaDogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMiB8fCAxMiwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ0hvdXJzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDTWludXRlcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBTZWNvbmRcbiAgczogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ1NlY29uZHMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRnJhY3Rpb24gb2Ygc2Vjb25kXG4gIFM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBudW1iZXJPZkRpZ2l0cyA9IHRva2VuLmxlbmd0aDtcbiAgICB2YXIgbWlsbGlzZWNvbmRzID0gZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgICB2YXIgZnJhY3Rpb25hbFNlY29uZHMgPSBNYXRoLmZsb29yKG1pbGxpc2Vjb25kcyAqIE1hdGgucG93KDEwLCBudW1iZXJPZkRpZ2l0cyAtIDMpKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGZyYWN0aW9uYWxTZWNvbmRzLCB0b2tlbi5sZW5ndGgpO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0dGVyczsiLCJpbXBvcnQgZ2V0VVRDRGF5T2ZZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0RheU9mWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ0lTT1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDV2VlayBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBhZGRMZWFkaW5nWmVyb3MgZnJvbSBcIi4uLy4uL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qc1wiO1xuaW1wb3J0IGxpZ2h0Rm9ybWF0dGVycyBmcm9tIFwiLi4vbGlnaHRGb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG52YXIgZGF5UGVyaW9kRW51bSA9IHtcbiAgYW06ICdhbScsXG4gIHBtOiAncG0nLFxuICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgbm9vbjogJ25vb24nLFxuICBtb3JuaW5nOiAnbW9ybmluZycsXG4gIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgbmlnaHQ6ICduaWdodCdcbn07XG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCBNaWxsaXNlY29uZHMgaW4gZGF5ICAgICAgICAgICAgfFxuICogfCAgYiAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgfCAgQiAgfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgfFxuICogfCAgYyAgfCBTdGFuZC1hbG9uZSBsb2NhbCBkYXkgb2Ygd2VlayAgfCAgQyogfCBMb2NhbGl6ZWQgaG91ciB3LyBkYXkgcGVyaW9kICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZSAgfCBMb2NhbCBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgfCAgRSAgfCBEYXkgb2Ygd2VlayAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgRiogfCBEYXkgb2Ygd2VlayBpbiBtb250aCAgICAgICAgICAgfFxuICogfCAgZyogfCBNb2RpZmllZCBKdWxpYW4gZGF5ICAgICAgICAgICAgfCAgRyAgfCBFcmEgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaSEgfCBJU08gZGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgfCAgSSEgfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgfFxuICogfCAgaiogfCBMb2NhbGl6ZWQgaG91ciB3LyBkYXkgcGVyaW9kICAgfCAgSiogfCBMb2NhbGl6ZWQgaG91ciB3L28gZGF5IHBlcmlvZCAgfFxuICogfCAgayAgfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgfCAgSyAgfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbCogfCAoZGVwcmVjYXRlZCkgICAgICAgICAgICAgICAgICAgfCAgTCAgfCBTdGFuZC1hbG9uZSBtb250aCAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbyEgfCBPcmRpbmFsIG51bWJlciBtb2RpZmllciAgICAgICAgfCAgTyAgfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgfFxuICogfCAgcCEgfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgfCAgUCEgfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgfFxuICogfCAgcSAgfCBTdGFuZC1hbG9uZSBxdWFydGVyICAgICAgICAgICAgfCAgUSAgfCBRdWFydGVyICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgciogfCBSZWxhdGVkIEdyZWdvcmlhbiB5ZWFyICAgICAgICAgfCAgUiEgfCBJU08gd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgdCEgfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgfCAgVCEgfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgfFxuICogfCAgdSAgfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgfCAgVSogfCBDeWNsaWMgeWVhciAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgdiogfCBUaW1lem9uZSAoZ2VuZXJpYyBub24tbG9jYXQuKSAgfCAgViogfCBUaW1lem9uZSAobG9jYXRpb24pICAgICAgICAgICAgfFxuICogfCAgdyAgfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgfCAgVyogfCBXZWVrIG9mIG1vbnRoICAgICAgICAgICAgICAgICAgfFxuICogfCAgeCAgfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgfCAgWCAgfCBUaW1lem9uZSAoSVNPLTg2MDEpICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgfFxuICogfCAgeiAgfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgfCAgWiogfCBUaW1lem9uZSAoYWxpYXNlcykgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAhIGFyZSBub24tc3RhbmRhcmQsIGJ1dCBpbXBsZW1lbnRlZCBieSBkYXRlLWZuczpcbiAqIC0gYG9gIG1vZGlmaWVzIHRoZSBwcmV2aW91cyB0b2tlbiB0byB0dXJuIGl0IGludG8gYW4gb3JkaW5hbCAoc2VlIGBmb3JtYXRgIGRvY3MpXG4gKiAtIGBpYCBpcyBJU08gZGF5IG9mIHdlZWsuIEZvciBgaWAgYW5kIGBpaWAgaXMgcmV0dXJucyBudW1lcmljIElTTyB3ZWVrIGRheXMsXG4gKiAgIGkuZS4gNyBmb3IgU3VuZGF5LCAxIGZvciBNb25kYXksIGV0Yy5cbiAqIC0gYElgIGlzIElTTyB3ZWVrIG9mIHllYXIsIGFzIG9wcG9zZWQgdG8gYHdgIHdoaWNoIGlzIGxvY2FsIHdlZWsgb2YgeWVhci5cbiAqIC0gYFJgIGlzIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyLCBhcyBvcHBvc2VkIHRvIGBZYCB3aGljaCBpcyBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyLlxuICogICBgUmAgaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGBJYCBhbmQgYGlgXG4gKiAgIGZvciB1bml2ZXJzYWwgSVNPIHdlZWstbnVtYmVyaW5nIGRhdGUsIHdoZXJlYXNcbiAqICAgYFlgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgd2AgYW5kIGBlYFxuICogICBmb3Igd2Vlay1udW1iZXJpbmcgZGF0ZSBzcGVjaWZpYyB0byB0aGUgbG9jYWxlLlxuICogLSBgUGAgaXMgbG9uZyBsb2NhbGl6ZWQgZGF0ZSBmb3JtYXRcbiAqIC0gYHBgIGlzIGxvbmcgbG9jYWxpemVkIHRpbWUgZm9ybWF0XG4gKi9cblxudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIEVyYVxuICBHOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGVyYSA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKSA+IDAgPyAxIDogMDtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEFELCBCQ1xuICAgICAgY2FzZSAnRyc6XG4gICAgICBjYXNlICdHRyc6XG4gICAgICBjYXNlICdHR0cnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnXG4gICAgICAgIH0pO1xuICAgICAgLy8gQSwgQlxuXG4gICAgICBjYXNlICdHR0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnXG4gICAgICAgIH0pO1xuICAgICAgLy8gQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3RcblxuICAgICAgY2FzZSAnR0dHRyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBZZWFyXG4gIHk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICAvLyBPcmRpbmFsIG51bWJlclxuICAgIGlmICh0b2tlbiA9PT0gJ3lvJykge1xuICAgICAgdmFyIHNpZ25lZFllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7IC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG5cbiAgICAgIHZhciB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih5ZWFyLCB7XG4gICAgICAgIHVuaXQ6ICd5ZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy55KGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhclxuICBZOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIHNpZ25lZFdlZWtZZWFyID0gZ2V0VVRDV2Vla1llYXIoZGF0ZSwgb3B0aW9ucyk7IC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG5cbiAgICB2YXIgd2Vla1llYXIgPSBzaWduZWRXZWVrWWVhciA+IDAgPyBzaWduZWRXZWVrWWVhciA6IDEgLSBzaWduZWRXZWVrWWVhcjsgLy8gVHdvIGRpZ2l0IHllYXJcblxuICAgIGlmICh0b2tlbiA9PT0gJ1lZJykge1xuICAgICAgdmFyIHR3b0RpZ2l0WWVhciA9IHdlZWtZZWFyICUgMTAwO1xuICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0d29EaWdpdFllYXIsIDIpO1xuICAgIH0gLy8gT3JkaW5hbCBudW1iZXJcblxuXG4gICAgaWYgKHRva2VuID09PSAnWW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih3ZWVrWWVhciwge1xuICAgICAgICB1bml0OiAneWVhcidcbiAgICAgIH0pO1xuICAgIH0gLy8gUGFkZGluZ1xuXG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHdlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICBSOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgaXNvV2Vla1llYXIgPSBnZXRVVENJU09XZWVrWWVhcihkYXRlKTsgLy8gUGFkZGluZ1xuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRXh0ZW5kZWQgeWVhci4gVGhpcyBpcyBhIHNpbmdsZSBudW1iZXIgZGVzaWduYXRpbmcgdGhlIHllYXIgb2YgdGhpcyBjYWxlbmRhciBzeXN0ZW0uXG4gIC8vIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiBgeWAgYW5kIGB1YCBsb2NhbGl6ZXJzIGFyZSBCLkMuIHllYXJzOlxuICAvLyB8IFllYXIgfCBgeWAgfCBgdWAgfFxuICAvLyB8LS0tLS0tfC0tLS0tfC0tLS0tfFxuICAvLyB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICAvLyB8IEJDIDEgfCAgIDEgfCAgIDAgfFxuICAvLyB8IEJDIDIgfCAgIDIgfCAgLTEgfFxuICAvLyBBbHNvIGB5eWAgYWx3YXlzIHJldHVybnMgdGhlIGxhc3QgdHdvIGRpZ2l0cyBvZiBhIHllYXIsXG4gIC8vIHdoaWxlIGB1dWAgcGFkcyBzaW5nbGUgZGlnaXQgeWVhcnMgdG8gMiBjaGFyYWN0ZXJzIGFuZCByZXR1cm5zIG90aGVyIHllYXJzIHVuY2hhbmdlZC5cbiAgdTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBRdWFydGVyXG4gIFE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgcXVhcnRlciA9IE1hdGguY2VpbCgoZGF0ZS5nZXRVVENNb250aCgpICsgMSkgLyAzKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgIGNhc2UgJ1EnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKHF1YXJ0ZXIpO1xuICAgICAgLy8gMDEsIDAyLCAwMywgMDRcblxuICAgICAgY2FzZSAnUVEnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG5cbiAgICAgIGNhc2UgJ1FvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwge1xuICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG5cbiAgICAgIGNhc2UgJ1FRUSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcblxuICAgICAgY2FzZSAnUVFRUVEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG5cbiAgICAgIGNhc2UgJ1FRUVEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgcXVhcnRlclxuICBxOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdxJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG5cbiAgICAgIGNhc2UgJ3FxJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuXG4gICAgICBjYXNlICdxbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuXG4gICAgICBjYXNlICdxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG5cbiAgICAgIGNhc2UgJ3FxcXFxJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuXG4gICAgICBjYXNlICdxcXFxJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIE1vbnRoXG4gIE06IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdNJzpcbiAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5NKGRhdGUsIHRva2VuKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcblxuICAgICAgY2FzZSAnTW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHtcbiAgICAgICAgICB1bml0OiAnbW9udGgnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG5cbiAgICAgIGNhc2UgJ01NTSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEosIEYsIC4uLiwgRFxuXG4gICAgICBjYXNlICdNTU1NTSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuXG4gICAgICBjYXNlICdNTU1NJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbW9udGhcbiAgTDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIC4uLiwgMTJcbiAgICAgIGNhc2UgJ0wnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKG1vbnRoICsgMSk7XG4gICAgICAvLyAwMSwgMDIsIC4uLiwgMTJcblxuICAgICAgY2FzZSAnTEwnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKG1vbnRoICsgMSwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG5cbiAgICAgIGNhc2UgJ0xvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobW9udGggKyAxLCB7XG4gICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuXG4gICAgICBjYXNlICdMTEwnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKLCBGLCAuLi4sIERcblxuICAgICAgY2FzZSAnTExMTEwnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcblxuICAgICAgY2FzZSAnTExMTCc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIExvY2FsIHdlZWsgb2YgeWVhclxuICB3OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIHdlZWsgPSBnZXRVVENXZWVrKGRhdGUsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHRva2VuID09PSAnd28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih3ZWVrLCB7XG4gICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh3ZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBJU08gd2VlayBvZiB5ZWFyXG4gIEk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaXNvV2VlayA9IGdldFVUQ0lTT1dlZWsoZGF0ZSk7XG5cbiAgICBpZiAodG9rZW4gPT09ICdJbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb1dlZWssIHtcbiAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWssIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ2RvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENEYXRlKCksIHtcbiAgICAgICAgdW5pdDogJ2RhdGUnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLmQoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBEYXkgb2YgeWVhclxuICBEOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mWWVhciA9IGdldFVUQ0RheU9mWWVhcihkYXRlKTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ0RvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF5T2ZZZWFyLCB7XG4gICAgICAgIHVuaXQ6ICdkYXlPZlllYXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRheU9mWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHdlZWtcbiAgRTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gVHVlXG4gICAgICBjYXNlICdFJzpcbiAgICAgIGNhc2UgJ0VFJzpcbiAgICAgIGNhc2UgJ0VFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdFRUVFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ0VFRUVFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdFRUVFJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBMb2NhbCBkYXkgb2Ygd2Vla1xuICBlOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGxvY2FsRGF5T2ZXZWVrID0gKGRheU9mV2VlayAtIG9wdGlvbnMud2Vla1N0YXJ0c09uICsgOCkgJSA3IHx8IDc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBOdW1lcmljYWwgdmFsdWUgKE50aCBkYXkgb2Ygd2VlayB3aXRoIGN1cnJlbnQgbG9jYWxlIG9yIHdlZWtTdGFydHNPbilcbiAgICAgIGNhc2UgJ2UnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcblxuICAgICAgY2FzZSAnZWUnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGxvY2FsRGF5T2ZXZWVrLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuXG4gICAgICBjYXNlICdlbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2VlZSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdlZWVlZSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2VlZWVlZSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdlZWVlJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBsb2NhbCBkYXkgb2Ygd2Vla1xuICBjOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGxvY2FsRGF5T2ZXZWVrID0gKGRheU9mV2VlayAtIG9wdGlvbnMud2Vla1N0YXJ0c09uICsgOCkgJSA3IHx8IDc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBOdW1lcmljYWwgdmFsdWUgKHNhbWUgYXMgaW4gYGVgKVxuICAgICAgY2FzZSAnYyc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobG9jYWxEYXlPZldlZWspO1xuICAgICAgLy8gUGFkZGVkIG51bWVyaWNhbCB2YWx1ZVxuXG4gICAgICBjYXNlICdjYyc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobG9jYWxEYXlPZldlZWssIHRva2VuLmxlbmd0aCk7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcblxuICAgICAgY2FzZSAnY28nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihsb2NhbERheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnY2NjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdjY2NjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnY2NjYyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gSVNPIGRheSBvZiB3ZWVrXG4gIGk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgaXNvRGF5T2ZXZWVrID0gZGF5T2ZXZWVrID09PSAwID8gNyA6IGRheU9mV2VlaztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDJcbiAgICAgIGNhc2UgJ2knOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGlzb0RheU9mV2Vlayk7XG4gICAgICAvLyAwMlxuXG4gICAgICBjYXNlICdpaSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvRGF5T2ZXZWVrLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgLy8gMm5kXG5cbiAgICAgIGNhc2UgJ2lvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVcblxuICAgICAgY2FzZSAnaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2lpaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnaWlpaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2lpaWknOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZSA9IGhvdXJzIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYSc6XG4gICAgICBjYXNlICdhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdhYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICBjYXNlICdhYWFhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYWFhYSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gQU0sIFBNLCBtaWRuaWdodCwgbm9vblxuICBiOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWU7XG5cbiAgICBpZiAoaG91cnMgPT09IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5vb247XG4gICAgfSBlbHNlIGlmIChob3VycyA9PT0gMCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5taWRuaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYic6XG4gICAgICBjYXNlICdiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdiYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICBjYXNlICdiYmJiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYmJiYic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gaW4gdGhlIG1vcm5pbmcsIGluIHRoZSBhZnRlcm5vb24sIGluIHRoZSBldmVuaW5nLCBhdCBuaWdodFxuICBCOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWU7XG5cbiAgICBpZiAoaG91cnMgPj0gMTcpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uZXZlbmluZztcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmFmdGVybm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDQpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubW9ybmluZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5uaWdodDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdCJzpcbiAgICAgIGNhc2UgJ0JCJzpcbiAgICAgIGNhc2UgJ0JCQic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdCQkJCQic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnQkJCQic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gSG91ciBbMS0xMl1cbiAgaDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ2hvJykge1xuICAgICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG4gICAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMTI7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuaChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdIbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDSG91cnMoKSwge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuSChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMTFdXG4gIEs6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMjtcblxuICAgIGlmICh0b2tlbiA9PT0gJ0tvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGhvdXJzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBIb3VyIFsxLTI0XVxuICBrOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIGlmIChob3VycyA9PT0gMCkgaG91cnMgPSAyNDtcblxuICAgIGlmICh0b2tlbiA9PT0gJ2tvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGhvdXJzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ21vJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENNaW51dGVzKCksIHtcbiAgICAgICAgdW5pdDogJ21pbnV0ZSdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMubShkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIFNlY29uZFxuICBzOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnc28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ1NlY29uZHMoKSwge1xuICAgICAgICB1bml0OiAnc2Vjb25kJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5zKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gRnJhY3Rpb24gb2Ygc2Vjb25kXG4gIFM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuUyhkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gSWYgb2Zmc2V0IGlzIDAsIG91dHB1dCBpcyBhbHdheXMgYCdaJ2ApXG4gIFg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgaWYgKHRpbWV6b25lT2Zmc2V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gJ1onO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICdYJzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWGBcblxuICAgICAgY2FzZSAnWFhYWCc6XG4gICAgICBjYXNlICdYWCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhYYFxuXG4gICAgICBjYXNlICdYWFhYWCc6XG4gICAgICBjYXNlICdYWFgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGAnKzAwOjAwJ2Agb3IgZXF1aXZhbGVudClcbiAgeDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBIb3VycyBhbmQgb3B0aW9uYWwgbWludXRlc1xuICAgICAgY2FzZSAneCc6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXModGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgeHhgXG5cbiAgICAgIGNhc2UgJ3h4eHgnOlxuICAgICAgY2FzZSAneHgnOlxuICAgICAgICAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4eGBcblxuICAgICAgY2FzZSAneHh4eHgnOlxuICAgICAgY2FzZSAneHh4JzogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aCBgOmAgZGVsaW1pdGVyXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChHTVQpXG4gIE86IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gU2hvcnRcbiAgICAgIGNhc2UgJ08nOlxuICAgICAgY2FzZSAnT08nOlxuICAgICAgY2FzZSAnT09PJzpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmVTaG9ydCh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICAgIC8vIExvbmdcblxuICAgICAgY2FzZSAnT09PTyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXRpb24pXG4gIHo6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gU2hvcnRcbiAgICAgIGNhc2UgJ3onOlxuICAgICAgY2FzZSAnenonOlxuICAgICAgY2FzZSAnenp6JzpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmVTaG9ydCh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICAgIC8vIExvbmdcblxuICAgICAgY2FzZSAnenp6eic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFNlY29uZHMgdGltZXN0YW1wXG4gIHQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCkgLyAxMDAwKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICBUOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXN0YW1wID0gb3JpZ2luYWxEYXRlLmdldFRpbWUoKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVTaG9ydChvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9IE1hdGguZmxvb3IoYWJzT2Zmc2V0IC8gNjApO1xuICB2YXIgbWludXRlcyA9IGFic09mZnNldCAlIDYwO1xuXG4gIGlmIChtaW51dGVzID09PSAwKSB7XG4gICAgcmV0dXJuIHNpZ24gKyBTdHJpbmcoaG91cnMpO1xuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICByZXR1cm4gc2lnbiArIFN0cmluZyhob3VycykgKyBkZWxpbWl0ZXIgKyBhZGRMZWFkaW5nWmVyb3MobWludXRlcywgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyhvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIGlmIChvZmZzZXQgJSA2MCA9PT0gMCkge1xuICAgIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgICByZXR1cm4gc2lnbiArIGFkZExlYWRpbmdaZXJvcyhNYXRoLmFicyhvZmZzZXQpIC8gNjAsIDIpO1xuICB9XG5cbiAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIHZhciBkZWxpbWl0ZXIgPSBkaXJ0eURlbGltaXRlciB8fCAnJztcbiAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICB2YXIgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgdmFyIGhvdXJzID0gYWRkTGVhZGluZ1plcm9zKE1hdGguZmxvb3IoYWJzT2Zmc2V0IC8gNjApLCAyKTtcbiAgdmFyIG1pbnV0ZXMgPSBhZGRMZWFkaW5nWmVyb3MoYWJzT2Zmc2V0ICUgNjAsIDIpO1xuICByZXR1cm4gc2lnbiArIGhvdXJzICsgZGVsaW1pdGVyICsgbWludXRlcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0dGVyczsiLCJmdW5jdGlvbiBkYXRlTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgJ1AnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ1BQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ1BQUFAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdwcCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwcCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdwcHBwJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRhdGVUaW1lTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHZhciBtYXRjaFJlc3VsdCA9IHBhdHRlcm4ubWF0Y2goLyhQKykocCspPy8pIHx8IFtdO1xuICB2YXIgZGF0ZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsxXTtcbiAgdmFyIHRpbWVQYXR0ZXJuID0gbWF0Y2hSZXN1bHRbMl07XG5cbiAgaWYgKCF0aW1lUGF0dGVybikge1xuICAgIHJldHVybiBkYXRlTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKTtcbiAgfVxuXG4gIHZhciBkYXRlVGltZUZvcm1hdDtcblxuICBzd2l0Y2ggKGRhdGVQYXR0ZXJuKSB7XG4gICAgY2FzZSAnUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1BQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1BQUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFBQUCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gZGF0ZVRpbWVGb3JtYXQucmVwbGFjZSgne3tkYXRlfX0nLCBkYXRlTG9uZ0Zvcm1hdHRlcihkYXRlUGF0dGVybiwgZm9ybWF0TG9uZykpLnJlcGxhY2UoJ3t7dGltZX19JywgdGltZUxvbmdGb3JtYXR0ZXIodGltZVBhdHRlcm4sIGZvcm1hdExvbmcpKTtcbn1cblxudmFyIGxvbmdGb3JtYXR0ZXJzID0ge1xuICBwOiB0aW1lTG9uZ0Zvcm1hdHRlcixcbiAgUDogZGF0ZVRpbWVMb25nRm9ybWF0dGVyXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9uZ0Zvcm1hdHRlcnM7IiwiLyoqXG4gKiBHb29nbGUgQ2hyb21lIGFzIG9mIDY3LjAuMzM5Ni44NyBpbnRyb2R1Y2VkIHRpbWV6b25lcyB3aXRoIG9mZnNldCB0aGF0IGluY2x1ZGVzIHNlY29uZHMuXG4gKiBUaGV5IHVzdWFsbHkgYXBwZWFyIGZvciBkYXRlcyB0aGF0IGRlbm90ZSB0aW1lIGJlZm9yZSB0aGUgdGltZXpvbmVzIHdlcmUgaW50cm9kdWNlZFxuICogKGUuZy4gZm9yICdFdXJvcGUvUHJhZ3VlJyB0aW1lem9uZSB0aGUgb2Zmc2V0IGlzIEdNVCswMDo1Nzo0NCBiZWZvcmUgMSBPY3RvYmVyIDE4OTFcbiAqIGFuZCBHTVQrMDE6MDA6MDAgYWZ0ZXIgdGhhdCBkYXRlKVxuICpcbiAqIERhdGUjZ2V0VGltZXpvbmVPZmZzZXQgcmV0dXJucyB0aGUgb2Zmc2V0IGluIG1pbnV0ZXMgYW5kIHdvdWxkIHJldHVybiA1NyBmb3IgdGhlIGV4YW1wbGUgYWJvdmUsXG4gKiB3aGljaCB3b3VsZCBsZWFkIHRvIGluY29ycmVjdCBjYWxjdWxhdGlvbnMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSB0aW1lem9uZSBvZmZzZXQgaW4gbWlsbGlzZWNvbmRzIHRoYXQgdGFrZXMgc2Vjb25kcyBpbiBhY2NvdW50LlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKGRhdGUpIHtcbiAgdmFyIHV0Y0RhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQyhkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCksIGRhdGUuZ2V0SG91cnMoKSwgZGF0ZS5nZXRNaW51dGVzKCksIGRhdGUuZ2V0U2Vjb25kcygpLCBkYXRlLmdldE1pbGxpc2Vjb25kcygpKSk7XG4gIHV0Y0RhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpKTtcbiAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpIC0gdXRjRGF0ZS5nZXRUaW1lKCk7XG59IiwidmFyIHByb3RlY3RlZERheU9mWWVhclRva2VucyA9IFsnRCcsICdERCddO1xudmFyIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zID0gWydZWScsICdZWVlZJ107XG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4odG9rZW4pIHtcbiAgcmV0dXJuIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0aHJvd1Byb3RlY3RlZEVycm9yKHRva2VuLCBmb3JtYXQsIGlucHV0KSB7XG4gIGlmICh0b2tlbiA9PT0gJ1lZWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdZWScpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgeXlgIGluc3RlYWQgb2YgYFlZYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnRCcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0REJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH1cbn0iLCJpbXBvcnQgaXNWYWxpZCBmcm9tIFwiLi4vaXNWYWxpZC9pbmRleC5qc1wiO1xuaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSBcIi4uL2xvY2FsZS9lbi1VUy9pbmRleC5qc1wiO1xuaW1wb3J0IHN1Yk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXR0ZXJzIGZyb20gXCIuLi9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9uZ0Zvcm1hdHRlcnMgZnJvbSBcIi4uL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuLCBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4sIHRocm93UHJvdGVjdGVkRXJyb3IgfSBmcm9tIFwiLi4vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiOyAvLyBUaGlzIFJlZ0V4cCBjb25zaXN0cyBvZiB0aHJlZSBwYXJ0cyBzZXBhcmF0ZWQgYnkgYHxgOlxuLy8gLSBbeVlRcU1Md0lkRGVjaWhIS2ttc11vIG1hdGNoZXMgYW55IGF2YWlsYWJsZSBvcmRpbmFsIG51bWJlciB0b2tlblxuLy8gICAob25lIG9mIHRoZSBjZXJ0YWluIGxldHRlcnMgZm9sbG93ZWQgYnkgYG9gKVxuLy8gLSAoXFx3KVxcMSogbWF0Y2hlcyBhbnkgc2VxdWVuY2VzIG9mIHRoZSBzYW1lIGxldHRlclxuLy8gLSAnJyBtYXRjaGVzIHR3byBxdW90ZSBjaGFyYWN0ZXJzIGluIGEgcm93XG4vLyAtICcoJyd8W14nXSkrKCd8JCkgbWF0Y2hlcyBhbnl0aGluZyBzdXJyb3VuZGVkIGJ5IHR3byBxdW90ZSBjaGFyYWN0ZXJzICgnKSxcbi8vICAgZXhjZXB0IGEgc2luZ2xlIHF1b3RlIHN5bWJvbCwgd2hpY2ggZW5kcyB0aGUgc2VxdWVuY2UuXG4vLyAgIFR3byBxdW90ZSBjaGFyYWN0ZXJzIGRvIG5vdCBlbmQgdGhlIHNlcXVlbmNlLlxuLy8gICBJZiB0aGVyZSBpcyBubyBtYXRjaGluZyBzaW5nbGUgcXVvdGVcbi8vICAgdGhlbiB0aGUgc2VxdWVuY2Ugd2lsbCBjb250aW51ZSB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcuXG4vLyAtIC4gbWF0Y2hlcyBhbnkgc2luZ2xlIGNoYXJhY3RlciB1bm1hdGNoZWQgYnkgcHJldmlvdXMgcGFydHMgb2YgdGhlIFJlZ0V4cHNcblxudmFyIGZvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvW3lZUXFNTHdJZERlY2loSEtrbXNdb3woXFx3KVxcMSp8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7IC8vIFRoaXMgUmVnRXhwIGNhdGNoZXMgc3ltYm9scyBlc2NhcGVkIGJ5IHF1b3RlcywgYW5kIGFsc29cbi8vIHNlcXVlbmNlcyBvZiBzeW1ib2xzIFAsIHAsIGFuZCB0aGUgY29tYmluYXRpb25zIGxpa2UgYFBQUFBQUFBwcHBwcGBcblxudmFyIGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1ArcCt8UCt8cCt8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG52YXIgZXNjYXBlZFN0cmluZ1JlZ0V4cCA9IC9eJyhbXl0qPyknPyQvO1xudmFyIGRvdWJsZVF1b3RlUmVnRXhwID0gLycnL2c7XG52YXIgdW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAgPSAvW2EtekEtWl0vO1xuLyoqXG4gKiBAbmFtZSBmb3JtYXRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgRm9ybWF0IHRoZSBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmcgaW4gdGhlIGdpdmVuIGZvcm1hdC4gVGhlIHJlc3VsdCBtYXkgdmFyeSBieSBsb2NhbGUuXG4gKlxuICogPiDimqDvuI8gUGxlYXNlIG5vdGUgdGhhdCB0aGUgYGZvcm1hdGAgdG9rZW5zIGRpZmZlciBmcm9tIE1vbWVudC5qcyBhbmQgb3RoZXIgbGlicmFyaWVzLlxuICogPiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKlxuICogVGhlIGNoYXJhY3RlcnMgd3JhcHBlZCBiZXR3ZWVuIHR3byBzaW5nbGUgcXVvdGVzIGNoYXJhY3RlcnMgKCcpIGFyZSBlc2NhcGVkLlxuICogVHdvIHNpbmdsZSBxdW90ZXMgaW4gYSByb3csIHdoZXRoZXIgaW5zaWRlIG9yIG91dHNpZGUgYSBxdW90ZWQgc2VxdWVuY2UsIHJlcHJlc2VudCBhICdyZWFsJyBzaW5nbGUgcXVvdGUuXG4gKiAoc2VlIHRoZSBsYXN0IGV4YW1wbGUpXG4gKlxuICogRm9ybWF0IG9mIHRoZSBzdHJpbmcgaXMgYmFzZWQgb24gVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0ZpZWxkX1N5bWJvbF9UYWJsZVxuICogd2l0aCBhIGZldyBhZGRpdGlvbnMgKHNlZSBub3RlIDcgYmVsb3cgdGhlIHRhYmxlKS5cbiAqXG4gKiBBY2NlcHRlZCBwYXR0ZXJuczpcbiAqIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBhdHRlcm4gfCBSZXN1bHQgZXhhbXBsZXMgICAgICAgICAgICAgICAgICAgfCBOb3RlcyB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tfFxuICogfCBFcmEgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRy4uR0dHICB8IEFELCBCQyAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0cgICAgfCBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHRyAgIHwgQSwgQiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBDYWxlbmRhciB5ZWFyICAgICAgICAgICAgICAgICAgIHwgeSAgICAgICB8IDQ0LCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHlvICAgICAgfCA0NHRoLCAxc3QsIDB0aCwgMTd0aCAgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eSAgICAgIHwgNDQsIDAxLCAwMCwgMTcgICAgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5ICAgICB8IDA0NCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXkgICAgfCAwMDQ0LCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5eSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgIHwgWSAgICAgICB8IDQ0LCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlvICAgICAgfCA0NHRoLCAxc3QsIDE5MDB0aCwgMjAxN3RoICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWSAgICAgIHwgNDQsIDAxLCAwMCwgMTcgICAgICAgICAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZICAgICB8IDA0NCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVkgICAgfCAwMDQ0LCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZWSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBJU08gd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICAgIHwgUiAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSICAgICAgfCAtNDMsIDAwLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlIgICAgIHwgLTA0MywgMDAwLCAwMDEsIDE5MDAsIDIwMTcgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUiAgICB8IC0wMDQzLCAwMDAwLCAwMDAxLCAxOTAwLCAyMDE3ICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlJSICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUsNyB8XG4gKiB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICAgfCB1ICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXUgICAgICB8IC00MywgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dSAgICAgfCAtMDQzLCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1ICAgIHwgLTAwNDMsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dXUgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgUXVhcnRlciAoZm9ybWF0dGluZykgICAgICAgICAgICB8IFEgICAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRbyAgICAgIHwgMXN0LCAybmQsIDNyZCwgNHRoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVEgICAgICB8IDAxLCAwMiwgMDMsIDA0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUSAgICAgfCBRMSwgUTIsIFEzLCBRNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRICAgIHwgMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUVEgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgUXVhcnRlciAoc3RhbmQtYWxvbmUpICAgICAgICAgICB8IHEgICAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxbyAgICAgIHwgMXN0LCAybmQsIDNyZCwgNHRoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXEgICAgICB8IDAxLCAwMiwgMDMsIDA0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcSAgICAgfCBRMSwgUTIsIFEzLCBRNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxICAgIHwgMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcXEgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgTW9udGggKGZvcm1hdHRpbmcpICAgICAgICAgICAgICB8IE0gICAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTJ0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU0gICAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTSAgICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NICAgIHwgSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXIgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTU0gICB8IEosIEYsIC4uLiwgRCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTW9udGggKHN0YW5kLWFsb25lKSAgICAgICAgICAgICB8IEwgICAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTJ0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTEwgICAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTCAgICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMICAgIHwgSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXIgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTEwgICB8IEosIEYsIC4uLiwgRCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgICB8IHcgICAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3byAgICAgIHwgMXN0LCAybmQsIC4uLiwgNTN0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd3cgICAgICB8IDAxLCAwMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgICB8IEkgICAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgNTN0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSUkgICAgICB8IDAxLCAwMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgICB8IGQgICAgICAgfCAxLCAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMzFzdCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZGQgICAgICB8IDAxLCAwMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgICB8IEQgICAgICAgfCAxLCAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMzY1dGgsIDM2NnRoICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREQgICAgICB8IDAxLCAwMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERERCAgICAgfCAwMDEsIDAwMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREREICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBEYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgICAgIHwgRS4uRUVFICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUVFICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgSVNPIGRheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICB8IGkgICAgICAgfCAxLCAyLCAzLCAuLi4sIDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgN3RoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWkgICAgICB8IDAxLCAwMiwgLi4uLCAwNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWkgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpaSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCA3ICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgfCBlICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZW8gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWUgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZWUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoc3RhbmQtYWxvbmUpIHwgYyAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjYyAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2MgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjYyAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2NjICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICB8IGEuLmFhICAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWEgICAgIHwgYW0sIHBtICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYSAgICB8IGEubS4sIHAubS4gICAgICAgICAgICAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWFhICAgfCBhLCBwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgfCBiLi5iYiAgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiICAgICB8IGFtLCBwbSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmIgICAgfCBhLm0uLCBwLm0uLCBub29uLCBtaWRuaWdodCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmJiYiAgIHwgYSwgcCwgbiwgbWkgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgIHwgQi4uQkJCICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkIgICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBCQkJCQiAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgIHwgaCAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAxMnRoICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBoaCAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgIHwgSCAgICAgICB8IDAsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhvICAgICAgfCAwdGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBISCAgICAgIHwgMDAsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgIHwgSyAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAwdGggICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBLSyAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgIHwgayAgICAgICB8IDI0LCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtvICAgICAgfCAyNHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBrayAgICAgIHwgMjQsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbSAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1vICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbSAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcyAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNvICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzcyAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgIHwgUyAgICAgICB8IDAsIDEsIC4uLiwgOSAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTICAgICAgfCAwMCwgMDEsIC4uLiwgOTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1MgICAgIHwgMDAwLCAwMDEsIC4uLiwgOTk5ICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1NTUyAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvIFopICAgICAgICB8IFggICAgICAgfCAtMDgsICswNTMwLCBaICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWCAgICAgIHwgLTA4MDAsICswNTMwLCBaICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYICAgICB8IC0wODowMCwgKzA1OjMwLCBaICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFggICAgfCAtMDgwMCwgKzA1MzAsIFosICsxMjM0NTYgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFhYWCAgIHwgLTA4OjAwLCArMDU6MzAsIFosICsxMjozNDo1NiAgICAgIHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgIHwgeCAgICAgICB8IC0wOCwgKzA1MzAsICswMCAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4ICAgICAgfCAtMDgwMCwgKzA1MzAsICswMDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHggICAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eCAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAsICsxMjM0NTYgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eHh4ICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwLCArMTI6MzQ6NTYgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICAgfCBPLi4uT09PIHwgR01ULTgsIEdNVCs1OjMwLCBHTVQrMCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgT09PTyAgICB8IEdNVC0wODowMCwgR01UKzA1OjMwLCBHTVQrMDA6MDAgICB8IDIgICAgIHxcbiAqIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pICB8IHouLi56enogfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCA2ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB6enp6ICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiw2ICAgfFxuICogfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgIHwgdCAgICAgICB8IDUxMjk2OTUyMCAgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHR0ICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDcgICB8XG4gKiB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgfCBUICAgICAgIHwgNTEyOTY5NTIwOTAwICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgVFQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgICB8IFAgICAgICAgfCAwNC8yOS8xNDUzICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUCAgICAgIHwgQXByIDI5LCAxNDUzICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQICAgICB8IEFwcmlsIDI5dGgsIDE0NTMgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUFAgICAgfCBGcmlkYXksIEFwcmlsIDI5dGgsIDE0NTMgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIHRpbWUgICAgICAgICAgICAgfCBwICAgICAgIHwgMTI6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHAgICAgICB8IDEyOjAwOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcCAgICAgfCAxMjowMDowMCBBTSBHTVQrMiAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcHBwICAgIHwgMTI6MDA6MDAgQU0gR01UKzAyOjAwICAgICAgICAgICAgIHwgMiw3ICAgfFxuICogfCBDb21iaW5hdGlvbiBvZiBkYXRlIGFuZCB0aW1lICAgIHwgUHAgICAgICB8IDA0LzI5LzE0NTMsIDEyOjAwIEFNICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQcHAgICAgfCBBcHIgMjksIDE0NTMsIDEyOjAwOjAwIEFNICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBwcHAgIHwgQXByaWwgMjl0aCwgMTQ1MyBhdCAuLi4gICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUHBwcHB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyBhdCAuLi4gICB8IDIsNyAgIHxcbiAqIE5vdGVzOlxuICogMS4gXCJGb3JtYXR0aW5nXCIgdW5pdHMgKGUuZy4gZm9ybWF0dGluZyBxdWFydGVyKSBpbiB0aGUgZGVmYXVsdCBlbi1VUyBsb2NhbGVcbiAqICAgIGFyZSB0aGUgc2FtZSBhcyBcInN0YW5kLWFsb25lXCIgdW5pdHMsIGJ1dCBhcmUgZGlmZmVyZW50IGluIHNvbWUgbGFuZ3VhZ2VzLlxuICogICAgXCJGb3JtYXR0aW5nXCIgdW5pdHMgYXJlIGRlY2xpbmVkIGFjY29yZGluZyB0byB0aGUgcnVsZXMgb2YgdGhlIGxhbmd1YWdlXG4gKiAgICBpbiB0aGUgY29udGV4dCBvZiBhIGRhdGUuIFwiU3RhbmQtYWxvbmVcIiB1bml0cyBhcmUgYWx3YXlzIG5vbWluYXRpdmUgc2luZ3VsYXI6XG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdkbyBMTExMJywge2xvY2FsZTogY3N9KSAvLz0+ICc2LiBsaXN0b3BhZCdgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdkbyBNTU1NJywge2xvY2FsZTogY3N9KSAvLz0+ICc2LiBsaXN0b3BhZHUnYFxuICpcbiAqIDIuIEFueSBzZXF1ZW5jZSBvZiB0aGUgaWRlbnRpY2FsIGxldHRlcnMgaXMgYSBwYXR0ZXJuLCB1bmxlc3MgaXQgaXMgZXNjYXBlZCBieVxuICogICAgdGhlIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIChzZWUgYmVsb3cpLlxuICogICAgSWYgdGhlIHNlcXVlbmNlIGlzIGxvbmdlciB0aGFuIGxpc3RlZCBpbiB0YWJsZSAoZS5nLiBgRUVFRUVFRUVFRUVgKVxuICogICAgdGhlIG91dHB1dCB3aWxsIGJlIHRoZSBzYW1lIGFzIGRlZmF1bHQgcGF0dGVybiBmb3IgdGhpcyB1bml0LCB1c3VhbGx5XG4gKiAgICB0aGUgbG9uZ2VzdCBvbmUgKGluIGNhc2Ugb2YgSVNPIHdlZWtkYXlzLCBgRUVFRWApLiBEZWZhdWx0IHBhdHRlcm5zIGZvciB1bml0c1xuICogICAgYXJlIG1hcmtlZCB3aXRoIFwiMlwiIGluIHRoZSBsYXN0IGNvbHVtbiBvZiB0aGUgdGFibGUuXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU0nKSAvLz0+ICdOb3YnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NJykgLy89PiAnTidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqIDMuIFNvbWUgcGF0dGVybnMgY291bGQgYmUgdW5saW1pdGVkIGxlbmd0aCAoc3VjaCBhcyBgeXl5eXl5eXlgKS5cbiAqICAgIFRoZSBvdXRwdXQgd2lsbCBiZSBwYWRkZWQgd2l0aCB6ZXJvcyB0byBtYXRjaCB0aGUgbGVuZ3RoIG9mIHRoZSBwYXR0ZXJuLlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAneXl5eXl5eXknKSAvLz0+ICcwMDAwMjAxNydgXG4gKlxuICogNC4gYFFRUVFRYCBhbmQgYHFxcXFxYCBjb3VsZCBiZSBub3Qgc3RyaWN0bHkgbnVtZXJpY2FsIGluIHNvbWUgbG9jYWxlcy5cbiAqICAgIFRoZXNlIHRva2VucyByZXByZXNlbnQgdGhlIHNob3J0ZXN0IGZvcm0gb2YgdGhlIHF1YXJ0ZXIuXG4gKlxuICogNS4gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIHBhdHRlcm5zIGFyZSBCLkMuIHllYXJzOlxuICpcbiAqICAgIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gKiAgICB8LS0tLS0tfC0tLS0tfC0tLS0tfFxuICogICAgfCBBQyAxIHwgICAxIHwgICAxIHxcbiAqICAgIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gKiAgICB8IEJDIDIgfCAgIDIgfCAgLTEgfFxuICpcbiAqICAgIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAqICAgIHdoaWxlIGB1dWAgcGFkcyBzaW5nbGUgZGlnaXQgeWVhcnMgdG8gMiBjaGFyYWN0ZXJzIGFuZCByZXR1cm5zIG90aGVyIHllYXJzIHVuY2hhbmdlZDpcbiAqXG4gKiAgICB8IFllYXIgfCBgeXlgIHwgYHV1YCB8XG4gKiAgICB8LS0tLS0tfC0tLS0tLXwtLS0tLS18XG4gKiAgICB8IDEgICAgfCAgIDAxIHwgICAwMSB8XG4gKiAgICB8IDE0ICAgfCAgIDE0IHwgICAxNCB8XG4gKiAgICB8IDM3NiAgfCAgIDc2IHwgIDM3NiB8XG4gKiAgICB8IDE0NTMgfCAgIDUzIHwgMTQ1MyB8XG4gKlxuICogICAgVGhlIHNhbWUgZGlmZmVyZW5jZSBpcyB0cnVlIGZvciBsb2NhbCBhbmQgSVNPIHdlZWstbnVtYmVyaW5nIHllYXJzIChgWWAgYW5kIGBSYCksXG4gKiAgICBleGNlcHQgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhcnMgYXJlIGRlcGVuZGVudCBvbiBgb3B0aW9ucy53ZWVrU3RhcnRzT25gXG4gKiAgICBhbmQgYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCAoY29tcGFyZSBbZ2V0SVNPV2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0SVNPV2Vla1llYXJ9XG4gKiAgICBhbmQgW2dldFdlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL2dldFdlZWtZZWFyfSkuXG4gKlxuICogNi4gU3BlY2lmaWMgbm9uLWxvY2F0aW9uIHRpbWV6b25lcyBhcmUgY3VycmVudGx5IHVuYXZhaWxhYmxlIGluIGBkYXRlLWZuc2AsXG4gKiAgICBzbyByaWdodCBub3cgdGhlc2UgdG9rZW5zIGZhbGwgYmFjayB0byBHTVQgdGltZXpvbmVzLlxuICpcbiAqIDcuIFRoZXNlIHBhdHRlcm5zIGFyZSBub3QgaW4gdGhlIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqICAgIC0gYGlgOiBJU08gZGF5IG9mIHdlZWtcbiAqICAgIC0gYElgOiBJU08gd2VlayBvZiB5ZWFyXG4gKiAgICAtIGBSYDogSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAqICAgIC0gYHRgOiBzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgVGA6IG1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAqICAgIC0gYG9gOiBvcmRpbmFsIG51bWJlciBtb2RpZmllclxuICogICAgLSBgUGA6IGxvbmcgbG9jYWxpemVkIGRhdGVcbiAqICAgIC0gYHBgOiBsb25nIGxvY2FsaXplZCB0aW1lXG4gKlxuICogOC4gYFlZYCBhbmQgYFlZWVlgIHRva2VucyByZXByZXNlbnQgd2Vlay1udW1iZXJpbmcgeWVhcnMgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggeWVhcnMuXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKlxuICogOS4gYERgIGFuZCBgRERgIHRva2VucyByZXByZXNlbnQgZGF5cyBvZiB0aGUgeWVhciBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCBkYXlzIG9mIHRoZSBtb250aC5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiAtIFRoZSBzZWNvbmQgYXJndW1lbnQgaXMgbm93IHJlcXVpcmVkIGZvciB0aGUgc2FrZSBvZiBleHBsaWNpdG5lc3MuXG4gKlxuICogICBgYGBqYXZhc2NyaXB0XG4gKiAgIC8vIEJlZm9yZSB2Mi4wLjBcbiAqICAgZm9ybWF0KG5ldyBEYXRlKDIwMTYsIDAsIDEpKVxuICpcbiAqICAgLy8gdjIuMC4wIG9ud2FyZFxuICogICBmb3JtYXQobmV3IERhdGUoMjAxNiwgMCwgMSksIFwieXl5eS1NTS1kZCdUJ0hIOm1tOnNzLlNTU3h4eFwiKVxuICogICBgYGBcbiAqXG4gKiAtIE5ldyBmb3JtYXQgc3RyaW5nIEFQSSBmb3IgYGZvcm1hdGAgZnVuY3Rpb25cbiAqICAgd2hpY2ggaXMgYmFzZWQgb24gW1VuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNV0oaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0ZpZWxkX1N5bWJvbF9UYWJsZSkuXG4gKiAgIFNlZSBbdGhpcyBwb3N0XShodHRwczovL2Jsb2cuZGF0ZS1mbnMub3JnL3Bvc3QvdW5pY29kZS10b2tlbnMtaW4tZGF0ZS1mbnMtdjItc3JlYXR5a2k5MWpnKSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIC0gQ2hhcmFjdGVycyBhcmUgbm93IGVzY2FwZWQgdXNpbmcgc2luZ2xlIHF1b3RlIHN5bWJvbHMgKGAnYCkgaW5zdGVhZCBvZiBzcXVhcmUgYnJhY2tldHMuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0IC0gdGhlIHN0cmluZyBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcGFyYW0gezB8MXwyfDN8NHw1fDZ9IFtvcHRpb25zLndlZWtTdGFydHNPbj0wXSAtIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrICgwIC0gU3VuZGF5KVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZT0xXSAtIHRoZSBkYXkgb2YgSmFudWFyeSwgd2hpY2ggaXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgd2Vlay1udW1iZXJpbmcgeWVhciB0b2tlbnMgYFlZYCBhbmQgYFlZWVlgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIHRoZSBkYXkgb2YgeWVhciB0b2tlbnMgYERgIGFuZCBgRERgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgZGF0ZWAgbXVzdCBub3QgYmUgSW52YWxpZCBEYXRlXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgbG9jYWxpemVgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgZm9ybWF0TG9uZ2AgcHJvcGVydHlcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDdcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXlgIGluc3RlYWQgb2YgYFlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBmb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDExIEZlYnJ1YXJ5IDIwMTQgaW4gbWlkZGxlLWVuZGlhbiBmb3JtYXQ6XG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDEsIDExKSwgJ01NL2RkL3l5eXknKVxuICogLy89PiAnMDIvMTEvMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDIgSnVseSAyMDE0IGluIEVzcGVyYW50bzpcbiAqIGltcG9ydCB7IGVvTG9jYWxlIH0gZnJvbSAnZGF0ZS1mbnMvbG9jYWxlL2VvJ1xuICogdmFyIHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyKSwgXCJkbyAnZGUnIE1NTU0geXl5eVwiLCB7XG4gKiAgIGxvY2FsZTogZW9Mb2NhbGVcbiAqIH0pXG4gKiAvLz0+ICcyLWEgZGUganVsaW8gMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRXNjYXBlIHN0cmluZyBieSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyczpcbiAqIHZhciByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiwgMTUpLCBcImggJ28nJ2Nsb2NrJ1wiKVxuICogLy89PiBcIjMgbydjbG9ja1wiXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0KGRpcnR5RGF0ZSwgZGlydHlGb3JtYXRTdHIsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGZvcm1hdFN0ciA9IFN0cmluZyhkaXJ0eUZvcm1hdFN0cik7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUgfHwgZGVmYXVsdExvY2FsZTtcbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZTtcbiAgdmFyIGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IDEgOiB0b0ludGVnZXIobG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIDogdG9JbnRlZ2VyKG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoIShmaXJzdFdlZWtDb250YWluc0RhdGUgPj0gMSAmJiBmaXJzdFdlZWtDb250YWluc0RhdGUgPD0gNykpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZmlyc3RXZWVrQ29udGFpbnNEYXRlIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgbG9jYWxlV2Vla1N0YXJ0c09uID0gbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMud2Vla1N0YXJ0c09uO1xuICB2YXIgZGVmYXVsdFdlZWtTdGFydHNPbiA9IGxvY2FsZVdlZWtTdGFydHNPbiA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihsb2NhbGVXZWVrU3RhcnRzT24pO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gb3B0aW9ucy53ZWVrU3RhcnRzT24gPT0gbnVsbCA/IGRlZmF1bHRXZWVrU3RhcnRzT24gOiB0b0ludGVnZXIob3B0aW9ucy53ZWVrU3RhcnRzT24pOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKHdlZWtTdGFydHNPbiA+PSAwICYmIHdlZWtTdGFydHNPbiA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIGlmICghbG9jYWxlLmxvY2FsaXplKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gbG9jYWxpemUgcHJvcGVydHknKTtcbiAgfVxuXG4gIGlmICghbG9jYWxlLmZvcm1hdExvbmcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBmb3JtYXRMb25nIHByb3BlcnR5Jyk7XG4gIH1cblxuICB2YXIgb3JpZ2luYWxEYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG5cbiAgaWYgKCFpc1ZhbGlkKG9yaWdpbmFsRGF0ZSkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIH0gLy8gQ29udmVydCB0aGUgZGF0ZSBpbiBzeXN0ZW0gdGltZXpvbmUgdG8gdGhlIHNhbWUgZGF0ZSBpbiBVVEMrMDA6MDAgdGltZXpvbmUuXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0IHdoZW4gVVRDIGZ1bmN0aW9ucyB3aWxsIGJlIGltcGxlbWVudGVkLCBsb2NhbGVzIHdpbGwgYmUgY29tcGF0aWJsZSB3aXRoIHRoZW0uXG4gIC8vIFNlZSBhbiBpc3N1ZSBhYm91dCBVVEMgZnVuY3Rpb25zOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5cbiAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhvcmlnaW5hbERhdGUpO1xuICB2YXIgdXRjRGF0ZSA9IHN1Yk1pbGxpc2Vjb25kcyhvcmlnaW5hbERhdGUsIHRpbWV6b25lT2Zmc2V0KTtcbiAgdmFyIGZvcm1hdHRlck9wdGlvbnMgPSB7XG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiBmaXJzdFdlZWtDb250YWluc0RhdGUsXG4gICAgd2Vla1N0YXJ0c09uOiB3ZWVrU3RhcnRzT24sXG4gICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgX29yaWdpbmFsRGF0ZTogb3JpZ2luYWxEYXRlXG4gIH07XG4gIHZhciByZXN1bHQgPSBmb3JtYXRTdHIubWF0Y2gobG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuXG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSAncCcgfHwgZmlyc3RDaGFyYWN0ZXIgPT09ICdQJykge1xuICAgICAgdmFyIGxvbmdGb3JtYXR0ZXIgPSBsb25nRm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG4gICAgICByZXR1cm4gbG9uZ0Zvcm1hdHRlcihzdWJzdHJpbmcsIGxvY2FsZS5mb3JtYXRMb25nLCBmb3JtYXR0ZXJPcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3Vic3RyaW5nO1xuICB9KS5qb2luKCcnKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIC8vIFJlcGxhY2UgdHdvIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIHdpdGggb25lIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJcbiAgICBpZiAoc3Vic3RyaW5nID09PSBcIicnXCIpIHtcbiAgICAgIHJldHVybiBcIidcIjtcbiAgICB9XG5cbiAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09IFwiJ1wiKSB7XG4gICAgICByZXR1cm4gY2xlYW5Fc2NhcGVkU3RyaW5nKHN1YnN0cmluZyk7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1hdHRlciA9IGZvcm1hdHRlcnNbZmlyc3RDaGFyYWN0ZXJdO1xuXG4gICAgaWYgKGZvcm1hdHRlcikge1xuICAgICAgaWYgKCFvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucyAmJiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIGRpcnR5RGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zICYmIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIGRpcnR5RGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmb3JtYXR0ZXIodXRjRGF0ZSwgc3Vic3RyaW5nLCBsb2NhbGUubG9jYWxpemUsIGZvcm1hdHRlck9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChmaXJzdENoYXJhY3Rlci5tYXRjaCh1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCkpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdGb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXIgYCcgKyBmaXJzdENoYXJhY3RlciArICdgJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1YnN0cmluZztcbiAgfSkuam9pbignJyk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGNsZWFuRXNjYXBlZFN0cmluZyhpbnB1dCkge1xuICByZXR1cm4gaW5wdXQubWF0Y2goZXNjYXBlZFN0cmluZ1JlZ0V4cClbMV0ucmVwbGFjZShkb3VibGVRdW90ZVJlZ0V4cCwgXCInXCIpO1xufSIsIi8qIGVzbGludC1kaXNhYmxlICovXG5cbmltcG9ydCB7IHdlYXRoZXIsIGlzSG91cmx5LCBzZXRJc0hvdXJseSB9IGZyb20gXCIuLi9pbmRleC5qc1wiO1xuXG5pbXBvcnQgeyBnZXRXZWF0aGVyLCBzZWN0aW9uRGlzcGxheVdlYXRoZXIgfSBmcm9tIFwiLi93ZWF0aGVyLmpzXCI7XG5cbmNvbnN0IGxvY2F0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNsb2NhdGlvblwiKTtcbmNvbnN0IGRhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2RhdGVcIik7XG5jb25zdCB0aW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN0aW1lXCIpO1xuY29uc3QgZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJmb3JtXCIpO1xuY29uc3Qgc2VhcmNoID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzZWFyY2hcIik7XG5jb25zdCBidXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYnV0dG9uXCIpO1xuY29uc3Qgc2VhcmNoSWNvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpbWdcIik7XG5jb25zdCBtYWluSWNvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbWFpbi1pY29uXCIpO1xuY29uc3QgdGVtcGVyYXR1cmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3RlbXBlcmF0dXJlXCIpO1xuY29uc3QgZGVzY3JpcHRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Rlc2NyaXB0aW9uXCIpO1xuY29uc3Qgd2luZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjd2luZFwiKTtcbmNvbnN0IGZlZWxzTGlrZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZmVlbHMtbGlrZVwiKTtcbmNvbnN0IGh1bWlkaXR5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNodW1pZGl0eVwiKTtcbmNvbnN0IHV2SW5kZXggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3V2LWluZGV4XCIpO1xuY29uc3Qgc3VucmlzZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3VucmlzZVwiKTtcbmNvbnN0IHByZXNzdXJlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcmVzc3VyZVwiKTtcbmNvbnN0IHJhaW5UaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcmFpbi10aXRsZVwiKTtcbmNvbnN0IHJhaW5WYWx1ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcmFpbi12YWx1ZVwiKTtcbmNvbnN0IHN1bnNldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3Vuc2V0XCIpO1xuY29uc3QgbW9kZUJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1vZGUtYnV0dG9uXCIpO1xuY29uc3Qgc2VjdGlvbkNhcmRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5zZWN0aW9uLWluZm8tY2FyZFwiKTtcbmNvbnN0IGNhcmRJY29ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY2FyZC1pY29uXCIpO1xuY29uc3QgY2FyZFRlbXBzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5jYXJkLXRlbXBcIik7XG5jb25zdCBjYXJkVGltZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmNhcmQtdGltZVwiKTtcbmNvbnN0IHJpZ2h0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNyaWdodC1idXR0b25cIik7XG5jb25zdCBsZWZ0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNsZWZ0LWJ1dHRvblwiKTtcblxuc2VhcmNoSWNvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgZ2V0V2VhdGhlcihzZWFyY2gudmFsdWUpO1xufSk7XG5cbmZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZSkgPT4ge1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIGdldFdlYXRoZXIoc2VhcmNoLnZhbHVlKTtcbn0pO1xuXG5tb2RlQnV0dG9ucy5mb3JFYWNoKChidXR0b24pID0+IHtcbiAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgIGlmICghYnV0dG9uLmNsYXNzTGlzdC5jb250YWlucyhcImFjdGl2ZVwiKSkge1xuICAgICAgbW9kZUJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiB7XG4gICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKFwiYWN0aXZlXCIpO1xuICAgICAgfSk7XG4gICAgICBzZXRJc0hvdXJseSgpO1xuICAgICAgY29uc29sZS5sb2coaXNIb3VybHkpO1xuICAgICAgc2VjdGlvbkRpc3BsYXlXZWF0aGVyKHdlYXRoZXIsIDApO1xuICAgIH1cbiAgfSk7XG59KTtcblxubGVmdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgc3dpdGNoICh0cnVlKSB7XG4gICAgY2FzZSBjYXJkVGltZXNbMF0udGV4dENvbnRlbnQgPT09IHdlYXRoZXIuaG91cmx5Rm9yZWNhc3RbOF0uZGF0ZUFuZFRpbWU6XG4gICAgICBzZWN0aW9uRGlzcGxheVdlYXRoZXIod2VhdGhlciwgMCk7XG4gICAgICBsZWZ0QnV0dG9uLmNsYXNzTGlzdC50b2dnbGUoXCJpbmFjdGl2ZVwiKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgY2FyZFRpbWVzWzBdLnRleHRDb250ZW50ID09PSB3ZWF0aGVyLmhvdXJseUZvcmVjYXN0WzE2XS5kYXRlQW5kVGltZTpcbiAgICAgIHNlY3Rpb25EaXNwbGF5V2VhdGhlcih3ZWF0aGVyLCA4KTtcbiAgICAgIHJpZ2h0QnV0dG9uLmNsYXNzTGlzdC50b2dnbGUoXCJpbmFjdGl2ZVwiKTtcbiAgICAgIGJyZWFrO1xuICB9XG59KTtcblxucmlnaHRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG4gIHN3aXRjaCAodHJ1ZSkge1xuICAgIGNhc2UgY2FyZFRpbWVzWzBdLnRleHRDb250ZW50ID09PSB3ZWF0aGVyLmhvdXJseUZvcmVjYXN0WzBdLmRhdGVBbmRUaW1lOlxuICAgICAgc2VjdGlvbkRpc3BsYXlXZWF0aGVyKHdlYXRoZXIsIDgpO1xuICAgICAgbGVmdEJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKFwiaW5hY3RpdmVcIik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIGNhcmRUaW1lc1swXS50ZXh0Q29udGVudCA9PT0gd2VhdGhlci5ob3VybHlGb3JlY2FzdFs4XS5kYXRlQW5kVGltZTpcbiAgICAgIHNlY3Rpb25EaXNwbGF5V2VhdGhlcih3ZWF0aGVyLCAxNik7XG4gICAgICByaWdodEJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKFwiaW5hY3RpdmVcIik7XG4gICAgICBicmVhaztcbiAgfVxufSk7XG5cbmV4cG9ydCB7XG4gIGxvY2F0aW9uLFxuICBkYXRlLFxuICB0aW1lLFxuICBmb3JtLFxuICBzZWFyY2gsXG4gIGJ1dHRvbixcbiAgc2VhcmNoSWNvbixcbiAgdGVtcGVyYXR1cmUsXG4gIGRlc2NyaXB0aW9uLFxuICB3aW5kLFxuICBmZWVsc0xpa2UsXG4gIGh1bWlkaXR5LFxuICB1dkluZGV4LFxuICBzdW5yaXNlLFxuICBwcmVzc3VyZSxcbiAgcmFpblRpdGxlLFxuICByYWluVmFsdWUsXG4gIHN1bnNldCxcbiAgc2VjdGlvbkNhcmRzLFxuICBtYWluSWNvbixcbiAgY2FyZEljb25zLFxuICBjYXJkVGVtcHMsXG4gIGNhcmRUaW1lcyxcbiAgbGVmdEJ1dHRvbixcbiAgcmlnaHRCdXR0b24sXG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgKi9cblxuaW1wb3J0IFwiLi9zdHlsZS5jc3NcIjtcbmltcG9ydCB7IGdldFdlYXRoZXIgfSBmcm9tIFwiLi9qcy93ZWF0aGVyXCI7XG5cbi8vcmV2aXNpdCAtIHNlZSBpZiB0aGVyZSdzIGEgd2F5IHRvIHNvbHZlIHRoaXMgd2l0aG91dCBnbG9iYWwgdmFyaWFibGVzO1xubGV0IHdlYXRoZXI7XG5sZXQgaXNIb3VybHkgPSB0cnVlO1xuXG5mdW5jdGlvbiBzZXRXZWF0aGVyKHZhbHVlKSB7XG4gIHdlYXRoZXIgPSB2YWx1ZTtcbiAgcmV0dXJuIHdlYXRoZXI7XG59XG5cbmZ1bmN0aW9uIHNldElzSG91cmx5KCkge1xuICBpc0hvdXJseSA9ICFpc0hvdXJseTtcbn1cblxud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgZ2V0V2VhdGhlcihcIk5ldyBZb3JrXCIpO1xufTtcblxuZXhwb3J0IHsgaXNIb3VybHksIHNldElzSG91cmx5LCB3ZWF0aGVyLCBzZXRXZWF0aGVyIH07XG4iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzQWZ0ZXJcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGZpcnN0IGRhdGUgYWZ0ZXIgdGhlIHNlY29uZCBvbmU/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJcyB0aGUgZmlyc3QgZGF0ZSBhZnRlciB0aGUgc2Vjb25kIG9uZT9cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0aGF0IHNob3VsZCBiZSBhZnRlciB0aGUgb3RoZXIgb25lIHRvIHJldHVybiB0cnVlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlVG9Db21wYXJlIC0gdGhlIGRhdGUgdG8gY29tcGFyZSB3aXRoXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGZpcnN0IGRhdGUgaXMgYWZ0ZXIgdGhlIHNlY29uZCBkYXRlXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElzIDEwIEp1bHkgMTk4OSBhZnRlciAxMSBGZWJydWFyeSAxOTg3P1xuICogdmFyIHJlc3VsdCA9IGlzQWZ0ZXIobmV3IERhdGUoMTk4OSwgNiwgMTApLCBuZXcgRGF0ZSgxOTg3LCAxLCAxMSkpXG4gKiAvLz0+IHRydWVcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0FmdGVyKGRpcnR5RGF0ZSwgZGlydHlEYXRlVG9Db21wYXJlKSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF0ZVRvQ29tcGFyZSA9IHRvRGF0ZShkaXJ0eURhdGVUb0NvbXBhcmUpO1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgPiBkYXRlVG9Db21wYXJlLmdldFRpbWUoKTtcbn0iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG5pbXBvcnQgeyBsZWZ0QnV0dG9uLCByaWdodEJ1dHRvbiB9IGZyb20gXCIuL2RvbVwiO1xuaW1wb3J0IHsgd2VhdGhlciB9IGZyb20gXCIuLi9pbmRleFwiO1xuaW1wb3J0IHsgZm9ybWF0SW5UaW1lWm9uZSB9IGZyb20gXCJkYXRlLWZucy10elwiO1xuaW1wb3J0IGlzQWZ0ZXIgZnJvbSBcImRhdGUtZm5zL2lzQWZ0ZXJcIjtcbmltcG9ydCBmcm9tVW5peFRpbWUgZnJvbSBcImRhdGUtZm5zL2Zyb21Vbml4VGltZVwiO1xuXG5mdW5jdGlvbiB0aW1lem9uZU5vcm1hbGl6ZShkdCwgdGltZXpvbmUpIHtcbiAgY29uc3QgZGF0ZSA9IGZyb21Vbml4VGltZShkdCk7XG4gIHJldHVybiBmb3JtYXRJblRpbWVab25lKGRhdGUsIHRpbWV6b25lLCBcInl5eXktTU0tZGQgSEg6bW06c3NcIik7XG59XG5cbmZ1bmN0aW9uIGdldERheU9mV2VlayhkdCwgdGltZXpvbmUpIHtcbiAgY29uc3QgZGF0ZSA9IGZyb21Vbml4VGltZShkdCk7XG4gIHJldHVybiBmb3JtYXRJblRpbWVab25lKGRhdGUsIHRpbWV6b25lLCBcImVlZWVcIik7XG59XG5cbmZ1bmN0aW9uIGdldERhdGUoZHQsIHRpbWV6b25lKSB7XG4gIGNvbnN0IGRhdGUgPSBmcm9tVW5peFRpbWUoZHQpO1xuICByZXR1cm4gZm9ybWF0SW5UaW1lWm9uZShkYXRlLCB0aW1lem9uZSwgXCJFRUVFLCBMTExMIGVvXCIpO1xufVxuXG5mdW5jdGlvbiBnZXRIb3VyKGR0LCB0aW1lem9uZSkge1xuICBjb25zdCBkYXRlID0gZnJvbVVuaXhUaW1lKGR0KTtcbiAgcmV0dXJuIGZvcm1hdEluVGltZVpvbmUoZGF0ZSwgdGltZXpvbmUsIFwiaCBhXCIpO1xufVxuXG5mdW5jdGlvbiBnZXRUaW1lKGV2ZW50LCB0aW1lem9uZSkge1xuICBjb25zdCB0aW1lID0gZnJvbVVuaXhUaW1lKGV2ZW50KTtcbiAgcmV0dXJuIGZvcm1hdEluVGltZVpvbmUodGltZSwgdGltZXpvbmUsIFwicFwiKTtcbn1cblxuZnVuY3Rpb24gaXNEYXl0aW1lKHRpbWUsIHN1bnJpc2UsIHN1bnNldCkge1xuICByZXR1cm4gaXNBZnRlcihzdW5zZXQsIHRpbWUpICYmIGlzQWZ0ZXIodGltZSwgc3VucmlzZSk7XG59XG5cbmZ1bmN0aW9uIHdpbmRDYXJkaW5hbCh3aW5kRGlyZWN0aW9uKSB7XG4gIHN3aXRjaCAodHJ1ZSkge1xuICAgIGNhc2UgKHdpbmREaXJlY3Rpb24gPj0gMCAmJiB3aW5kRGlyZWN0aW9uIDwgMjIuNSkgfHxcbiAgICAgICh3aW5kRGlyZWN0aW9uID4gMzM3LjUgJiYgd2luZERpcmVjdGlvbiA8IDM2MCk6XG4gICAgICB3aW5kRGlyZWN0aW9uID0gXCJOXCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIHdpbmREaXJlY3Rpb24gPj0gMjIuNSAmJiB3aW5kRGlyZWN0aW9uIDwgNjcuNTpcbiAgICAgIHdpbmREaXJlY3Rpb24gPSBcIk5FXCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIHdpbmREaXJlY3Rpb24gPj0gNjcuNSAmJiB3aW5kRGlyZWN0aW9uIDwgMTEyLjU6XG4gICAgICB3aW5kRGlyZWN0aW9uID0gXCJFXCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIHdpbmREaXJlY3Rpb24gPj0gMTEyLjUgJiYgd2luZERpcmVjdGlvbiA8IDE1Ny41OlxuICAgICAgd2luZERpcmVjdGlvbiA9IFwiU0VcIjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2Ugd2luZERpcmVjdGlvbiA+PSAxNTcuNSAmJiB3aW5kRGlyZWN0aW9uIDwgMjAyLjU6XG4gICAgICB3aW5kRGlyZWN0aW9uID0gXCJTXCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIHdpbmREaXJlY3Rpb24gPj0gMjAyLjUgJiYgd2luZERpcmVjdGlvbiA8IDI0Ny41OlxuICAgICAgd2luZERpcmVjdGlvbiA9IFwiU1dcIjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2Ugd2luZERpcmVjdGlvbiA+PSAyNDcuNSAmJiB3aW5kRGlyZWN0aW9uIDwgMjkyLjU6XG4gICAgICB3aW5kRGlyZWN0aW9uID0gXCJXXCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIHdpbmREaXJlY3Rpb24gPj0gMjkyLjUgJiYgd2luZERpcmVjdGlvbiA8IDMzNy41OlxuICAgICAgd2luZERpcmVjdGlvbiA9IFwiTldcIjtcbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiB3aW5kRGlyZWN0aW9uO1xufVxuXG5mdW5jdGlvbiBzZXRJY29uKGZvcmVjYXN0LCBpY29uKSB7XG4gIGxldCBzcmM7XG5cbiAgc3dpdGNoICh0cnVlKSB7XG4gICAgY2FzZSBmb3JlY2FzdC53ZWF0aGVyID09PSBcIlRodW5kZXJzdG9ybVwiOlxuICAgICAgc3JjID0gXCIuLi9zcmMvaW1hZ2VzL3RodW5kZXJzdG9ybS5wbmdcIjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgZm9yZWNhc3Qud2VhdGhlciA9PT0gXCJEcml6emxlXCI6XG4gICAgICBzcmMgPSB3ZWF0aGVyLmlzRGF5dGltZVxuICAgICAgICA/IFwiLi4vc3JjL2ltYWdlcy9kYXktcmFpbi5wbmdcIlxuICAgICAgICA6IFwiLi4vc3JjL2ltYWdlcy9uaWdodC1yYWluLmpwZ1wiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBmb3JlY2FzdC53ZWF0aGVyID09PSBcIlJhaW5cIjpcbiAgICAgIHNyYyA9IFwiLi4vc3JjL2ltYWdlcy9zaG93ZXJzLnBuZ1wiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBmb3JlY2FzdC53ZWF0aGVyID09PSBcIlNub3dcIjpcbiAgICAgIHNyYyA9IFwiLi4vc3JjL2ltYWdlcy9zbm93LnBuZ1wiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBmb3JlY2FzdC53ZWF0aGVyID09PSBcIkNsZWFyXCI6XG4gICAgICBzcmMgPSBmb3JlY2FzdC5pc0RheXRpbWVcbiAgICAgICAgPyBcIi4uL3NyYy9pbWFnZXMvc3VuLnBuZ1wiXG4gICAgICAgIDogXCIuLi9zcmMvaW1hZ2VzL21vb24ucG5nXCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIGZvcmVjYXN0LndlYXRoZXIgPT09IFwiQ2xvdWRzXCI6XG4gICAgICBzcmMgPSBcIi4uL3NyYy9pbWFnZXMvY2xvdWQucG5nXCI7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgc3JjID0gXCIuLi9zcmMvaW1hZ2VzL21pc3QucG5nXCI7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIGljb24uc2V0QXR0cmlidXRlKFwic3JjXCIsIHNyYyk7XG59XG5cbmZ1bmN0aW9uIHNldEJhY2tncm91bmQoZm9yZWNhc3QpIHtcbiAgLy9BbGwgYmFja2dyb3VuZHMgY291cnRlc3kgb2YgQHJvc2VjbWVyaWFtIVxuICBsZXQgc3JjO1xuXG4gIHN3aXRjaCAoZm9yZWNhc3Qud2VhdGhlcikge1xuICAgIGNhc2UgXCJUaHVuZGVyc3Rvcm1cIjpcbiAgICAgIHNyYyA9IFwiLi4vc3JjL2ltYWdlcy90aHVuZGVyc3Rvcm0tYmcuanBnXCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiRHJpenpsZVwiIHx8IFwiUmFpblwiOlxuICAgICAgc3JjID0gXCIuLi9zcmMvaW1hZ2VzL3JhaW4tYmcuanBnXCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiU25vd1wiOlxuICAgICAgc3JjID0gZm9yZWNhc3QuaXNEYXl0aW1lXG4gICAgICAgID8gXCIuLi9zcmMvaW1hZ2VzL3Nub3ctZGF5LWJnLmpwZ1wiXG4gICAgICAgIDogXCIuLi9zcmMvaW1hZ2VzL3Nub3ctbmlnaHQtYmcuanBnXCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiQ2xlYXJcIjpcbiAgICAgIHNyYyA9IGZvcmVjYXN0LmlzRGF5dGltZVxuICAgICAgICA/IFwiLi4vc3JjL2ltYWdlcy9jbGVhci1kYXkuanBnXCJcbiAgICAgICAgOiBcIi4uL3NyYy9pbWFnZXMvY2xlYXItbmlnaHQtYmcuanBnXCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiQ2xvdWRzXCI6XG4gICAgICBzcmMgPSBcIi4uL3NyYy9pbWFnZXMvcmFpbi1iZy5qcGdcIjtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBzcmMgPSBcIi4uL3NyYy9pbWFnZXMvbWlzdC1iZy5qcGdcIjtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgZG9jdW1lbnQuYm9keS5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBgdXJsKCR7c3JjfSlgO1xuXG4gIGlmIChcbiAgICBzcmMgPT09XG4gICAgKFwiLi4vc3JjL2ltYWdlcy9jbGVhci1uaWdodC1iZy5qcGdcIiB8fCBcIi4uL3NyYy9pbWFnZXMvdGh1bmRlcnN0b3JtLmpwZ1wiKVxuICApIHtcbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmNvbG9yID0gXCJ3aGl0ZVwiO1xuICAgIGxlZnRCdXR0b24uc2V0QXR0cmlidXRlKFwic3JjXCIsIFwiLi4vc3JjL2ltYWdlcy9sZWZ0LWFycm93LXdoaXRlLnBuZ1wiKTtcbiAgICByaWdodEJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgXCIuLi9zcmMvaW1hZ2VzL3JpZ2h0LWFycm93LXdoaXRlLnBuZ1wiKTtcbiAgfSBlbHNlIHtcbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmNvbG9yID0gXCJibGFja1wiO1xuICAgIGxlZnRCdXR0b24uc2V0QXR0cmlidXRlKFwic3JjXCIsIFwiLi4vc3JjL2ltYWdlcy9sZWZ0LWFycm93LnBuZ1wiKTtcbiAgICByaWdodEJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgXCIuLi9zcmMvaW1hZ2VzL3JpZ2h0LWFycm93LnBuZ1wiKTtcbiAgfVxufVxuXG5leHBvcnQge1xuICB0aW1lem9uZU5vcm1hbGl6ZSxcbiAgZ2V0RGF5T2ZXZWVrLFxuICBnZXREYXRlLFxuICBnZXRIb3VyLFxuICBnZXRUaW1lLFxuICBpc0RheXRpbWUsXG4gIHdpbmRDYXJkaW5hbCxcbiAgc2V0SWNvbixcbiAgc2V0QmFja2dyb3VuZCxcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xucmVxdWlyZShcImJhYmVsLXBvbHlmaWxsXCIpO1xuKFwidXNlIHN0cmljdFwiKTtcblxuaW1wb3J0IGZyb21Vbml4VGltZSBmcm9tIFwiZGF0ZS1mbnMvZnJvbVVuaXhUaW1lXCI7XG5pbXBvcnQgZm9ybWF0IGZyb20gXCJkYXRlLWZucy9mb3JtYXRcIjtcblxuaW1wb3J0IHtcbiAgbG9jYXRpb24sXG4gIGRhdGUsXG4gIHRpbWUsXG4gIHRlbXBlcmF0dXJlLFxuICBkZXNjcmlwdGlvbixcbiAgd2luZCxcbiAgZmVlbHNMaWtlLFxuICBzdW5yaXNlLFxuICBzdW5zZXQsXG4gIGNhcmRJY29ucyxcbiAgbWFpbkljb24sXG4gIGNhcmRUZW1wcyxcbiAgY2FyZFRpbWVzLFxuICByaWdodEJ1dHRvbixcbiAgbGVmdEJ1dHRvbixcbn0gZnJvbSBcIi4vZG9tXCI7XG5cbmltcG9ydCB7XG4gIHRpbWV6b25lTm9ybWFsaXplLFxuICBnZXREYXRlLFxuICBnZXRIb3VyLFxuICBnZXRUaW1lLFxuICBpc0RheXRpbWUsXG4gIHdpbmRDYXJkaW5hbCxcbiAgc2V0SWNvbixcbiAgc2V0QmFja2dyb3VuZCxcbn0gZnJvbSBcIi4vdHJhbnNsYXRvcnMuanNcIjtcblxuaW1wb3J0IHsgd2VhdGhlciwgc2V0V2VhdGhlciwgaXNIb3VybHksIHNldElzSG91cmx5IH0gZnJvbSBcIi4uL2luZGV4XCI7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENpdHkoY2l0eU5hbWUpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgYGh0dHA6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2dlby8xLjAvZGlyZWN0P3E9JHtjaXR5TmFtZX0mbGltaXQ9MSZhcHBpZD03YTYwN2ZiODVkYzQyZGRjNDQ3YWYwOWE3ZmZlYzhmYWBcbiAgICApO1xuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgcmV0dXJuIFtqc29uWzBdLmxhdCwganNvblswXS5sb25dO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgYWxlcnQoXCJJbnZhbGlkIGNpdHkuIFBsZWFzZSB0cnkgYWdhaW4uXCIpO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGZldGNoV2VhdGhlcihbbGF0LCBsb25dKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcbiAgICAgIGBodHRwczovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvb25lY2FsbD9sYXQ9JHtsYXR9Jmxvbj0ke2xvbn0mdW5pdHM9aW1wZXJpYWwmYXBwaWQ9N2E2MDdmYjg1ZGM0MmRkYzQ0N2FmMDlhN2ZmZWM4ZmFgXG4gICAgKTtcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIHJldHVybiBqc29uO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuZnVuY3Rpb24gd2VhdGhlclN1bW1hcnkob2JqZWN0KSB7XG4gIGxldCB0aW1lem9uZSA9IG9iamVjdC50aW1lem9uZTtcblxuICBsZXQgY3VycmVudFdlYXRoZXIgPSB7XG4gICAgZGF0ZUFuZFRpbWU6IHRpbWV6b25lTm9ybWFsaXplKG9iamVjdC5jdXJyZW50LmR0LCBvYmplY3QudGltZXpvbmUpLFxuICAgIGRhdGU6IGdldERhdGUob2JqZWN0LmN1cnJlbnQuZHQsIG9iamVjdC50aW1lem9uZSksXG4gICAgdGltZTogZ2V0VGltZShvYmplY3QuY3VycmVudC5kdCwgb2JqZWN0LnRpbWV6b25lKSxcbiAgICBpc0RheXRpbWU6IGlzRGF5dGltZShcbiAgICAgIGZyb21Vbml4VGltZShvYmplY3QuY3VycmVudC5kdCksXG4gICAgICBmcm9tVW5peFRpbWUob2JqZWN0LmRhaWx5WzBdLnN1bnJpc2UpLFxuICAgICAgZnJvbVVuaXhUaW1lKG9iamVjdC5kYWlseVswXS5zdW5zZXQpXG4gICAgKSxcbiAgICBzdW5yaXNlOiB0aW1lem9uZU5vcm1hbGl6ZShvYmplY3QuZGFpbHlbMF0uc3VucmlzZSwgb2JqZWN0LnRpbWV6b25lKSxcbiAgICBzdW5zZXQ6IHRpbWV6b25lTm9ybWFsaXplKG9iamVjdC5kYWlseVswXS5zdW5zZXQsIG9iamVjdC50aW1lem9uZSksXG4gICAgdGVtcGVyYXR1cmU6IGAke01hdGgucm91bmQob2JqZWN0LmN1cnJlbnQudGVtcCl9XFx4QjBgLFxuICAgIGZlZWxzTGlrZTogYEZlZWxzIGxpa2UgJHtNYXRoLnJvdW5kKG9iamVjdC5jdXJyZW50LmZlZWxzX2xpa2UpfVxceEIwYCxcbiAgICB3ZWF0aGVyOiBvYmplY3QuY3VycmVudC53ZWF0aGVyWzBdLm1haW4sXG4gICAgd2luZDogYCR7TWF0aC5yb3VuZChvYmplY3QuY3VycmVudC53aW5kX3NwZWVkKX0gbXBoICR7d2luZENhcmRpbmFsKFxuICAgICAgb2JqZWN0LmN1cnJlbnQud2luZF9kZWdcbiAgICApfWAsXG4gICAgdXZJbmRleDogTWF0aC5yb3VuZChvYmplY3QuY3VycmVudC51dmkpLFxuICAgIGh1bWlkaXR5OiBgJHtvYmplY3QuY3VycmVudC5odW1pZGl0eX0lYCxcbiAgICBwcmVzc3VyZTogYCR7b2JqZWN0LmN1cnJlbnQucHJlc3N1cmV9IGluSGdgLFxuICB9O1xuXG4gIGxldCBzZXZlbkRheUZvcmVjYXN0ID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqZWN0LmRhaWx5Lmxlbmd0aDsgaSsrKSB7XG4gICAgc2V2ZW5EYXlGb3JlY2FzdFtpXSA9IHtcbiAgICAgIGRhdGVBbmRUaW1lOiB0aW1lem9uZU5vcm1hbGl6ZShvYmplY3QuZGFpbHlbaV0uZHQsIG9iamVjdC50aW1lem9uZSksXG4gICAgICBkYWlseUhpZ2g6IGAke01hdGgucm91bmQob2JqZWN0LmRhaWx5W2ldLnRlbXAubWF4KX1cXHhCMGAsXG4gICAgICBkYWlseUxvdzogYCR7TWF0aC5yb3VuZChvYmplY3QuZGFpbHlbaV0udGVtcC5taW4pfVxceEIwYCxcbiAgICAgIGlzRGF5dGltZTogdHJ1ZSxcbiAgICAgIHdlYXRoZXI6IG9iamVjdC5kYWlseVtpXS53ZWF0aGVyWzBdLm1haW4sXG4gICAgICB3aW5kOiBgJHtNYXRoLnJvdW5kKG9iamVjdC5kYWlseVtpXS53aW5kX3NwZWVkKX0gbXBoICR7d2luZENhcmRpbmFsKFxuICAgICAgICBvYmplY3QuZGFpbHlbaV0ud2luY19kZWdcbiAgICAgICl9YCxcbiAgICAgIHV2SW5kZXg6IE1hdGgucm91bmQob2JqZWN0LmRhaWx5W2ldLnV2aSksXG4gICAgICBodW1pZGl0eTogYCR7b2JqZWN0LmRhaWx5W2ldLmh1bWlkaXR5fSVgLFxuICAgICAgc3VucmlzZTogdGltZXpvbmVOb3JtYWxpemUob2JqZWN0LmRhaWx5W2ldLnN1bnJpc2UsIG9iamVjdC50aW1lem9uZSksXG4gICAgICBzdW5zZXQ6IHRpbWV6b25lTm9ybWFsaXplKG9iamVjdC5kYWlseVtpXS5zdW5zZXQsIG9iamVjdC50aW1lem9uZSksXG4gICAgICByYWluOiBgJHtvYmplY3QuZGFpbHlbaV0ucmFpbiB8fCAwfSBpbmAsXG4gICAgICBwcmVzc3VyZTogYCR7b2JqZWN0LmRhaWx5W2ldLnByZXNzdXJlfSBpbkhnYCxcbiAgICB9O1xuICB9XG5cbiAgbGV0IGhvdXJseUZvcmVjYXN0ID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMjU7IGkrKykge1xuICAgIGhvdXJseUZvcmVjYXN0W2ldID0ge1xuICAgICAgZGF0ZUFuZFRpbWU6IGdldEhvdXIob2JqZWN0LmhvdXJseVtpXS5kdCwgb2JqZWN0LnRpbWV6b25lKSxcbiAgICAgIGlzRGF5dGltZTogaXNEYXl0aW1lKFxuICAgICAgICBmcm9tVW5peFRpbWUob2JqZWN0LmhvdXJseVtpXS5kdCksXG4gICAgICAgIGZyb21Vbml4VGltZShvYmplY3QuZGFpbHlbMF0uc3VucmlzZSksXG4gICAgICAgIGZyb21Vbml4VGltZShvYmplY3QuZGFpbHlbMF0uc3Vuc2V0KVxuICAgICAgKSxcbiAgICAgIHdlYXRoZXI6IG9iamVjdC5ob3VybHlbaV0ud2VhdGhlclswXS5tYWluLFxuICAgICAgdGVtcGVyYXR1cmU6IGAke01hdGgucm91bmQob2JqZWN0LmhvdXJseVtpXS50ZW1wKX1cXHhCMGAsXG4gICAgICB3aW5kOiBgJHtNYXRoLnJvdW5kKG9iamVjdC5ob3VybHlbaV0ud2luZF9zcGVlZCl9IG1waCAke3dpbmRDYXJkaW5hbChcbiAgICAgICAgb2JqZWN0LmhvdXJseVtpXS53aW5kX2RlZ1xuICAgICAgKX1gLFxuICAgICAgZmVlbHNMaWtlOiBgRmVlbHMgbGlrZSAke01hdGgucm91bmQob2JqZWN0LmhvdXJseVtpXS5mZWVsc19saWtlKX1cXHhCMGAsXG4gICAgICB1dkluZGV4OiBNYXRoLnJvdW5kKG9iamVjdC5ob3VybHlbaV0udXZpKSxcbiAgICAgIGh1bWlkaXR5OiBgJHtvYmplY3QuaG91cmx5W2ldLmh1bWlkaXR5fSVgLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4geyB0aW1lem9uZSwgY3VycmVudFdlYXRoZXIsIHNldmVuRGF5Rm9yZWNhc3QsIGhvdXJseUZvcmVjYXN0IH07XG59XG5cbmZ1bmN0aW9uIG1haW5EaXNwbGF5V2VhdGhlcihjaXR5TmFtZSwgd2VhdGhlcikge1xuICBsb2NhdGlvbi50ZXh0Q29udGVudCA9IGNpdHlOYW1lO1xuICBkYXRlLnRleHRDb250ZW50ID0gd2VhdGhlci5jdXJyZW50V2VhdGhlci5kYXRlO1xuICB0aW1lLnRleHRDb250ZW50ID0gd2VhdGhlci5jdXJyZW50V2VhdGhlci50aW1lO1xuICB0ZW1wZXJhdHVyZS50ZXh0Q29udGVudCA9IHdlYXRoZXIuY3VycmVudFdlYXRoZXIudGVtcGVyYXR1cmU7XG4gIGRlc2NyaXB0aW9uLnRleHRDb250ZW50ID0gd2VhdGhlci5jdXJyZW50V2VhdGhlci53ZWF0aGVyO1xuICB3aW5kLnRleHRDb250ZW50ID0gd2VhdGhlci5jdXJyZW50V2VhdGhlci53aW5kO1xuICBmZWVsc0xpa2UudGV4dENvbnRlbnQgPSB3ZWF0aGVyLmN1cnJlbnRXZWF0aGVyLmZlZWxzTGlrZTtcbiAgc3VucmlzZS50ZXh0Q29udGVudCA9IGZvcm1hdChuZXcgRGF0ZSh3ZWF0aGVyLmN1cnJlbnRXZWF0aGVyLnN1bnJpc2UpLCBcInBcIik7XG4gIHN1bnNldC50ZXh0Q29udGVudCA9IGZvcm1hdChuZXcgRGF0ZSh3ZWF0aGVyLmN1cnJlbnRXZWF0aGVyLnN1bnNldCksIFwicFwiKTtcblxuICBzZXRJY29uKHdlYXRoZXIuY3VycmVudFdlYXRoZXIsIG1haW5JY29uKTtcbiAgc2V0QmFja2dyb3VuZCh3ZWF0aGVyLmN1cnJlbnRXZWF0aGVyKTtcbn1cblxuZnVuY3Rpb24gc2VjdGlvbkRpc3BsYXlXZWF0aGVyKHdlYXRoZXIsIHdlYXRoZXJJbmRleCkge1xuICBpZiAoaXNIb3VybHkpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDg7IGkrKykge1xuICAgICAgc2V0SWNvbih3ZWF0aGVyLmhvdXJseUZvcmVjYXN0W3dlYXRoZXJJbmRleF0sIGNhcmRJY29uc1tpXSk7XG4gICAgICBjYXJkVGVtcHNbaV0udGV4dENvbnRlbnQgPVxuICAgICAgICB3ZWF0aGVyLmhvdXJseUZvcmVjYXN0W3dlYXRoZXJJbmRleF0udGVtcGVyYXR1cmU7XG4gICAgICBjYXJkVGltZXNbaV0udGV4dENvbnRlbnQgPVxuICAgICAgICB3ZWF0aGVyLmhvdXJseUZvcmVjYXN0W3dlYXRoZXJJbmRleF0uZGF0ZUFuZFRpbWU7XG4gICAgICB3ZWF0aGVySW5kZXgrKztcbiAgICB9XG4gICAgaWYgKHJpZ2h0QnV0dG9uLmNsYXNzTGlzdC5jb250YWlucyhcImluYWN0aXZlXCIpKSB7XG4gICAgICByaWdodEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKFwiaW5hY3RpdmVcIik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgODsgaSsrKSB7XG4gICAgICBzZXRJY29uKHdlYXRoZXIuc2V2ZW5EYXlGb3JlY2FzdFt3ZWF0aGVySW5kZXhdLCBjYXJkSWNvbnNbaV0pO1xuICAgICAgY2FyZFRlbXBzW1xuICAgICAgICBpXG4gICAgICBdLnRleHRDb250ZW50ID0gYCR7d2VhdGhlci5zZXZlbkRheUZvcmVjYXN0W3dlYXRoZXJJbmRleF0uZGFpbHlIaWdofSAvICR7d2VhdGhlci5zZXZlbkRheUZvcmVjYXN0W3dlYXRoZXJJbmRleF0uZGFpbHlMb3d9YDtcbiAgICAgIGNhcmRUaW1lc1tpXS50ZXh0Q29udGVudCA9IGZvcm1hdChcbiAgICAgICAgbmV3IERhdGUod2VhdGhlci5zZXZlbkRheUZvcmVjYXN0W3dlYXRoZXJJbmRleF0uZGF0ZUFuZFRpbWUpLFxuICAgICAgICBcIkVFRUVcIlxuICAgICAgKTtcbiAgICAgIHdlYXRoZXJJbmRleCsrO1xuICAgIH1cbiAgICBsZWZ0QnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJpbmFjdGl2ZVwiKTtcbiAgICByaWdodEJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiaW5hY3RpdmVcIik7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0V2VhdGhlcihjaXR5TmFtZSkge1xuICBjb25zdCBjaXR5ID0gYXdhaXQgZ2V0Q2l0eShjaXR5TmFtZSk7XG4gIGNvbnN0IG9iamVjdCA9IGF3YWl0IGZldGNoV2VhdGhlcihbLi4uY2l0eV0pO1xuICBzZXRXZWF0aGVyKHdlYXRoZXJTdW1tYXJ5KG9iamVjdCkpO1xuICBjb25zb2xlLmxvZyh3ZWF0aGVyKTtcbiAgbWFpbkRpc3BsYXlXZWF0aGVyKGNpdHlOYW1lLCB3ZWF0aGVyKTtcbiAgc2VjdGlvbkRpc3BsYXlXZWF0aGVyKHdlYXRoZXIsIDApO1xufVxuXG5leHBvcnQgeyBnZXRXZWF0aGVyLCBtYWluRGlzcGxheVdlYXRoZXIsIHNlY3Rpb25EaXNwbGF5V2VhdGhlciB9O1xuIl0sIm5hbWVzIjpbImciLCJfYmFiZWxQb2x5ZmlsbCIsIkVycm9yIiwiZGVmaW5lIiwiTyIsImtleSIsInZhbHVlIiwiT2JqZWN0Iiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJTdHJpbmciLCJwcm90b3R5cGUiLCJwYWRTdGFydCIsInBhZEVuZCIsInNwbGl0IiwiZm9yRWFjaCIsIkFycmF5IiwiRnVuY3Rpb24iLCJjYWxsIiwiYmluZCIsImdsb2JhbCIsInVuZGVmaW5lZCIsIk9wIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCIkU3ltYm9sIiwiU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJpdGVyYXRvciIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInJ1bnRpbWUiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJtb2R1bGUiLCJleHBvcnRzIiwid3JhcCIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsIkNvbnRpbnVlU2VudGluZWwiLCJJdGVyYXRvclByb3RvdHlwZSIsInRoaXMiLCJnZXRQcm90byIsImdldFByb3RvdHlwZU9mIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJ2YWx1ZXMiLCJHcCIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiR2VuZXJhdG9yIiwiY3JlYXRlIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJjb25zdHJ1Y3RvciIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJuYW1lIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhcmciLCJfX2F3YWl0IiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsImFzeW5jIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJzZWxmIiwidHJ5TG9jc0xpc3QiLCJpdGVyIiwibmV4dCIsInRoZW4iLCJyZXN1bHQiLCJkb25lIiwidG9TdHJpbmciLCJrZXlzIiwib2JqZWN0IiwicHVzaCIsInJldmVyc2UiLCJsZW5ndGgiLCJwb3AiLCJDb250ZXh0IiwicmVzZXQiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsInNlbnQiLCJfc2VudCIsImRlbGVnYXRlIiwibWV0aG9kIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjaGFyQXQiLCJpc05hTiIsInNsaWNlIiwic3RvcCIsInJvb3RSZWNvcmQiLCJjb21wbGV0aW9uIiwidHlwZSIsInJ2YWwiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImV4Y2VwdGlvbiIsImNvbnRleHQiLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJyZWNvcmQiLCJpIiwiZW50cnkiLCJ0cnlMb2MiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhYnJ1cHQiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImFmdGVyTG9jIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsIml0ZXJhYmxlIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwcm90b0dlbmVyYXRvciIsImdlbmVyYXRvciIsIl9pbnZva2UiLCJzdGF0ZSIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJ0cnlDYXRjaCIsIm1ha2VJbnZva2VNZXRob2QiLCJmbiIsIm9iaiIsImVyciIsImludm9rZSIsInJlc29sdmUiLCJyZWplY3QiLCJQcm9taXNlIiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwicHJvY2VzcyIsImRvbWFpbiIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwicmV0dXJuIiwiVHlwZUVycm9yIiwiaW5mbyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJpdGVyYXRvck1ldGhvZCIsIndpbmRvdyIsIml0IiwiY29mIiwibXNnIiwiVU5TQ09QQUJMRVMiLCJBcnJheVByb3RvIiwiYXQiLCJTIiwiaW5kZXgiLCJ1bmljb2RlIiwiQ29uc3RydWN0b3IiLCJmb3JiaWRkZW5GaWVsZCIsImlzT2JqZWN0IiwidG9PYmplY3QiLCJ0b0Fic29sdXRlSW5kZXgiLCJ0b0xlbmd0aCIsImNvcHlXaXRoaW4iLCJ0YXJnZXQiLCJzdGFydCIsImxlbiIsInRvIiwiZnJvbSIsImVuZCIsImFyZ3VtZW50cyIsImNvdW50IiwiTWF0aCIsIm1pbiIsImluYyIsImFMZW4iLCJlbmRQb3MiLCJmb3JPZiIsIklURVJBVE9SIiwidG9JT2JqZWN0IiwiSVNfSU5DTFVERVMiLCIkdGhpcyIsImVsIiwiZnJvbUluZGV4IiwiY3R4IiwiSU9iamVjdCIsImFzYyIsIlRZUEUiLCIkY3JlYXRlIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIk5PX0hPTEVTIiwiY2FsbGJhY2tmbiIsInRoYXQiLCJ2YWwiLCJyZXMiLCJmIiwiYUZ1bmN0aW9uIiwibWVtbyIsImlzUmlnaHQiLCJpc0FycmF5IiwiU1BFQ0lFUyIsIm9yaWdpbmFsIiwiQyIsInNwZWNpZXNDb25zdHJ1Y3RvciIsImFycmF5U2xpY2UiLCJmYWN0b3JpZXMiLCJjb25zdHJ1Y3QiLCJGIiwiYXJncyIsIm4iLCJqb2luIiwicGFydEFyZ3MiLCJib3VuZCIsImNvbmNhdCIsIlRBRyIsIkFSRyIsIlQiLCJCIiwiZSIsInRyeUdldCIsImNhbGxlZSIsImRQIiwicmVkZWZpbmVBbGwiLCJhbkluc3RhbmNlIiwiJGl0ZXJEZWZpbmUiLCJzdGVwIiwic2V0U3BlY2llcyIsIkRFU0NSSVBUT1JTIiwiZmFzdEtleSIsInZhbGlkYXRlIiwiU0laRSIsImdldEVudHJ5IiwiX2kiLCJfZiIsImsiLCJnZXRDb25zdHJ1Y3RvciIsIndyYXBwZXIiLCJOQU1FIiwiQURERVIiLCJfdCIsIl9sIiwiY2xlYXIiLCJkYXRhIiwiciIsInAiLCJ2IiwiaGFzIiwiZ2V0IiwiZGVmIiwic2V0U3Ryb25nIiwiaXRlcmF0ZWQiLCJraW5kIiwiX2siLCJjbGFzc29mIiwiZ2V0V2VhayIsImFuT2JqZWN0IiwiY3JlYXRlQXJyYXlNZXRob2QiLCIkaGFzIiwiYXJyYXlGaW5kIiwiYXJyYXlGaW5kSW5kZXgiLCJpZCIsInVuY2F1Z2h0RnJvemVuU3RvcmUiLCJVbmNhdWdodEZyb3plblN0b3JlIiwiYSIsImZpbmRVbmNhdWdodEZyb3plbiIsInN0b3JlIiwic2V0Iiwic3BsaWNlIiwidWZzdG9yZSIsIiRleHBvcnQiLCJyZWRlZmluZSIsIm1ldGEiLCJmYWlscyIsIiRpdGVyRGV0ZWN0Iiwic2V0VG9TdHJpbmdUYWciLCJpbmhlcml0SWZSZXF1aXJlZCIsIm1ldGhvZHMiLCJjb21tb24iLCJJU19XRUFLIiwiQmFzZSIsInByb3RvIiwiZml4TWV0aG9kIiwiS0VZIiwiYiIsImVudHJpZXMiLCJpbnN0YW5jZSIsIkhBU05UX0NIQUlOSU5HIiwiVEhST1dTX09OX1BSSU1JVElWRVMiLCJBQ0NFUFRfSVRFUkFCTEVTIiwiQlVHR1lfWkVSTyIsIiRpbnN0YW5jZSIsIk5FRUQiLCJHIiwiVyIsImNvcmUiLCJ2ZXJzaW9uIiwiX19lIiwiJGRlZmluZVByb3BlcnR5IiwiY3JlYXRlRGVzYyIsImMiLCJhcHBseSIsImdldFRpbWUiLCJEYXRlIiwiJHRvSVNPU3RyaW5nIiwidG9JU09TdHJpbmciLCJseiIsIm51bSIsIk5hTiIsImlzRmluaXRlIiwiUmFuZ2VFcnJvciIsImQiLCJ5IiwiZ2V0VVRDRnVsbFllYXIiLCJtIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwicyIsImFicyIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJ0b1ByaW1pdGl2ZSIsIk5VTUJFUiIsImhpbnQiLCJkZWZpbmVQcm9wZXJ0eSIsImRvY3VtZW50IiwiaXMiLCJjcmVhdGVFbGVtZW50IiwiZ2V0S2V5cyIsImdPUFMiLCJwSUUiLCJnZXRTeW1ib2xzIiwic3ltYm9scyIsImlzRW51bSIsImhpZGUiLCJzb3VyY2UiLCJvd24iLCJvdXQiLCJleHAiLCJJU19GT1JDRUQiLCJJU19HTE9CQUwiLCJJU19TVEFUSUMiLCJJU19QUk9UTyIsIlAiLCJJU19CSU5EIiwiZXhwUHJvdG8iLCJVIiwiUiIsIk1BVENIIiwicmUiLCJleGVjIiwiZGVmaW5lZCIsIndrcyIsInJlZ2V4cEV4ZWMiLCJSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyIsImdyb3VwcyIsInJlcGxhY2UiLCJTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMiLCJvcmlnaW5hbEV4ZWMiLCJTWU1CT0wiLCJERUxFR0FURVNfVE9fU1lNQk9MIiwiREVMRUdBVEVTX1RPX0VYRUMiLCJleGVjQ2FsbGVkIiwibmF0aXZlUmVnRXhwTWV0aG9kIiwiZm5zIiwibmF0aXZlTWV0aG9kIiwicmVnZXhwIiwic3RyIiwiYXJnMiIsImZvcmNlU3RyaW5nTWV0aG9kIiwic3RyZm4iLCJyeGZuIiwiUmVnRXhwIiwic3RyaW5nIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInN0aWNreSIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiZmxhdHRlbkludG9BcnJheSIsInNvdXJjZUxlbiIsImRlcHRoIiwibWFwcGVyIiwidGhpc0FyZyIsImVsZW1lbnQiLCJzcHJlYWRhYmxlIiwidGFyZ2V0SW5kZXgiLCJzb3VyY2VJbmRleCIsIm1hcEZuIiwiaXNBcnJheUl0ZXIiLCJnZXRJdGVyRm4iLCJCUkVBSyIsIlJFVFVSTiIsIml0ZXJGbiIsIl9fZyIsImRvY3VtZW50RWxlbWVudCIsInVuIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJJdGVyYXRvcnMiLCJmbG9vciIsImlzUmVnRXhwIiwicmV0IiwiZGVzY3JpcHRvciIsIkxJQlJBUlkiLCIkaXRlckNyZWF0ZSIsIkJVR0dZIiwiS0VZUyIsIlZBTFVFUyIsInJldHVyblRoaXMiLCJERUZBVUxUIiwiSVNfU0VUIiwiRk9SQ0VEIiwiZ2V0TWV0aG9kIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsInNraXBDbG9zaW5nIiwic2FmZSIsImFyciIsIiRleHBtMSIsImV4cG0xIiwieCIsInNpZ24iLCJwb3ciLCJFUFNJTE9OIiwiRVBTSUxPTjMyIiwiTUFYMzIiLCJNSU4zMiIsImZyb3VuZCIsIiRhYnMiLCIkc2lnbiIsIkluZmluaXR5IiwibG9nMXAiLCJsb2ciLCJzY2FsZSIsImluTG93IiwiaW5IaWdoIiwib3V0TG93Iiwib3V0SGlnaCIsIk1FVEEiLCJzZXREZXNjIiwiaXNFeHRlbnNpYmxlIiwiRlJFRVpFIiwicHJldmVudEV4dGVuc2lvbnMiLCJzZXRNZXRhIiwidyIsIm9uRnJlZXplIiwiTWFwIiwic2hhcmVkIiwiZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCIsInRhcmdldEtleSIsInRhcmdldE1ldGFkYXRhIiwia2V5TWV0YWRhdGEiLCJtYXAiLCJNZXRhZGF0YUtleSIsIm1ldGFkYXRhTWFwIiwiTWV0YWRhdGFWYWx1ZSIsIl8iLCJtYWNyb3Rhc2siLCJPYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiaXNOb2RlIiwiaGVhZCIsImxhc3QiLCJub3RpZnkiLCJmbHVzaCIsInBhcmVudCIsImV4aXQiLCJlbnRlciIsIm5leHRUaWNrIiwibmF2aWdhdG9yIiwic3RhbmRhbG9uZSIsInByb21pc2UiLCJ0b2dnbGUiLCJub2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsInRhc2siLCJQcm9taXNlQ2FwYWJpbGl0eSIsIiQkcmVzb2x2ZSIsIiQkcmVqZWN0IiwiJGFzc2lnbiIsImFzc2lnbiIsIkEiLCJLIiwiaiIsImRQcyIsImVudW1CdWdLZXlzIiwiSUVfUFJPVE8iLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwid3JpdGUiLCJsdCIsImNsb3NlIiwiUHJvcGVydGllcyIsIklFOF9ET01fREVGSU5FIiwiQXR0cmlidXRlcyIsImRlZmluZVByb3BlcnRpZXMiLCJyYW5kb20iLCJfX2RlZmluZVNldHRlcl9fIiwiZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdPUE4iLCJ3aW5kb3dOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsIiRrZXlzIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIk9iamVjdFByb3RvIiwiYXJyYXlJbmRleE9mIiwibmFtZXMiLCJpc0VudHJpZXMiLCJSZWZsZWN0Iiwib3duS2V5cyIsIiRwYXJzZUZsb2F0IiwiJHRyaW0iLCIkcGFyc2VJbnQiLCJ3cyIsImhleCIsInJhZGl4IiwidGVzdCIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwicHJvbWlzZUNhcGFiaWxpdHkiLCJiaXRtYXAiLCJlbnVtZXJhYmxlIiwiU1JDIiwiJHRvU3RyaW5nIiwiVE9fU1RSSU5HIiwiVFBMIiwiaXNGdW5jdGlvbiIsImJ1aWx0aW5FeGVjIiwicmUxIiwicmUyIiwicmVnZXhwRmxhZ3MiLCJuYXRpdmVFeGVjIiwibmF0aXZlUmVwbGFjZSIsInBhdGNoZWRFeGVjIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwiTlBDR19JTkNMVURFRCIsImxhc3RJbmRleCIsInJlQ29weSIsIm1hdGNoIiwicmVnRXhwIiwicmVwbGFjZXIiLCJwYXJ0IiwiQ09MTEVDVElPTiIsIm1hcHBpbmciLCJjYiIsIm5leHRJdGVtIiwib2YiLCJjaGVjayIsImJ1Z2d5IiwidGFnIiwic3RhdCIsInVpZCIsIlNIQVJFRCIsIm1vZGUiLCJjb3B5cmlnaHQiLCJEIiwidG9JbnRlZ2VyIiwicG9zIiwibCIsImNoYXJDb2RlQXQiLCJzZWFyY2hTdHJpbmciLCJxdW90IiwiY3JlYXRlSFRNTCIsImF0dHJpYnV0ZSIsInAxIiwidG9Mb3dlckNhc2UiLCJyZXBlYXQiLCJtYXhMZW5ndGgiLCJmaWxsU3RyaW5nIiwibGVmdCIsInN0cmluZ0xlbmd0aCIsImZpbGxTdHIiLCJpbnRNYXhMZW5ndGgiLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwiY2VpbCIsInNwYWNlcyIsInNwYWNlIiwibHRyaW0iLCJydHJpbSIsImV4cG9ydGVyIiwiQUxJQVMiLCJGT1JDRSIsInRyaW0iLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiaHRtbCIsImNlbCIsInNldFRhc2siLCJzZXRJbW1lZGlhdGUiLCJjbGVhclRhc2siLCJjbGVhckltbWVkaWF0ZSIsIk1lc3NhZ2VDaGFubmVsIiwiRGlzcGF0Y2giLCJjb3VudGVyIiwicXVldWUiLCJydW4iLCJsaXN0ZW5lciIsImV2ZW50Iiwibm93IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImltcG9ydFNjcmlwdHMiLCJhcHBlbmRDaGlsZCIsInJlbW92ZUNoaWxkIiwic2V0VGltZW91dCIsIm1heCIsIm51bWJlciIsInZhbHVlT2YiLCIkdHlwZWQiLCIkYnVmZmVyIiwicHJvcGVydHlEZXNjIiwidG9JbmRleCIsImNyZWF0ZUFycmF5SW5jbHVkZXMiLCJBcnJheUl0ZXJhdG9ycyIsImFycmF5RmlsbCIsImFycmF5Q29weVdpdGhpbiIsIiREUCIsIiRHT1BEIiwiVWludDhBcnJheSIsIkFSUkFZX0JVRkZFUiIsIlNIQVJFRF9CVUZGRVIiLCJCWVRFU19QRVJfRUxFTUVOVCIsIiRBcnJheUJ1ZmZlciIsIkFycmF5QnVmZmVyIiwiJERhdGFWaWV3IiwiRGF0YVZpZXciLCJhcnJheUZvckVhY2giLCJhcnJheUZpbHRlciIsImFycmF5U29tZSIsImFycmF5RXZlcnkiLCJhcnJheUluY2x1ZGVzIiwiYXJyYXlWYWx1ZXMiLCJhcnJheUtleXMiLCJhcnJheUVudHJpZXMiLCJhcnJheUxhc3RJbmRleE9mIiwibGFzdEluZGV4T2YiLCJhcnJheVJlZHVjZSIsInJlZHVjZSIsImFycmF5UmVkdWNlUmlnaHQiLCJyZWR1Y2VSaWdodCIsImFycmF5Sm9pbiIsImFycmF5U29ydCIsInNvcnQiLCJhcnJheVRvU3RyaW5nIiwiYXJyYXlUb0xvY2FsZVN0cmluZyIsInRvTG9jYWxlU3RyaW5nIiwiVFlQRURfQ09OU1RSVUNUT1IiLCJERUZfQ09OU1RSVUNUT1IiLCJBTExfQ09OU1RSVUNUT1JTIiwiQ09OU1RSIiwiVFlQRURfQVJSQVkiLCJUWVBFRCIsIlZJRVciLCJXUk9OR19MRU5HVEgiLCIkbWFwIiwiYWxsb2NhdGUiLCJMSVRUTEVfRU5ESUFOIiwiVWludDE2QXJyYXkiLCJidWZmZXIiLCJGT1JDRURfU0VUIiwidG9PZmZzZXQiLCJCWVRFUyIsIm9mZnNldCIsInNwZWNpZXNGcm9tTGlzdCIsImxpc3QiLCJmcm9tTGlzdCIsImFkZEdldHRlciIsImludGVybmFsIiwiX2QiLCIkZnJvbSIsIm1hcGZuIiwiJG9mIiwiVE9fTE9DQUxFX0JVRyIsIiR0b0xvY2FsZVN0cmluZyIsImV2ZXJ5IiwiZmlsbCIsImZpbHRlciIsImZpbmQiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJpbmRleE9mIiwic2VhcmNoRWxlbWVudCIsImluY2x1ZGVzIiwic2VwYXJhdG9yIiwibWlkZGxlIiwic29tZSIsImNvbXBhcmVmbiIsInN1YmFycmF5IiwiYmVnaW4iLCIkYmVnaW4iLCJieXRlT2Zmc2V0IiwiJHNsaWNlIiwiJHNldCIsImFycmF5TGlrZSIsIiRpdGVyYXRvcnMiLCJpc1RBSW5kZXgiLCIkZ2V0RGVzYyIsIiRzZXREZXNjIiwiZGVzYyIsIiRUeXBlZEFycmF5UHJvdG90eXBlJCIsIkNMQU1QRUQiLCJHRVRURVIiLCJTRVRURVIiLCJUeXBlZEFycmF5IiwiVEFDIiwiQUJWIiwiVHlwZWRBcnJheVByb3RvdHlwZSIsImFkZEVsZW1lbnQiLCJvIiwiZ2V0dGVyIiwicm91bmQiLCJzZXR0ZXIiLCIkb2Zmc2V0IiwiJGxlbmd0aCIsImJ5dGVMZW5ndGgiLCJrbGFzcyIsIiRsZW4iLCIkbmF0aXZlSXRlcmF0b3IiLCJDT1JSRUNUX0lURVJfTkFNRSIsIiRpdGVyYXRvciIsIkRBVEFfVklFVyIsIldST05HX0lOREVYIiwiQmFzZUJ1ZmZlciIsIkxOMiIsIkJVRkZFUiIsIkJZVEVfTEVOR1RIIiwiQllURV9PRkZTRVQiLCIkQlVGRkVSIiwiJExFTkdUSCIsIiRPRkZTRVQiLCJwYWNrSUVFRTc1NCIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwicnQiLCJ1bnBhY2tJRUVFNzU0IiwibkJpdHMiLCJ1bnBhY2tJMzIiLCJieXRlcyIsInBhY2tJOCIsInBhY2tJMTYiLCJwYWNrSTMyIiwicGFja0Y2NCIsInBhY2tGMzIiLCJ2aWV3IiwiaXNMaXR0bGVFbmRpYW4iLCJpbnRJbmRleCIsIl9iIiwicGFjayIsImNvbnZlcnNpb24iLCJBcnJheUJ1ZmZlclByb3RvIiwiJHNldEludDgiLCJzZXRJbnQ4IiwiZ2V0SW50OCIsInNldFVpbnQ4IiwiYnVmZmVyTGVuZ3RoIiwiZ2V0VWludDgiLCJnZXRJbnQxNiIsImdldFVpbnQxNiIsImdldEludDMyIiwiZ2V0VWludDMyIiwiZ2V0RmxvYXQzMiIsImdldEZsb2F0NjQiLCJzZXRJbnQxNiIsInNldFVpbnQxNiIsInNldEludDMyIiwic2V0VWludDMyIiwic2V0RmxvYXQzMiIsInNldEZsb2F0NjQiLCJUeXBlZCIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMiLCJweCIsInVzZXJBZ2VudCIsIndrc0V4dCIsIlVTRV9TWU1CT0wiLCIkcmUiLCJlc2NhcGUiLCIkZXZlcnkiLCIkZmlsdGVyIiwiJGZpbmQiLCJmb3JjZWQiLCIkZm9yRWFjaCIsIlNUUklDVCIsImNyZWF0ZVByb3BlcnR5IiwiJGluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwiYWRkVG9VbnNjb3BhYmxlcyIsIkFyZ3VtZW50cyIsIiRyZWR1Y2UiLCJ1cFRvIiwic2l6ZSIsImNsb25lZCIsIiRzb21lIiwiJHNvcnQiLCJ0b0pTT04iLCJwdiIsIlRPX1BSSU1JVElWRSIsIkRhdGVQcm90byIsIklOVkFMSURfREFURSIsIkhBU19JTlNUQU5DRSIsIkZ1bmN0aW9uUHJvdG8iLCJGUHJvdG8iLCJuYW1lUkUiLCJzdHJvbmciLCJNQVAiLCJzcXJ0IiwiJGFjb3NoIiwiYWNvc2giLCJOdW1iZXIiLCJNQVhfVkFMVUUiLCIkYXNpbmgiLCJhc2luaCIsIiRhdGFuaCIsImF0YW5oIiwiY2JydCIsImNsejMyIiwiTE9HMkUiLCJjb3NoIiwiaHlwb3QiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJkaXYiLCJzdW0iLCJsYXJnIiwiJGltdWwiLCJpbXVsIiwiVUlOVDE2IiwieG4iLCJ5biIsInhsIiwieWwiLCJsb2cxMCIsIkxPRzEwRSIsImxvZzIiLCJzaW5oIiwiRSIsInRhbmgiLCJ0cnVuYyIsIiROdW1iZXIiLCJCUk9LRU5fQ09GIiwiVFJJTSIsInRvTnVtYmVyIiwiYXJndW1lbnQiLCJ0aGlyZCIsIm1heENvZGUiLCJmaXJzdCIsImNvZGUiLCJkaWdpdHMiLCJwYXJzZUludCIsIl9pc0Zpbml0ZSIsImlzSW50ZWdlciIsImlzU2FmZUludGVnZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUlOX1NBRkVfSU5URUdFUiIsInBhcnNlRmxvYXQiLCJhTnVtYmVyVmFsdWUiLCIkdG9GaXhlZCIsInRvRml4ZWQiLCJFUlJPUiIsIlpFUk8iLCJtdWx0aXBseSIsImMyIiwiZGl2aWRlIiwibnVtVG9TdHJpbmciLCJ0IiwiYWNjIiwiZnJhY3Rpb25EaWdpdHMiLCJ6IiwieDIiLCIkZmFpbHMiLCIkdG9QcmVjaXNpb24iLCJ0b1ByZWNpc2lvbiIsInByZWNpc2lvbiIsIiRmcmVlemUiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldFByb3RvdHlwZU9mIiwiJGlzRXh0ZW5zaWJsZSIsIiRpc0Zyb3plbiIsIiRpc1NlYWxlZCIsIiRwcmV2ZW50RXh0ZW5zaW9ucyIsIiRzZWFsIiwiSW50ZXJuYWwiLCJuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIldyYXBwZXIiLCJtaWNyb3Rhc2siLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsInBlcmZvcm0iLCJwcm9taXNlUmVzb2x2ZSIsIlBST01JU0UiLCJ2ZXJzaW9ucyIsInY4IiwiJFByb21pc2UiLCJlbXB0eSIsIlVTRV9OQVRJVkUiLCJGYWtlUHJvbWlzZSIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsImlzVGhlbmFibGUiLCJpc1JlamVjdCIsIl9uIiwiY2hhaW4iLCJfYyIsIl92Iiwib2siLCJfcyIsInJlYWN0aW9uIiwiZXhpdGVkIiwiaGFuZGxlciIsImZhaWwiLCJfaCIsIm9uSGFuZGxlVW5oYW5kbGVkIiwib25VbmhhbmRsZWQiLCJjb25zb2xlIiwidW5oYW5kbGVkIiwiaXNVbmhhbmRsZWQiLCJlbWl0Iiwib251bmhhbmRsZWRyZWplY3Rpb24iLCJyZWFzb24iLCJlcnJvciIsIl9hIiwib25yZWplY3Rpb25oYW5kbGVkIiwiJHJlamVjdCIsIl93IiwiJHJlc29sdmUiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImNhcGFiaWxpdHkiLCJhbGwiLCJyZW1haW5pbmciLCIkaW5kZXgiLCJhbHJlYWR5Q2FsbGVkIiwicmFjZSIsInJBcHBseSIsImZBcHBseSIsInRoaXNBcmd1bWVudCIsImFyZ3VtZW50c0xpc3QiLCJMIiwickNvbnN0cnVjdCIsIk5FV19UQVJHRVRfQlVHIiwiQVJHU19CVUciLCJUYXJnZXQiLCJuZXdUYXJnZXQiLCIkYXJncyIsInByb3BlcnR5S2V5IiwiYXR0cmlidXRlcyIsImRlbGV0ZVByb3BlcnR5IiwiRW51bWVyYXRlIiwiZW51bWVyYXRlIiwicmVjZWl2ZXIiLCJzZXRQcm90byIsIlYiLCJleGlzdGluZ0Rlc2NyaXB0b3IiLCJvd25EZXNjIiwiJGZsYWdzIiwiJFJlZ0V4cCIsIkNPUlJFQ1RfTkVXIiwidGlSRSIsInBpUkUiLCJmaVUiLCJwcm94eSIsImZsYWdzIiwiYWR2YW5jZVN0cmluZ0luZGV4IiwicmVnRXhwRXhlYyIsIiRtYXRjaCIsIm1heWJlQ2FsbE5hdGl2ZSIsInJ4IiwiZnVsbFVuaWNvZGUiLCJtYXRjaFN0ciIsIlNVQlNUSVRVVElPTl9TWU1CT0xTIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQiLCJSRVBMQUNFIiwiJHJlcGxhY2UiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsImZ1bmN0aW9uYWxSZXBsYWNlIiwicmVzdWx0cyIsImFjY3VtdWxhdGVkUmVzdWx0IiwibmV4dFNvdXJjZVBvc2l0aW9uIiwibWF0Y2hlZCIsInBvc2l0aW9uIiwiY2FwdHVyZXMiLCJuYW1lZENhcHR1cmVzIiwicmVwbGFjZXJBcmdzIiwicmVwbGFjZW1lbnQiLCJnZXRTdWJzdGl0dXRpb24iLCJ0YWlsUG9zIiwiY2giLCJjYXB0dXJlIiwic2FtZVZhbHVlIiwiU0VBUkNIIiwiJHNlYXJjaCIsInByZXZpb3VzTGFzdEluZGV4IiwiY2FsbFJlZ0V4cEV4ZWMiLCIkbWluIiwiJHB1c2giLCJNQVhfVUlOVDMyIiwiU1VQUE9SVFNfWSIsIlNQTElUIiwiJHNwbGl0IiwiaW50ZXJuYWxTcGxpdCIsImxpbWl0IiwibGFzdExlbmd0aCIsIm91dHB1dCIsImxhc3RMYXN0SW5kZXgiLCJzcGxpdExpbWl0Iiwic2VwYXJhdG9yQ29weSIsInNwbGl0dGVyIiwidW5pY29kZU1hdGNoaW5nIiwibGltIiwicSIsImFkZCIsIiRhdCIsImNvZGVQb2ludEF0IiwiRU5EU19XSVRIIiwiJGVuZHNXaXRoIiwiZW5kc1dpdGgiLCJlbmRQb3NpdGlvbiIsInNlYXJjaCIsImNvbG9yIiwiZnJvbUNoYXJDb2RlIiwiJGZyb21Db2RlUG9pbnQiLCJmcm9tQ29kZVBvaW50IiwiSU5DTFVERVMiLCJwb2ludCIsInVybCIsInJhdyIsImNhbGxTaXRlIiwidHBsIiwiU1RBUlRTX1dJVEgiLCIkc3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsIl9jcmVhdGUiLCJnT1BORXh0IiwiJEdPUFMiLCIkSlNPTiIsIkpTT04iLCJfc3RyaW5naWZ5Iiwic3RyaW5naWZ5IiwiSElEREVOIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiUU9iamVjdCIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJwcm90b0Rlc2MiLCJzeW0iLCJpc1N5bWJvbCIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT1AiLCJlczZTeW1ib2xzIiwid2VsbEtub3duU3ltYm9scyIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsIkZBSUxTX09OX1BSSU1JVElWRVMiLCIkcmVwbGFjZXIiLCIkaXNWaWV3IiwiaXNWaWV3IiwiZmluIiwidmlld1MiLCJ2aWV3VCIsImluaXQiLCJJbnRlcm5hbE1hcCIsImVhY2giLCJ3ZWFrIiwiTkFUSVZFX1dFQUtfTUFQIiwiSVNfSUUxMSIsIkFjdGl2ZVhPYmplY3QiLCJXRUFLX01BUCIsIiRXZWFrTWFwIiwiV0VBS19TRVQiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJmbGF0TWFwIiwiZmxhdHRlbiIsImRlcHRoQXJnIiwiJGluY2x1ZGVzIiwiYXNhcCIsImlzRXJyb3IiLCJjbGFtcCIsImxvd2VyIiwidXBwZXIiLCJERUdfUEVSX1JBRCIsIlBJIiwiUkFEX1BFUl9ERUciLCJkZWdyZWVzIiwicmFkaWFucyIsImZzY2FsZSIsImlhZGRoIiwieDAiLCJ4MSIsInkwIiwieTEiLCIkeDAiLCIkeTAiLCJpbXVsaCIsInUiLCIkdSIsIiR2IiwidTAiLCJ2MCIsInUxIiwidjEiLCJpc3ViaCIsInNpZ25iaXQiLCJ1bXVsaCIsIl9fZGVmaW5lR2V0dGVyX18iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZ2V0RGVzYyIsIl9fbG9va3VwR2V0dGVyX18iLCJfX2xvb2t1cFNldHRlcl9fIiwiJHZhbHVlcyIsIk9CU0VSVkFCTEUiLCJjbGVhbnVwU3Vic2NyaXB0aW9uIiwic3Vic2NyaXB0aW9uIiwiY2xlYW51cCIsInN1YnNjcmlwdGlvbkNsb3NlZCIsIl9vIiwiY2xvc2VTdWJzY3JpcHRpb24iLCJTdWJzY3JpcHRpb24iLCJvYnNlcnZlciIsInN1YnNjcmliZXIiLCJTdWJzY3JpcHRpb25PYnNlcnZlciIsInVuc3Vic2NyaWJlIiwiJE9ic2VydmFibGUiLCJzdWJzY3JpYmUiLCJvYnNlcnZhYmxlIiwiaXRlbXMiLCJPYnNlcnZhYmxlIiwib25GaW5hbGx5IiwibWV0YWRhdGEiLCJ0b01ldGFLZXkiLCJvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhIiwiZGVmaW5lTWV0YWRhdGEiLCJtZXRhZGF0YUtleSIsIm1ldGFkYXRhVmFsdWUiLCJkZWxldGVNZXRhZGF0YSIsIlNldCIsIm9yZGluYXJ5T3duTWV0YWRhdGFLZXlzIiwib3JkaW5hcnlNZXRhZGF0YUtleXMiLCJvS2V5cyIsInBLZXlzIiwiZ2V0TWV0YWRhdGFLZXlzIiwib3JkaW5hcnlIYXNPd25NZXRhZGF0YSIsIm9yZGluYXJ5R2V0T3duTWV0YWRhdGEiLCJvcmRpbmFyeUdldE1ldGFkYXRhIiwiZ2V0TWV0YWRhdGEiLCJnZXRPd25NZXRhZGF0YUtleXMiLCJnZXRPd25NZXRhZGF0YSIsIm9yZGluYXJ5SGFzTWV0YWRhdGEiLCJoYXNNZXRhZGF0YSIsImhhc093bk1ldGFkYXRhIiwiJG1ldGFkYXRhIiwiZ2V0RmxhZ3MiLCJSZWdFeHBQcm90byIsIiRSZWdFeHBTdHJpbmdJdGVyYXRvciIsIl9yIiwibWF0Y2hBbGwiLCIkcGFkIiwiV0VCS0lUX0JVRyIsIlRPX1NUUklOR19UQUciLCJBcnJheVZhbHVlcyIsIkRPTUl0ZXJhYmxlcyIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiY29sbGVjdGlvbnMiLCJleHBsaWNpdCIsIkNvbGxlY3Rpb24iLCIkdGFzayIsIk1TSUUiLCJ0aW1lIiwiYm91bmRBcmdzIiwic2V0SW50ZXJ2YWwiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZVJvb3QiLCJ0YXJnZXRMZW5ndGgiLCJkZWZhdWx0IiwiZGlydHlPYmplY3QiLCJwcm9wZXJ0eSIsIl9pbmRleCIsIl9fZXNNb2R1bGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2luZGV4MiIsIl9pbmRleDMiLCJfaW5kZXg0IiwiX2luZGV4NSIsIl9pbmRleDYiLCJfaW5kZXg3IiwiZm9ybWF0VGltZXpvbmVTaG9ydCIsImRpcnR5RGVsaW1pdGVyIiwiYWJzT2Zmc2V0IiwiaG91cnMiLCJtaW51dGVzIiwiZGVsaW1pdGVyIiwiZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzIiwiZm9ybWF0VGltZXpvbmUiLCJfZGVmYXVsdCIsImRhdGUiLCJ0b2tlbiIsImxvY2FsaXplIiwiZXJhIiwid2lkdGgiLCJzaWduZWRZZWFyIiwieWVhciIsIm9yZGluYWxOdW1iZXIiLCJ1bml0IiwiWSIsIm9wdGlvbnMiLCJzaWduZWRXZWVrWWVhciIsIndlZWtZZWFyIiwidHdvRGlnaXRZZWFyIiwiaXNvV2Vla1llYXIiLCJRIiwicXVhcnRlciIsIk0iLCJtb250aCIsIndlZWsiLCJJIiwiaXNvV2VlayIsImRheU9mWWVhciIsImRheU9mV2VlayIsImdldFVUQ0RheSIsImRheSIsImxvY2FsRGF5T2ZXZWVrIiwid2Vla1N0YXJ0c09uIiwiaXNvRGF5T2ZXZWVrIiwiZGF5UGVyaW9kRW51bVZhbHVlIiwiZGF5UGVyaW9kIiwiaCIsIkgiLCJYIiwiX2xvY2FsaXplIiwidGltZXpvbmVPZmZzZXQiLCJfb3JpZ2luYWxEYXRlIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJvcmlnaW5hbERhdGUiLCJ0aW1lc3RhbXAiLCJ0b1VwcGVyQ2FzZSIsIm51bWJlck9mRGlnaXRzIiwibWlsbGlzZWNvbmRzIiwiZnJhY3Rpb25hbFNlY29uZHMiLCJkYXRlTG9uZ0Zvcm1hdHRlciIsInBhdHRlcm4iLCJmb3JtYXRMb25nIiwidGltZUxvbmdGb3JtYXR0ZXIiLCJkYXRlVGltZUZvcm1hdCIsIm1hdGNoUmVzdWx0IiwiZGF0ZVBhdHRlcm4iLCJ0aW1lUGF0dGVybiIsImRhdGVUaW1lIiwidXRjRGF0ZSIsIlVUQyIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsInNldFVUQ0Z1bGxZZWFyIiwiZGlydHlEYXRlIiwic2V0VVRDTW9udGgiLCJzZXRVVENIb3VycyIsInN0YXJ0T2ZZZWFyVGltZXN0YW1wIiwiZGlmZmVyZW5jZSIsIk1JTExJU0VDT05EU19JTl9EQVkiLCJkaWZmIiwiTUlMTElTRUNPTkRTX0lOX1dFRUsiLCJmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyIiwic3RhcnRPZk5leHRZZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciIsInN0YXJ0T2ZUaGlzWWVhciIsImRpcnR5T3B0aW9ucyIsImxvY2FsZSIsImxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsImZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsImRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUiLCJmaXJzdFdlZWtPZk5leHRZZWFyIiwiZmlyc3RXZWVrT2ZUaGlzWWVhciIsImlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4iLCJwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMiLCJpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4iLCJwcm90ZWN0ZWRXZWVrWWVhclRva2VucyIsInRocm93UHJvdGVjdGVkRXJyb3IiLCJmb3JtYXQiLCJpbnB1dCIsInJlcXVpcmVkIiwic2V0VVRDRGF0ZSIsImZvdXJ0aE9mSmFudWFyeSIsImxvY2FsZVdlZWtTdGFydHNPbiIsImRlZmF1bHRXZWVrU3RhcnRzT24iLCJmaXJzdFdlZWsiLCJkaXJ0eU51bWJlciIsImRpcnR5QW1vdW50IiwiYW1vdW50IiwiZGlydHlGb3JtYXRTdHIiLCJfaW5kZXgxMCIsImZvcm1hdFN0ciIsIl9pbmRleDkiLCJmb3JtYXR0ZXJPcHRpb25zIiwibG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJzdWJzdHJpbmciLCJmaXJzdENoYXJhY3RlciIsImxvbmdGb3JtYXR0ZXIiLCJmb3JtYXR0aW5nVG9rZW5zUmVnRXhwIiwiY2xlYW5Fc2NhcGVkU3RyaW5nIiwiZm9ybWF0dGVyIiwidXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zIiwiX2luZGV4OCIsInVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnMiLCJ1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCIsImVzY2FwZWRTdHJpbmdSZWdFeHAiLCJkb3VibGVRdW90ZVJlZ0V4cCIsImRlZmF1bHRXaWR0aCIsImZvcm1hdHMiLCJkaXJ0eUluZGV4IiwidmFsdWVzQXJyYXkiLCJmb3JtYXR0aW5nVmFsdWVzIiwiZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCIsIl9kZWZhdWx0V2lkdGgiLCJfd2lkdGgiLCJhcmd1bWVudENhbGxiYWNrIiwiZmluZEtleSIsImFycmF5IiwibWF0Y2hQYXR0ZXJuIiwibWF0Y2hQYXR0ZXJucyIsImRlZmF1bHRNYXRjaFdpZHRoIiwibWF0Y2hlZFN0cmluZyIsInBhcnNlUGF0dGVybnMiLCJkZWZhdWx0UGFyc2VXaWR0aCIsInZhbHVlQ2FsbGJhY2siLCJyZXN0IiwicGFyc2VSZXN1bHQiLCJwYXJzZVBhdHRlcm4iLCJmb3JtYXREaXN0YW5jZUxvY2FsZSIsImxlc3NUaGFuWFNlY29uZHMiLCJvbmUiLCJvdGhlciIsInhTZWNvbmRzIiwiaGFsZkFNaW51dGUiLCJsZXNzVGhhblhNaW51dGVzIiwieE1pbnV0ZXMiLCJhYm91dFhIb3VycyIsInhIb3VycyIsInhEYXlzIiwiYWJvdXRYV2Vla3MiLCJ4V2Vla3MiLCJhYm91dFhNb250aHMiLCJ4TW9udGhzIiwiYWJvdXRYWWVhcnMiLCJ4WWVhcnMiLCJvdmVyWFllYXJzIiwiYWxtb3N0WFllYXJzIiwidG9rZW5WYWx1ZSIsImFkZFN1ZmZpeCIsImNvbXBhcmlzb24iLCJmdWxsIiwibG9uZyIsIm1lZGl1bSIsInNob3J0IiwiZm9ybWF0UmVsYXRpdmVMb2NhbGUiLCJsYXN0V2VlayIsInllc3RlcmRheSIsInRvZGF5IiwidG9tb3Jyb3ciLCJuZXh0V2VlayIsIl9kYXRlIiwiX2Jhc2VEYXRlIiwiX29wdGlvbnMiLCJyZW0xMDAiLCJuYXJyb3ciLCJhYmJyZXZpYXRlZCIsIndpZGUiLCJhbSIsInBtIiwibWlkbmlnaHQiLCJub29uIiwibW9ybmluZyIsImFmdGVybm9vbiIsImV2ZW5pbmciLCJuaWdodCIsImFueSIsImZvcm1hdERpc3RhbmNlIiwiZm9ybWF0UmVsYXRpdmUiLCJhcmdTdHIiLCJ3YXJuIiwic3RhY2siLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJpbmRleEJ5SWRlbnRpZmllciIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJpbnNlcnQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImdldFRhcmdldCIsInNldEF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImZ1bGxZZWFyIiwiaG91ciIsIm1pbnV0ZSIsInNlY29uZCIsIm1pbGxpc2Vjb25kIiwiZHRmIiwidGltZVpvbmUiLCJJbnRsIiwiRGF0ZVRpbWVGb3JtYXQiLCJ0aW1lWm9uZU5hbWUiLCJnZXREVEYiLCJmb3JtYXRUb1BhcnRzIiwiZm9ybWF0dGVkIiwicGFydHNUaW1lWm9uZSIsInR6TmFtZU1hdGNoIiwic3Vic3RyIiwiaGFja3lUaW1lWm9uZSIsInRpbWV6b25lU3RyaW5nIiwiaXNVdGNEYXRlIiwiYWJzb2x1dGVPZmZzZXQiLCJwYXR0ZXJucyIsInRpbWV6b25lWiIsInRpbWV6b25lSEgiLCJ2YWxpZGF0ZVRpbWV6b25lIiwiTUlMTElTRUNPTkRTX0lOX0hPVVIiLCJ0aW1lem9uZUhITU0iLCJ0aW1lWm9uZVN0cmluZyIsInZhbGlkSUFOQVRpbWV6b25lQ2FjaGUiLCJpc1ZhbGlkVGltZXpvbmVJQU5BU3RyaW5nIiwidG9VdGNEYXRlIiwiY2FsY09mZnNldCIsImZpeGVkT2Zmc2V0IiwidXRjR3Vlc3MiLCJvMiIsIm8zIiwiZml4T2Zmc2V0IiwidGltZXpvbmUiLCJ0b2tlbnMiLCJhc1VUQyIsImFzVFMiLCJvdmVyIiwiZHRmQ2FjaGUiLCJ0ZXN0RGF0ZUZvcm1hdHRlZCIsImhvdXIxMiIsImhvdXJDeWNsZVN1cHBvcnRlZCIsImhvdXJDeWNsZSIsImdldERhdGVUaW1lRm9ybWF0IiwiZmlsbGVkIiwidHlwZVRvUG9zIiwicGFydHNPZmZzZXQiLCJwYXJzZWQiLCJoYWNreU9mZnNldCIsImdldFRpbWVab25lT2Zmc2V0IiwidGltZVpvbmVPZmZzZXQiLCJhZGRMZWFkaW5nWmVyb3MiLCJkaXJ0eURlbGltZXRlciIsImRlbGltZXRlciIsIm1hdGNoZXMiLCJ0ekZvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJwcmVjZWRlZEJ5UXVvdGVkU2VjdGlvbiIsInJlcGxhY2VkIiwiZXh0ZW5kZWRPcHRpb25zIiwiZm9ybWF0SW5UaW1lWm9uZSIsInRvRGF0ZSIsInV0Y1RvWm9uZWRUaW1lIiwiem9uZWRUaW1lVG9VdGMiLCJhZGRpdGlvbmFsRGlnaXRzIiwiZGF0ZVN0cmluZ3MiLCJzcGxpdERhdGVTdHJpbmciLCJwYXJzZVllYXJSZXN1bHQiLCJwYXJzZVllYXIiLCJyZXN0RGF0ZVN0cmluZyIsInBhcnNlRGF0ZSIsInBhcnNlVGltZSIsImRhdGVUaW1lUGF0dGVybiIsInBsYWluVGltZSIsIllZIiwiWVlZIiwiWVlZWSIsIllZWVlZIiwiTU0iLCJEREQiLCJNTUREIiwiV3d3IiwiV3d3RCIsIkhIIiwiSEhNTSIsIkhITU1TUyIsImRhdGVTdHJpbmciLCJ0aW1lU3RyaW5nIiwicGFydHMiLCJwYXR0ZXJuWVlZIiwicGF0dGVybllZWVlZIiwieWVhclN0cmluZyIsImNlbnR1cnlTdHJpbmciLCJ2YWxpZGF0ZURhdGUiLCJpc0xlYXBZZWFyIiwiaXNMZWFwWWVhckluZGV4IiwidmFsaWRhdGVEYXlPZlllYXJEYXRlIiwidmFsaWRhdGVXZWVrRGF0ZSIsImRheU9mSVNPV2Vla1llYXIiLCJ2YWxpZGF0ZVRpbWUiLCJzZWNvbmRzIiwiREFZU19JTl9NT05USCIsIkRBWVNfSU5fTU9OVEhfTEVBUF9ZRUFSIiwib2Zmc2V0TWlsbGlzZWNvbmRzIiwidXRjIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImRlZmluaXRpb24iLCJnbG9iYWxUaGlzIiwicHJvcCIsInJlcXVpcmVkQXJncyIsImRpcnR5VW5peFRpbWUiLCJ1bml4VGltZSIsImlzRGF0ZSIsImlzVmFsaWQiLCJidWlsZEZvcm1hdExvbmdGbiIsImJ1aWxkTG9jYWxpemVGbiIsImJ1aWxkTWF0Y2hGbiIsImFkZE1pbGxpc2Vjb25kcyIsInN1Yk1pbGxpc2Vjb25kcyIsInN0YXJ0T2ZVVENJU09XZWVrIiwiZ2V0VVRDSVNPV2Vla1llYXIiLCJzdGFydE9mVVRDSVNPV2Vla1llYXIiLCJzdGFydE9mVVRDV2VlayIsImdldFVUQ1dlZWtZZWFyIiwic3RhcnRPZlVUQ1dlZWtZZWFyIiwiZm9ybWF0dGVycyIsImxpZ2h0Rm9ybWF0dGVycyIsImdldFVUQ1dlZWsiLCJnZXRVVENJU09XZWVrIiwiZ2V0VVRDRGF5T2ZZZWFyIiwiZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyIsImxvY2F0aW9uIiwiZm9ybSIsInNlYXJjaEljb24iLCJtYWluSWNvbiIsInRlbXBlcmF0dXJlIiwiZGVzY3JpcHRpb24iLCJ3aW5kIiwiZmVlbHNMaWtlIiwic3VucmlzZSIsInN1bnNldCIsIm1vZGVCdXR0b25zIiwicXVlcnlTZWxlY3RvckFsbCIsImNhcmRJY29ucyIsImNhcmRUZW1wcyIsImNhcmRUaW1lcyIsInJpZ2h0QnV0dG9uIiwibGVmdEJ1dHRvbiIsImdldFdlYXRoZXIiLCJwcmV2ZW50RGVmYXVsdCIsImJ1dHRvbiIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwic2V0SXNIb3VybHkiLCJpc0hvdXJseSIsInNlY3Rpb25EaXNwbGF5V2VhdGhlciIsIndlYXRoZXIiLCJ0ZXh0Q29udGVudCIsImhvdXJseUZvcmVjYXN0IiwiZGF0ZUFuZFRpbWUiLCJpc0FmdGVyIiwiZGlydHlEYXRlVG9Db21wYXJlIiwiZGF0ZVRvQ29tcGFyZSIsInRpbWV6b25lTm9ybWFsaXplIiwiZHQiLCJmcm9tVW5peFRpbWUiLCJnZXRIb3VyIiwiaXNEYXl0aW1lIiwid2luZENhcmRpbmFsIiwid2luZERpcmVjdGlvbiIsInNldEljb24iLCJmb3JlY2FzdCIsImljb24iLCJnZXRDaXR5IiwiY2l0eU5hbWUiLCJmZXRjaCIsInJlc3BvbnNlIiwianNvbiIsImxhdCIsImxvbiIsImFsZXJ0IiwiZmV0Y2hXZWF0aGVyIiwid2VhdGhlclN1bW1hcnkiLCJjdXJyZW50V2VhdGhlciIsImN1cnJlbnQiLCJkYWlseSIsInRlbXAiLCJmZWVsc19saWtlIiwibWFpbiIsIndpbmRfc3BlZWQiLCJ3aW5kX2RlZyIsInV2SW5kZXgiLCJ1dmkiLCJodW1pZGl0eSIsInByZXNzdXJlIiwic2V2ZW5EYXlGb3JlY2FzdCIsImRhaWx5SGlnaCIsImRhaWx5TG93Iiwid2luY19kZWciLCJyYWluIiwiaG91cmx5IiwibWFpbkRpc3BsYXlXZWF0aGVyIiwiYm9keSIsImJhY2tncm91bmRJbWFnZSIsInNldEJhY2tncm91bmQiLCJ3ZWF0aGVySW5kZXgiLCJjaXR5Iiwic2V0V2VhdGhlciIsInJlcXVpcmUiLCJvbmxvYWQiXSwic291cmNlUm9vdCI6IiJ9